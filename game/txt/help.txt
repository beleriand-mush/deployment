& local
--------------------* Beleriand local changes *----------------------

This page describes differences between the current BeleriandMUSH
server and the release of PennMUSH (1.7.1 pl3) it is based on.

* Extensions:

WHO                       DOING, HOSTS              @chzone
Pemit_All                 @stats MEM (*)            lattr() (*)
Inheritance               Parent subst              @set
@a(dis)connect            help                      @chown/preserve
@scan (*)                 @search,lsearch() (*!)

* New features:

@sdescribe                mangle()                  getvalue()
Special flags             @wallprefix               LASTOFF (*)
Failure messages          @auto_chzone              Variables
inlist()                  Control Lock              Receive Lock
@vdolist                  viter()

* Fixes/minor changes:

@oemit (*)                Jump_Ok (*)               @pemit/list (*)
@switch (*)               Page Lock                 home (*)
Control

Credits: Melkor, Paleran (ex-Beren), Thingy (ex-Thingol), Tulkas
---------------------------------------------------------------------
For details, use 'help local <name>'.        (*=no details available)
For help on softcoded commands, use '-help'.       (!=NEW or CHANGED)

& local1
--------------------* Beleriand local changes *--------------(Part 1)

* Extensions to existing features:

  WHO               now case insensitive
  DOING             now non-existent. See_all players see regular WHO
                    and can use HOSTS to get old who output
  @chzone           let your friends put objects in your zone
  Pemit_All         now more powerful than Nospoof
  @stats MEM        wizard-only memory usage statistics
  lattr()           always returns the list of visible attributes
  Inheritance       locks, @listens and ^-patterns can be inherited
  Parent subst      short and fast equivalent to parent(%!): %^
  @set              flags on locks
  @a(dis)connect    3 arguments are passed to them
  help              accepts abbreviated topic names
  @chown/preserve   @chown that does not touch the flags and powers
  @scan             shows matched attributes
  @search,lsearch() NEW! predicates controls and is_controlled_by

& local2
--------------------* Beleriand local changes *--------------(Part 2)

* New amazing features:

  @sdescribe        makes 'look' more interesting
  mangle()          unintelligible text in 1 millisecond!
  getvalue()        split your attributes into sub-attributes
  Special flags     various local flags
  @wallprefix	    command to change your @wall message prefix
  LASTOFF           the game remembers when you disconnected
  Failure messages  custom failure messages for say/give/leave/drop
  @auto_chzone      automagically @chzones created stuff
  Variables         variables in the softcode
  inlist()          is this a member of the list or not?
  Control-lock      let your friends control your object
  @vdolist          @dolist variant iterating a variable
  viter()           iter() variant iterating a variable

& local3
--------------------* Beleriand local changes *--------------(Part 3)

* Fixes and minor changes:

  @oemit            always emits to the given room
  Jump_Ok           restricted to Royals/Wizards
  @pemit/list       ##-substitution supressed
  @switch           @swi 1=1,@wait 1={x;y} works now
  Page Lock         page lock does not block pages completely
  home              you can't go home when you are IC
  Control           control algorithm details

& local @chzone
  Everybody who passes new chzone lock (if set) of the ZMO is now
  allowed to @chzone stuff there.

  If the ZMO has not this lock, only its owner (and the wizards)
  can @chzone objects to it.

  Example:
    you> @lock/chzone zmo==*friend
    friend> @chzone thing=zmo (and it works!)

& local Pemit_All
  Grant Pemit_All power to your object and its pemits will go to
  to those set No_spoof WITHOUT this stupid [Foo->Bar] message.

& local WHO
& local DOING
& local HOSTS
  WHO
  Displays a list of players currently connected to the MUSH. The WHO
  tells you how long a player has been on and how long they have been
  inactive. 

  HOSTS
  Privileged players only. This command shows the list of connected
  players together with their current location and adresses of hosts
  they are connected from.

  You can give an argument to these commands but this argument MUST be
  preceded by a space. This is different from standard PennMUSH behaviour.

& local Inheritance
  In PennMUSH, locks, @listen and ^-patters are not inherited from the
  object's parent. BeleriandMUSH server allows these kinds of inheritance,
  so as to make object-prototyping easier and more efficient.

  * Lock inheritance

    When the object has not the lock of given type but its parent has,
    the inherited lock is used unless it is set no_inherit (all locks
    are no_inherit by default to preserve backwards compatibility).
    TinyMUSH-like checking of parental Use_Locks during $-command
    matching is suppressed (it was broken anyway).

  * Listening inheritance

    When the object has not @listen but its parent has, the inherited
    @listen is used. ^-patterns are inherited in the same way as
    $-commands, Listen_Lock is checked instead of Use_Lock.
    As you would expect, no_inherit (and no_listen for ^-patterns)
    blocks this.

  See also: Object parents, @lock, Listening, local Parent lock, local @set

& local @set
  @set <object>/<attribute>=[!]<atrflag>
  @set <object>|<lock>=[!]<lockflag>
  
  The first for sets (or unsets) an attribute flag on the specified
  <attribute> of <object>. NEW possible flags are:

  no_listen         Attribute will not be checked for ^-pattern.
                    In 'examine', this is denoted by '^'.

  The second form sets (or unsets) a lock flag on the specified <lock>
  of <object>. Possible flags are:

  no_inherit        Lock will not be inherited by the children of
                    this object. This is the default setting for new locks.
		    In 'examine', a lock WITHOUT this flag is denoted by 'i'.
  no_clone          Lock will not be copied if the object is @clone'd.
                    In 'examine', this is denoted by 'c'.

  See also: @set

& @sdescribe
& local @sdescribe
  @sdescribe <object> [=<short description>]

  This sets a short description that will be appended to the name
  of the object if you look around in the same room. If the object is
  an exit from the transparent room, its SDESCRIBE is displayed after its
  name instead of 'leads to...'.

  Example:
    > @sdescribe Object=jumps wildly here
    > @sdescribe Exit=is [switch(v(locked),1,closed and locked,open]
    > look
    The room
    This is a room.
    Contents.
    Object(#2354n) jumps wildly here
    Obvious exits:
      Exit is closed and locked

& mangle()
& local mangle()
  mangle(<text>, <intelligibility>)

  This function makes the text less intelligible according to the
  value of intelligibility. Its range is from 0 (uncomprehensible)
  to 100 (unmolested).

& getvalue()
& setvalue()
& removevalue()
& local getvalue()
& local setvalue()
& local removevalue()
  getvalue(<list>, <key> [,<default value>])
  extracts a value with the given key from the list; if there is
  no such item, the default value (if any) is returned

  setvalue(<list>, <key>, <new value>)
  changes the value with the given key to a new value and returns the
  new list; if there was no such item, the item is added

  removevalue(<list>, <key>)
  removes the item specified by the key from the list and returns
  the modified list; if there is no such item, nothing is changed

  The list has the form: key1:value1 key2:value2...; keys could not
  contain colons and spaces; values, on the other hand, could contain
  any characters (spaces are stored as %b and percents as %%).

& local Special Flags
  Beleriand special flags:

  ADMIN (t, players)
  EMERITUS (~, players)

  FEATURE (T, players)
  FIGHTER (f, players and things)
  KILLED (k, players and things)
  EQUIPMENT (q, things)

  See local FLAG-NAME, local Combat_Master for details

& ADMIN
& local ADMIN
  Flag: ADMIN (players)

  When set, the player is one of the (local) administrators of the MUSH.
  Royal/wizard settable.

& EMERITUS
& local EMERITUS
  Flag: EMERITUS (players)

  This is the flag given to the players who left their admin positions
  (retired admins) but have done a lot for the MUSH and deserve to get
  something special. Wizard settable.

& FEATURE
& local FEATURE
  Flag: FEATURE (players)

  This is the flag given to the players playing a feature character.
  Royal/wizard settable.

& local Combat Flags
& FIGHTER
& local FIGHTER
& EQUIPMENT
& local EQUIPMENT
& KILLED
& local KILLED
& Combat_Master
& local Combat_Master
  Flags: FIGHTER, KILLED, EQUIPMENT
  Power: Combat_Master

  flags used in Beleriand combat system
  FIGHTER   = object is allowed to take part in combat
  KILLED    = object is dead, and (temporarily) not able to fight
  EQUIPMENT = object is a piece of standard equipment (weapon, armor..)

  Flags are settable by wizards, royals, and object wielding
  Combat_Master power.

& @wallprefix
& local @wallprefix
  @wallprefix me = <message>

  Allows to set arbitrary prefix for @walls (useful for wizard, royals
  and players with Announce power). Does not put automatically your name
  there, so do it yourself (unless you want to be anonymous). The text
  is not evaluated.

& local Failure messages
  @speech_failure   custom failure messages for Speech_Lock
  @give_failure     custom failure messages for Give_Lock
  @leave_failure    custom failure msgs for Leave_Lock and NO_LEAVE
  @drop_failure     custom failure messages for Drop_Lock

& @speech_failure
& @speech_ofailure
& @speech_afailure
& local @speech_failure
& local @speech_ofailure
& local @speech_afailure
  @speech_failure  <room> = <message>
  @speech_ofailure <room> = <message>
  @speech_afailure <room> = <message>

  When the object tries to say anything but does not pass the Speech_Lock
  of its location, it will see the contents of location's SPEECH_FAILURE
  attribute, its neighbours will see the contents of SPEECH_OFAILURE, and
  SPEECH_AFAILURE will be triggered.

& @give_failure
& @give_ofailure
& @give_afailure
& local @give_failure
& local @give_ofailure
& local @give_afailure
  @give_failure  <obj> = <message>
  @give_ofailure <obj> = <message>
  @give_afailure <obj> = <message>

  When the player does not pass the Give_Lock of an object he tries to give,
  he will see the contents of object's GIVE_FAILURE attribute, his neighbours
  will see the contents of GIVE_OFAILURE, and GIVE_AFAILURE will be triggered.

& @drop_failure
& @drop_ofailure
& @drop_afailure
& local @drop_failure
& local @drop_ofailure
& local @drop_afailure
  @drop_failure  <obj> = <message>
  @drop_ofailure <obj> = <message>
  @drop_afailure <obj> = <message>

  When the player does not pass the Drop_Lock of an object he tries to drop,
  he will see the contents of object's DROP_FAILURE attribute, his neighbours
  will see the contents of DROP_OFAILURE, and DROP_AFAILURE will be triggered.

& @leave_failure
& @leave_ofailure
& @leave_afailure
& local @leave_failure
& local @leave_ofailure
& local @leave_afailure
  @leave_failure  <obj> = <message>
  @leave_ofailure <obj> = <message>
  @leave_afailure <obj> = <message>

  When the player does not pass the Leave_Lock of his location when going out,
  he will see the contents of locations's LEAVE_FAILURE attribute, his
  neighbours will see the contents of LEAVE_OFAILURE, and LEAVE_AFAILURE will
  be triggered.

  NOTE: these attributes has been obsoleted by standard attributes
  LFAIL, OLFAIL, and ALFAIL introduced in Penn 1.6.6.

& Parent lock
& local Parent lock
  @lock[/<locktype>] <object> = ^

  Object will inherit the specified lock from its parent. Equivalent
  to @lock/[<locktype>] <object>=@[parent(<object)] but the lock does not
  need to be changed when the object is re-parented, and the overhead of ^
  is lower.

  You can use ^ in more complicated locks too.
  Example: @lock object=(=*Joe&^)|*Bob

  WARNING: due to implementation problems, mixing implicit and explicit
  lock inheritance could lead to rather suprising results.

  See also: @lock, local Inheritance, Object parents

& Parent subst
& local Parent subst
  %^

  Equivalent to parent(%!) but shorter and faster.

  See also: Substitutions, local Inheritance, Object parents

& @auto_chzone
& local @auto_chzone
  @auto_chzone me = <zone>

  Automatically @chzones every created object (@created, @digged, @opened)
  to the given zone (if you have the permission to do it). This is useful
  when you are building and you do not want to re-@chzone yourself for any
  reason (or kill your fingers/keyboard with tons of @chzone's).

& variables
& local variables
  Variables are the generalization of existing "local registers". The code
  can use arbitrary number of these variables, and they can have arbitrary
  names.

  Set variables with @setq and setq().
  Read their values with r() and %{}.
  
  Variables are not propagated through ulocal(), @trigger, @verb, and
  $-command invocations.
  Variables are propagated through u(), udefault(), zfun(), @switch,
  @select, @dolist, and @wait.

  Special variables:
  Iter() and @dolist set %q# and %q@ variables (equivalent to ## and #@).
  Switch(), @switch, and @select set %q$ variable (equiv. to #$).

  See also: local setq(), local r(), local @setq,
            local @vdolist, local viter()

& local setq()
& local r()
  setq(<variable>,<value>)
  r(<variable>)
  %{<variable>}

  If <variable> is a non-numerical string, these functions work with
  variables, not r-registers. Setq() sets <variable>, r() returns its value.
  The %{<variable>} percent-substitution returns the value of <variable>
  but its name is not evaluated.

  See also: local variables

& local @setq
  @setq[/<switch>] <variable> = <value>

  Sets the <variable> to <value>. <variable> can be either the number from
  0 to 9 (r(0) to r(9)) or any non-numerical string (%{<variable>}).
  The /noeval switch prevents the MUSH from evaluating the value.

  See also: local variables

& local @aconnect
& local @adisconnect
  Both @aconnect and @adisconnect are invoked after EVERY connect
  and disconnect, partial or full.

  Additional info passed to @aconnect/@adisconnect:

  %0 = 0 if partial, 1 if full
  %1 = port number
  %2 = time of event (in seconds, like secs())

& inlist()
& local inlist()
  inlist(<list>,<word>[,<delimiter>])

  Inlist takes a list and a word, and returns `1' if <word> is a member
  of <list>, `0' otherwise.  A word is defined as a string which has no
  interior <delimiter>s.  See LISTS

& Control Lock
& local Control Lock
  @lock/control <object> = <lock>

  By setting a control lock on <object>, anybody passing <lock> will
  control it. This is good when you want to allow another player control
  a certain object and you have a good reason why not to use zones.

  WARNING: use this with extreme care, you will never be warned about
  unsecure control locks and they could be very dangerous! Do not use
  inexact locks. Never make control locks inheritable (@set <object>|
  control=!no_inherit) unless you know what you are doing!

  See also: @lock, local @set, CONTROL

& Receieve Lock
& local Receive Lock
  @lock/receive <object> = <lock>

  You can restrict what can be give to <object> by setting a receive
  lock on it. Receive lock works in conjuction with ENTER_OK flag.

  See also: @lock, give

& local help
  help [<topic>]

  You can abbreviate <topic> by:
  1. omitting one or more characters at the end
  2. shortening one or more words (words are separated by spaces)
  3. omitting one or more characters before a dash or a digit
     (within a word)
  4. any combination of 1., 2., and 3.

  Examples:
    help subs             for SUBSTITUTIONS
    help be kill          for BEING KILLED
    help at-own           for ATTRIBUTE-OWNERSHIP
    help subs2            for SUBSTITUTIONS2

  See also: help help

& @vdolist
& local @vdolist
  @vdolist[/notify] <variable>/<list> = <action>
  
  @vdolist executes the <action> for each element in <list>. If <list> is a
  function, it will be evaluated to obtain the necessary list to use. It
  may be any space-separated list of strings, which can be object numbers,
  attributes, or arbitary words.
  
  <action> is a command or list of commands enclosed in braces { }
  and is performed once for every item in <list>.
  
  <variable> is the name of a variable which is set to the corresponding
  item from <list> for every iteration. The position of that item in the list
  is available as %{@<variable>}.
 
  If the /notify switch is used, a "@notify me" is queued after all the
  list commands. This is useful for object synchronization with semaphores.
   
  Example: @vdolist obj/[lcon(here)] = "[name(%{obj})]
    would cause you to say the name of all objects in the room.

  See also: local variables, @dolist

& viter()
& local viter()
  viter(<variable>,<list>,<pattern>[,<delimiter>[,<output separator>]])
  
  Viter() evaluates <pattern> for each item in <list> and returns the
  results concatenated.
  
  <list> is a space-separated list of words, and <pattern> is what will
  be "mapped" onto each element of the list.

  <variable> is the name of a variable which is set to the corresponding
  item from <list> for every iteration. The position of that item in the list
  is available as %{@<variable>}.
  
  The list may be <delimiter>-separated.

  By default, the return list will be space-separated. However,
  by including the output separator (which requires explicitly
  including the delimiter), you can have it separated by any string.

  See also: local variables, iter()

& local if()
  if() is a standard function in PennMUSH 1.7

  WARNING: the semantics has changed, Penn if() tests interprets
  <condition> as a boolean value unlike old Bel if() which interpreted
  it as a string and compared it with "1".

  If your code relies on the old (broken) behaviour, use switch().
  Example: if(x,y) --> switch(x,1,y)

& local Page Lock
  In BeleriandMUSH, there is a slight difference between setting
  a page-lock and HAVEN flag:

  When P1 pages P2 and P1 is HAVEN, P2 gets P1's HAVEN (or AWAY if P1
  is DARK) info and the message is lost.

  When P1 pages P2 and fails to pass P2's page-lock, P1 gets P2's HAVEN
  (or AWAY) info but the page IS DELIVERED to P2, being prefixed with
  'BLOCKED PAGE:'. This is useful for busy players who do not want to be
  disturbed but still want to be able to react to the pages from other
  players.

& @chown/preserve
& local @chown/preserve
  @chown/preserve <object> = <player>
  
  Changes the ownership of <object> to <player>. The command behaves
  exactly like @chown (without the switch) but this one does not modify
  anything else but <object> owner. <object>'s flags, powers, and zone
  are preserved and <object> is not halted.

  Being somewhat dangerous, this command is restricted to wizards.

& local special attributes

  TITLE
  SPECIES
  CULTURE
  TRAINING
  STATS
  HAND
  HP
  EQUIP
  MONEY
  LANGUAGES

& local Control
CONTROL

  Does <enactor> control <victim>?

  0) ALLOW control when <enactor> and <victim> are the same object
  1) DENY control when <victim> is #1
  2) ALLOW control when <enactor> is Wizard
  3) DENY control when <victim> is Wizard, or <victim> is Royalty
     but <enactor> is not Royalty
  4) ALLOW control when <enactor> is a player and owns <victim>
  5) ALLOW control when <enactor> and <victim> have the same owner,
     and <enactor> is Inherit
  6) DENY control when <victim> is a player or Inherit
  7) ALLOW control when <enactor> and <victim> have the same owner,
     <enactor> has no Control Lock and <enactor> is not zoned or its
     zone is the same as <victim>'s zone
  8) ALLOW control when <victim> is zoned and <enactor> passes the
     Zone Lock of <victim>'s zone
  9) ALLOW control when <victim>'s owner is a Zone Master
     and <enactor> passes its Zone Lock
  10) ALLOW control when <victim> has a Control Lock
     and <enactor> passes it
  11) DENY control

& CHAT
  CHAT SYSTEM

  The MUSH has a built-in chat system with many different channels.
  These channels vary from MUSH to MUSH; ask at your local site or
  use @channel/list to see which ones are available.

  You can talk to many people on the MUSH via the chat system, without
  needing to be in the same room as them. Use the "@channel" command
  to join, leave, or check who is on a channel, and use the "@chat"
  or "+" command to communicate.

  If you examine yourself, you will see a list of channels that you are
  currently listening to. Some channels are restricted to wizards or
  administrators only. See the following help topics for details:
    @chat, @channel, @cemit, @clock, cwho()

& +
& @chat
  @chat <channel> = <message>
  +<channel> <message>

  This tells everyone on <channel> your <message>. You can prepend
  <message> with ':' or ';' to pose instead of talk. This command can
  also be formatted:  +<channel> <message>
  You do not need to type the complete name of the channel, only as
  many letters as needed to make it distinct from another channel.

  Note: if you use the '+' form of this command, and you do not
  use the name of a known channel, your command will be processed
  as normal, preventing user-defined commands like "+last" from
  being clobbered by the chat system.

& @cemit
  @cemit <channel>=<message>

  This command allows <message> to be directly broadcasted
  to the players on <channel>. No channel-prefix is prepended. This
  command is intended for use in writing extended chat systems.
  The command can be used only by admin and those with the CEMIT power.

& @channel
  @channel/list [<channel-prefix>]
  @channel/what [<channel-prefix>]
  @channel/on <channel>[=<player>]
  @channel/off <channel>[=<player>]

  The basic form of this command allows you to see the available
  channels, and join or leave a channel. You do not need to type the
  complete name of the channel, only as many letters as needed to make
  it distinct from other channels.

  Wizards may add and remove other players from channels by providing
  a player name as a second argument.

  Some channels may be restricted in who can join them and/or speak
  on them. If the Extended Chat System is enabled, @channel/list will
  show you the channel's name, number of users, number of message
  since last restart, access information, and your status. See
  "help channel-list" for an explanation of how to read the listing.
  @channel/what will show you the channel's name, access information,
  and a description of the channel's purpose.

  More details are provided in "help @channel2".
& @channel2
  @channel/who <channel>
  @channel/hide <channel> = <yes|no>
  @channel/title <channel> = <string>

  The @channel/who command shows you who is currently on a channel,
  if you are permitted to see it.

  Some channels allow their users to hide from the @channel/who list.
  If you're on such a channel and are permitted to hide, you can
  use @channel/hide <channel>=yes to hide yourself, and
  @channel/hide <channel>=no to reappear.

  @channel/title lets you set a title to appear before your name
  when you speak on the channel. If you leave the channel, your
  title is cleared; use @channel/gag instead (see help @channel3).

  See "help @channel3" for more.
& @channel3
  @channel/mute <channel> = <yes|no>
  @channel/gag <channel> = <yes|no>

  Some channels broadcast messages when players connect or disconnect
  from the MUSH. If you're on such a channel and don't want to hear
  those messages, use @channel/mute <channel>=yes. To resume hearing
  the messages, use @channel/mute <channel>=no.

  If you want to remain on a channel but not receive any messages
  on the channel, use @channel/gag <channel>=yes. To resume hearing,
  use @channel/gag <channel>=no. If you disconnect, the channel
  will be automatically ungagged for you.

  See "help @channel4" for more.
& @channel4
  @channel/add <channel> [= <access>]
  @channel/delete <channel>
  @channel/desc <channel> = <desc>
  @channel/rename <channel> = <new name>

  The "add" switch creates a new channel. On some MUSHes, any player
  can create a new channel, though there will be a cost associated
  with creation (see @config/costs). The possible access specifications
  are "player" (players may use the channel), "object" (objects may
  use the channel), "admin" (you must be royalty to use the channel),
  "wizard" (you must be a wizard to use the channel), "quiet" (the
  channel will not broadcast connection messages), and "hide_ok"
  (users can hide from the who list). Combinations are allowed.
  If none are given, "player" is used as the default.

  @channel/delete allows a Wizard or the channel's owner to
  delete the channel.
  @channel/desc sets the channel's description, shown on @channel/what.
  Descriptions are limited to 256 characters.
  @channel/rename is used to rename a channel.

  See "help @channel5" for more. See also "help @clock".
& @channel5
  @channel/priv <channel> = <new priv level>
  @channel/quiet <channel> = <yes | no>
  @channel/wipe <channel>
  @channel/decompile <channel>
  @channel/chown <channel> = <new owner>

  The "priv" switch changes the channel's access privileges.
  The "quiet" switch turns the quiet status of a channel on and off.
  The "wipe" switch clears a channel of players without deleting it.

  The "decompile" and "chown" switches can only be used by Wizards.
  @channel/decompile produces a decompile of matching channels.
  @channel/chown allows a Wizard to change the owner of a channel.

& channel-list
Here's the legend for reading the @channel/list output:

Channel Name               Num Users Num Msgs  Access Locks   Status
Sample                             1        0 [DPOWQH jsmvh*] [On  QH]
                                               |||||| ||||||   |   ||
Channel is DISABLED----------------------------/||||| ||||||   |   ||
Channel allows PLAYERS--------------------------/|||| ||||||   |   ||
Channel allows OBJECTS---------------------------/||| ||||||   |   ||
Channel is Wizard-only (W) or Admin-only (A)------/|| ||||||   |   ||
Channel is QUIET-----------------------------------/| ||||||   |   ||
Channel is HIDE_OK----------------------------------/ ||||||   |   ||
Channel has @clock/join set---------------------------||||||   |   ||
Channel has @clock/speak set---------------------------/||||   |   ||
Channel has @clock/mod set------------------------------/|||   |   ||
Channel has @clock/see set-------------------------------/||   |   ||
Channel has @clock/hide set-------------------------------/|   |   ||
Player is the owner of the channel-------------------------/   |   ||
Player is currently on/off the channel-------------------------/   ||
If on, player has the channel muted--------------------------------/|
If on, player is hiding on the channel------------------------------/

& @clock
  @clock/join <channel> [= <key>]
  @clock/speak <channel> [= <key>]
  @clock/see <channel> [= <key>]
  @clock/hide <channel> [= <key>]
  @clock/mod <channel> [= <key>]

  The @clock command modifies the a lock on a chat channel if the
  extended chat system is in use. If no key is specified, the
  lock is unlocked. Evaluation locks will not work with @clock. 
  See help @clock2 for information on using indirect locks.

  The "join" lock restricts who can join the channel.
  The "speak" lock restricts who can speak to the channel.
  The "see" lock restricts who can see the channel on @channel/list
  The "hide" lock restricts @channel/hide if the channel is hide_ok.
  The "mod" lock restricts who can modify the channel. If you pass the
  mod lock on the channel, you can do anything short of deleting it.

  When new channels are added, the mod lock is set to the creator/owner,
  and all other locks are unlocked.

  See help @clock2 for how to use indirect locks to lock a channel to
  anything.

& @clock2
If user-defined locks are available, you can use indirect @clocks
to lock a channel to a lock of any type (including evaluation locks)
on a VISUAL object. This channel can only be joined by an UNFINDABLE player:

  >@clock/join unfindchannel=@#10
  >@lock/user:ChanJoinLock #10=isunfind/1
  >&isunfind #10=[hasflag(%0,unfindable)]
  >@set #10 = VISUAL

@clock                  Corresponding user: lock for object
join                    ChanJoinLock
speak                   ChanSpeakLock
see                     ChanSeeLock
hide                    ChanHideLock
mod                     ChanModLock

& COMMANDS
Help is available for the following MUSH commands:
 
  ahelp          anews          brief          DOING          drop
  examine        enter          events         follow         get            
  give           go             index          kill           leave          
  LOGOUT         look           move           news           page           
  pose           QUIT           read           rpage          rules          
  RWHO           say            score          slay           take  
  think          unfollow       use            whisper        WHO           
  "              :              ;              +
 
  In addition to these, there are several types of '@' commands. @-commands 
  are usually commands which have permanent effects on the MUSH (such as
  creating a new object). Here are the help topics on @-commands:
 
  @-ATTRIBUTES   @-BUILDING     @-GENERAL      @-WIZARD
 
& @-ATTRIBUTES
These '@' commands set standard attributes on objects:
  
  @aahear        @aclone        @aconnect      @adeath        @adescribe    
  @adisconnect   @aefail        @aenter        @afailure      @aidescribe   
  @afollow       @ahear         @aleave        @alfail        @amhear       
  @amove         @apayment      @asuccess      @atport        @ause         
  @away          @charges       @cost          @conformat     @death
  @describe      @drop          @ealias        @efail         @enter
  @exitformat    @failure       @filter        @follow        @haven
  @idescribe     @idle          @infilter      @inprefix      @lalias
  @leave         @lfail         @listen        @move          @odeath
  @odescribe     @oidescribe    @odrop         @oefail        @oenter
  @ofailure      @ofollow       @oleave        @olfail        @omove
  @opayment      @osuccess      @otport        @ouse          @oxenter
  @oxleave       @oxtport       @payment       @prefix        @runout
  @sex           @startup       @success       @tport         @use          

See also: ATTRIBUTES, NON-STANDARD ATTRIBUTES
  
& @-BUILDING
These '@' commands are building-related (they create or modify objects):
 
  @atrlock       @atrchown      @chown         @chzone        @clone         
  @cpattr        @create        @destroy       @dig           @elock         
  @eunlock       @firstexit     @link          @lock          @mvattr        
  @name          @nuke          @open          @parent        @recycle       
  @set           @undestroy     @ulock         @unlink        @unlock        
  @uunlock       @wipe
  
& @-GENERAL
These '@' commands are general utility and programming commands:

  @@             @alias         @channel       @chat          @cemit
  @command       @config        @decompile     @doing         @dolist
  @drain         @edit          @emit          @entrances     @find       
  @force         @function      @gedit         @grep          @halt
  @lemit         @listmotd      @mail          @map           @notify
  @oemit         @password      @pemit         @ps            @remit         
  @restart       @rwall         @rwallemit     @rwallpose     @scan          
  @search        @select        @stats         @sweep         @switch        
  @teleport      @trigger       @verb          @version       @wait          
  @whereis       @zemit

& @-WIZARD
These '@' commands are only usable by wizards or privileged players:
 
  @allhalt       @allquota      @boot          @chownall      @chzoneall
  @comment       @dbck          @disable       @dump          @enable
  @fixdb         @hide          @kick          @log           @motd
  @newpassword   @pcreate       @poll          @poor          @power
  @purge         @quota         @readcache     @rejectmotd    @shutdown
  @sitelock      @squota        @toad          @uptime        @wall
  @wallemit      @wallpose      @wizemit       @wizmotd       @wizpose
  @wizwall       cd             ch
 
& @@
 
  The "@@" command is a special kind of command; it signals the start
  of a comment. The comment lasts until a semi-colon is found, just
  like other MUSH programming statements terminate with a semi-colon.
  It cannot be put into the middle of a statement, like
  @va me = $testing:@emit Test. @@ Just a test @@; @vb me=Testing.
  That will result in the object emitting "Test. @@ Just a test. @@"
  The correct usage is to make the comment a statement by itself:
  @va me = $testing:@emit Test.; @@ Just a test @@; @vb me=Testing.
 
  It is not necessary to use a closing '@@', but doing so makes the
  comment stand out much more clearly. A space between the first
  '@@' and the word following it is not necessary.
& @aahear
  @aahear <object> = <action list>

  An aahear on an object is activated whenever the object's listen pattern 
  is matched by anything done/said by either anything else in the room OR 
  the object itself. In contrast, an ahear on an object cannot be activated 
  by anything the object itself does.

See also: @listen, @ahear, @amhear, LISTENING
& @aclone
  @aclone <object> = <action list>

  Sets the actions to be taken whenever <object> is @cloned. This command 
  can be useful for notifying the owner of a vending machine or parent 
  object when someone uses the machine.

  Please note that there is no @oclone, and that @clone is always a
  command, not an attribute.

See also: @clone, @create, ACTION LISTS
& @aconnect
  @aconnect <object> = <action list>

  Sets the actions to be taken by a player right after connecting to the
  game.  This attribute is only meaningful for players, and will never be
  automatically triggered on other object types.

  Example: @aconnect me = :stretches luxuriously, as if waking from a nap.

  Note that long and spammy @aconnect messages, whether in your room or
  on a channel, are frequently found annoying by other players.

  It is also possible to check the zone object/objects in the zone parent
  room, as well as objects in the master room, for an @aconnect. If one is
  found, it will be executed when a player connects in that zone (or, in
  the case of the master room, anywhere).

See also: @adisconnect, ACTION LISTS
& @adeath
  @adeath <object> = <action list>

  Sets the actions to be taken after <object> is killed. 
 
See also: @odeath, @death, kill, BEING KILLED, ACTION LISTS
& @adescribe
  @adescribe <object> = <action list>
  
  Sets the actions to be taken when  <object> is looked at. 
  A common use of this command is:

    @adesc me=think %N just looked at you.

  which will inform you whenever someone looks at you. %N will be 
  replaced by the name of the person who looked. While it is possible to
  set a message to be broadcasted to everyone in the area when someone
  looks at you, this is strongly discouraged, as many people find it 
  annoying.

See also: @describe, @aidescribe, look, SUBSTITUTION, ACTION LISTS
& @adestroy
  @adestroy <object> = <action list>

  Sets the actions to be taken by the object when it is destroyed
  (via @rec or @nuke). This can only be set by a Wizard.
  If @adestroy doesn't work, try &adestroy. :)
& @adisconnect
  @adisconnect <object> = <action list>

  Sets the actions to be taken by a player right after disconnecting from
  the game. This attribute is only meaningful for players, and will never 
  be automatically triggered on other object types.

  Example: @adisconnect me = home

  It is also possible to check the zone object/objects in the zone parent
  room, as well as objects in the master room, for an @adisconnect. If one is
  found, it will be executed when a player disconnects in that zone (or,
  in the case of the master room, anywhere).

See also: @aconnect, ACTION LISTS
& @adrop
  @adrop <object> = <action list>

  Sets the actions to be taken when <object> is dropped. 

See also: @odrop, @drop, drop, ACTION LISTS
& @aefail
  @aefail <object> = <action list>

  Sets the actions to be taken by the object when someone fails to enter
  it.

See also: enter, FAILURE, ACTION LISTS
& @aenter
  @aenter <object> = <action list>

  Sets the actions taken by the object whenever someone enters it.

See also: @enter, @oenter, enter, ACTION LISTS
& @afailure
  @afailure <object> = <action list>

  Sets the actions to be taken on failure to pass the @lock on an
  object. For players and things, this means failure to pick them up
  with get/take. For exits, this means failure to go through an exit.
  
  May be abbreviated @afail. 

See also: @fail, @ofail, get, EXITS, @lock, ACTION LISTS
& @afollow
  @afollow <object> = <action list>

  Sets the actions to be taken after someone or something begins 
  following the object. 

See also: follow, unfollow, followers(), @follow, @ofollow, ACTION LISTS
& @ahear
  @ahear <object> = <actions>

  Sets the actions to be taken after the object's @listen is matched. 
  Note that @ahear ignores any messages that the object itself creates, 
  so it can only be triggered by other things. If you want the object to
  be able to trigger itself, try using @amhear or @aahear.
  
See also: @aahear, @amhear, @listen, ACTION LISTS, LISTENING
& @aleave
  @aleave <object> = <action list>

  Sets the actions to be taken whenever someone leaves the object.

See also: leave, @leave, @oleave, ACTION LISTS
& @alfail
  @alfail <object> = <action list>

  Sets the actions to be taken whenever someone tries to leave the 
  object and fails (because the object is set NO_LEAVE or because
  the person fails the @lock/leave on the object). 

See also: leave, @lfail, @olfail, ACTION LISTS
& @alias
  @alias <player>=<alias>
 
  @alias is a special attribute. When a player sets an @alias, he is
  effectively giving himself a secondary name; he can be paged by his
  @alias, and matched with *<alias>, and all other game functions which
  look up player names will also accept the alias. The attribute is
  visible to all players.
  
  Aliases cannot be longer than the limit allowed for player names, 
  cannot contain spaces, and must be unique -- no other player may
  have the same alias or name as any other player's alias or name.
& @allhalt
  @allhalt

  This command halts all objects in the game in an effort to free up 
  the queue. Wizard-only command.
  
  This command is equivalent to "@halt/all".

See also: QUEUE, @ps
& @allquota
  @allquota[/quiet] [<limit>]

  This is a God level command that is only available if the quota
  system is being used.  It displays the current max and owned objects
  of every player (unless the /quiet switch is used) and resets their 
  quota left to the new limit minus the current number owned if a limit 
  is given.
& @amhear
  @amhear <object> = <action list>

  Sets the actions to be taken whenever the @listen on the object is
  matched by something that the object itself does. It will not react
  if anyone else in the area does anything that matches the @listen
  pattern. If you want other objects to be able to set off the action
  list, try using @ahear or @aahear.

See also: @listen, @ahear, @aahear, LISTENING, ACTION LISTS
& @amove
  @amove <object> = <action list>

  This is the action to be taken whenever an object moves.

See also: @move, @omove, ACTION LISTS, go
& @apayment
  @apayment <object> = <action list>

  Sets the actions to be taken after a player gives an object some
  amount of pennies. 

See also: give, @pay, @opay, @cost, MONEY, ACTION LISTS
& @atport
  @atport <object>=<action list>

  Sets the list of actions that <object> will perform when it is
  teleported. These actions are done after <object> has arrived
  in its new location.

See also: @tel, ACTION LISTS
& @atrchown
  @atrchown <object>/<attribute> = <new_owner>.
  Like @chown except it changes the control of an attribute from one person
  to another.. You may only @atrchown attributes that you currently own.

See also: @atrlock, ATTRIBUTES, NON-STANDARD ATTRIBUTES
& @atrlock
  @atrlock <object>/<attribute> = [on|off].
  If 'on' is specified, it 'locks' the specified attribute on the object
  if it is unlocked already.  If the attribute is unlocked, and owned by
  someone other than you, you will gain ownership of it.  If an attribute
  is unlocked, then anyone who controls the object or the person who
  controls the attribute may change it.  Wizards may lock/unlock anyones
  attributes (but will not transfer ownership).  If you specify 'off' it
  will unlock a locked attribute. Specifying neither will return the
  current value of the lock.

See also: @atrchown, ATTRIBUTES, NON-STANDARD ATTRIBUTES
& @asuccess
  @asuccess <object> = <action list>

  Sets the actions to be taken when the @lock of an object is passed.
  For things/players, this means picking them up. For exits, this means
  going through them. 

See also: @success, @osuccess, get, @lock, EXITS, ACTION LISTS
& @attribute
  @attribute <attrib>
  @attribute/access[/retroactive] <attrib> = <permission list>
  @attribute/delete <attrib>
  @attribute/rename <attrib> = <new name>

  @attribute is a wizard-only command which modify's the MUSH's
  table of standard attributes (use @list/attribs to list them).
  A standard attribute is one that can be set with @<attrib> instead
  of &<attrib>, and which, when set, has a predefined set of
  initial permissions.

  *** Unlike TinyMUSH, changes to the PennMUSH attribute table
  *** are not saved across shutdowns. Use these commands from
  *** God's @startup to insure they are run at each startup.

  Used without switches, @attribute shows info about a standard attrib.

  @attribute/access adds a new standard attribute into the table,
  associating it with the given space-separated list of permissions.
  See 'help @set' for possible permissions.
  If the /retroactive switch is added, the permissions are applied
  to all objects in the database which have the attribute set already.

  @attribute/delete removes a standard attribute from the table.
  @attribute/rename renames a standard attribute. 
& @ause
  @ause <object> = <action list>

  Sets the actions to be taken when an object is successfully "used".
  
See also: use, @use, ACTION LISTS
& @away
  @away <player> = <message>

  This message is sent to a player who tries to page you when you are
  not connected, if it evaluates to something non-null.

  Example: @away me=I'm not here, please send me @mail instead.

& @boot
  @boot <player>
  @boot/port <descriptor number>
  @boot/me

  Disconnects the player from the game. 

  The /port switch takes a descriptor number instead (the "Port" number
  in WHO for wizards).

  The /me switch boots any single descriptor for the same player which
  has been idle for at least 1 minute. Players can use this command
  to terminate hung connections.

  Only admin and those with the "boot" power can @boot other players. 

& @charges
  @charges <object> = <integer>

  Allows you to limit the number of times an object can be "used". 
  The "charges" attribute will be decreased by one each time the
  object is used, and once it reaches zero, the object cannot be used
  anymore.

See also: use, @runout
& @chown
  @chown <object>=<player>

  Changes the ownership of <object> to <player>. You can chown things,
  rooms, or exits. To chown a thing, you have to be carrying it. For
  rooms or exits, you need to be standing in the room. If an object
  does not belong to you, you can only chown it if it is set
  CHOWN_OK.

  Examples:
    (for a room)    @chown here=me
    (for an object) @chown box=Soundwave
  
  Players can't be @chowned; they always own themselves.

See also: CHOWN_OK
& @chownall
  @chownall <player> [= <target_player>]

  Transfers ownership of all the objects that the player owns to 
  <target_player>. If the target player is not included, then all 
  the objects are chowned to the person executing the command. 
  This is a wizard-only command.

See also: @chown
& @chzone
  @chzone <object>=<zone object> 
  @chzone <object>=none

  The first form of this command changes the ZONE of <object> to
  <zone object>. This puts the object on that zone and allows anyone
  who passes the zone-lock of the zone object to make changes to the
  object. Any kind of object can be @chzoned, but exits cannot be used
  as zone objects. 

  The second form of this command resets the zone of <object> to *NOTHING*.
  Anyone can reset the zone of an object s/he owns.

  If a player is @chzoned, anything s/he makes afterwards will start out
  with that Zone, but none of the objects that s/he presently owns will
  have their Zone changed. Players can @chzone themselves to an object if
  they own it. Otherwise, only wizards can @chzone players.

(continued in help @chzone2)
& @chzone2

  To see the Zone of an object, you can use either 'brief' or 'examine'
  to examine it. The Zone is listed on the same line as the Owner of
  the object.

  Players can @chzone objects if they own both the object and the zone
  object. Wizards can @chzone objects to any zone object as long as the
  object has a zone-lock. 
  
  Whenever an object besides a player is @chzoned to a zone object, 
  the WIZARD, ROYALTY, and INHERIT flags will be reset, as will all
  @power's (for security purposes). For similar reasons, it is strongly 
  recommended that you do not @chzone admin- or wizard-owned objects to 
  any zone that less privileged players have access to.

See also: ZONES, @chzoneall
& @chzoneall
  @chzoneall <player>=<zone object>

  Changes the zone of all objects owned by <player> to <zone object>. 
  If <zone object> is "none", the zone is reset to NOTHING. Only wizards 
  may use this command.
  
See also: @chzone, ZONES
& @clone
  @clone <object or exit>
  For objects, creates an exact duplicate of it and puts it in the
  current room. For exits, it creates an exact duplicate of that
  exit, except the clone's source is the current room rather than
  whatever the original exit's source was.

  If creation times are enabled, a clone will have a different creation
  time than the object it was cloned from, but will have the same
  modification time, to make tracking revisions of code easier.

See also: @create
& @command
  @command <command>
  @command/<switch> <command>

  @command provides information about and controls the availability 
  of other commands.

  With no switches, @command shows all sorts of interesting information
  about how a command is parsed.

  Switches include:
  /disable   : Disable the <command>
  /off       : Synonym for /disable
  /enable    : Enable the <command>
  /on        : Synonym for /enable
  /quiet     : Don't make noisy output when doing one of the above
& @comment
  @comment <object> = <comment>

  This is a wizard-only command which sets a COMMENT attribute on
  <object>. The comment can only be seen by other wizards and royalty.
& @config
  @config/[<switch>]
  
  This command lists the MUSH configuration parameters, indicating what
  special things are enabled, and the cost of certain commands. If
  something doesn't work the way you expected it to, it might be wise to
  use this command and check the configuration paramters. Very spammy
  command.
  
  This command takes one of four switches:
  
  /defaults   --   Lists parameters set at compile time or startup time,
                   such as quota restrictions.
  /costs      --   Lists costs for various commands.
  /functions  --   Lists all functions.
  /commands   --   Lists all commands.
  /attribs    --   Lists all standard attributes.
  /globals    --   Lists runtime parameters, such as logging and "daytime".
& @conformat
  @conformat <object> [=<format>].

  Replaces the usual "Contents:" or "Carrying:" format when an object
  is looked at, by a player-specified contents format. This is evaluated
  as if it were a description or other similar message on the room.
  The objects that the looker would normally be able to see is passed
  as a dbref list in %0; all contents can be aquired through 'lcon(me)'.
 
  One could change the format to 'Contents: Object1 Object2 Object3'
  through '@conformat here = Contents: [iter(%0,name(##))]',
  for example. More complex things are, obviously, possible.
 
  See also: @exitformat
& @cost
  @cost <object> = <amount> 

  This sets the number of pennies that need to be given to an object to
  trigger its @pay/@opay/@apay attributes. 

  Example:
    @cost exit-machine=10
    @apay exit-machine=@open %N-exit 
    @pay exit-machine=Your exit has been created.  
 
    give exit-machine=10
    > Your exit has been created.
    (The exit will also have been opened by the machine.)

See also: give, MONEY, @pay, money()
& @cpattr
& @mvattr
  @cpattr <obj>/<attr> = <obj1>[/<attr1>] [,<obj2>/<attr2>,<obj3>/<attr3>,...]
  @mvattr <obj>/<attr> = <obj1>[/<attr1>] [,<obj2>/<attr2>,<obj3>/<attr3>,...]
  
  @cpattr copies an attribute from one object to another, or several 
  others. @mvattr does the same thing, except it also removes the original
  attribute from the original object.

  For example:
    @cpattr box/test = box/test1, cube/random, tribble/describe

  would check the object "box" for an attribute named TEST and then
  copy it to the attributes TEST1 on "box", RANDOM on the object named
  "cube", and DESCRIBE on the object named "tribble".

  If you leave out the destination attribute, the attribute is copied
  to one of the same name on the new object. For example:
    @cpattr box/test=cube
  would copy the TEST attribute from "box" to TEST on "cube".

See also: ATTRIBUTES, NON-STANDARD ATTRIBUTES
& @create
  @create <name> [=<cost>]

  Creates a thing with the specified name. Creating an object costs
  a certain amount of MUSH money, which usually defaults to 10 pennies.
  You can specify a higher cost if you wish, but not a lower one.
  The "value" of an object is equal to (cost/5)-1, and cannot be over
  100 (you can have a higher cost, but the value will be rounded down).
  This value is primarily important for SACRIFICING.

  Once you have created an object, you can use it as a PUPPET, to store
  USER-DEFINED COMMANDS, or just as a prop. Some mushes choose to limit 
  the number of objects that players can create by setting a QUOTA.
 
  See also: give, @quota, MONEY
& @dbck
  @dbck
  This is a wizard only command.  It forces the database to perform a
  series of internal cleanup and consistency checks that normally run 
  approximately every 10 minutes:

  1. For every object, make sure its location, home, next, contents,
     parent, and zone fields are valid objects.
  2. Check for disconnected rooms that aren't set FLOATING
  3. For every exit, player, or thing, make sure there is exactly one
     way to reach it from a room by following the contents fields of
     non-exits, the next fields of non-rooms, and the exits fields of
     rooms.
  4. For every thing or player, make sure that it is in the contents
     list of its location. Make sure every exit is in the exits list
     of its location.

  @dbck no longer performs an @purge. The results of @dbck are written
  to the game's error log, and not reported to the Wizard.

  Note: Doing a @dbck immediately after any use of @fixdb is strongly 
  recommended.
& @death
  @death <player> [=<message>]

  This command sets the message displayed to the killer when <player>
  is kill'ed. Typing just '@death <player>' or '@death <player>=' 
  without a message will clear the currently set message.

  Example:
   @death me=You have just slain Cyclonus!

  Note that some mushes choose to disable the KILL command, which makes
  this attribute rather pointless.

See also: kill, BEING KILLED, @odeath, @adeath
& @decompile
  @decompile[</switch>] <object>[/<attribute-pattern>]
  @decompile/tf <object>/<attrib>

  This command produces a list of the commands that you would have to
  enter in order to recreate <object>. Useful for either copying objects
  from one MUSH to another, or for making logs of important objects to
  protect against an accidental @nuke or a crash.

  You can either @decompile an entire object, or just certain parts of it.
  To @decompile just a few attributes, for example, you could type:

      @decompile <object>/<attribute name>

  for each attribute. You can also use wildcards in <attribute name> to
  @decompile a list of similarly-named attributes.

(continued in help @decompile2)
& @decompile2
  @decompile takes five switches: /db, /flags, /attribs, /tf, /player

  @decompile/db
    This command makes @decompile use the object's DBREF # instead of its
    name, which is useful for editing code off-MUSH.
  @decompile/flags
    Only the code to @create the object and set its flags is printed.
  @decompile/attribs
    Only the code to set the object's attributes is printed.
  @decompile/player
    The player's name will be printed rather than 'me', which is primarily
    useful for wizards restoring a player from another db.

(continued in help @decompile3)
& @decompile3

  @decompile/tf <object>/<attribute>

  The /tf switch is useful only for users of the popular "TinyFugue" 
  client program (available from ftp.tcp.com in the directory
  /pub/muds/Clients/tinyfugue). If you do have this program, this
  switch is invaluable for editing code online, because it will grab the 
  code to set that attribute and put it into your buffer.

  To use @dec/tf, first type this command into TinyFugue:

    /def -ag -mglob -p100 -t"FugueEdit > *" fe = /grab %-2

  (you can also put this into your .tfrc so it will automatically
  be entered every time you start TinyFugue (tf).) This command works
  just like the 'FugueEdit' object originally created by van@TinyTIM.

See also: CLIENTS, ATTRIBUTES, WILDCARDS, MUSHCODE
& @describe
  @describe <object> [=<description>]

  This command sets the description of the object, which will be seen 
  whenever something looks at the object with the command 'look <object>'.
  Every object should have a description, even if just a short one 
  describing its purpose. If the [=<description>] is left out, the desc.
  on the object will be reset to nothing. When you look at something that
  has no desc., you are told, "You see nothing special."

  @describe can be abbreviated as @desc

See also: look, @adescribe
& @destroy
& @recycle
& @nuke
& @undestroy
& @unrecycle
  @destroy[/override] <object>  OR   @recycle[/override] <object>
  @undestroy <object>           OR   @unrecycle <object>
  @nuke <object>

  NOTE: @destroy and @recycle are the same command - some MUSHes
  choose to use @recycle instead of @destroy to avoid the typo of
  '@dest obj' for '@desc obj'. Others use @destroy. @nuke is an alias
  for @dest/override.

  Recycles <object> and returns the player's investment (the cost of
  @create). You should always @destroy objects you no longer need;
  this keeps the database down to a manageable size.  When an object
  is @destroyed, it is set GOING, its queue is cleared and any
  semaphores are drained, and its ADESTROY attribute is immediately
  triggered. 

(continued in help @destroy2)
& @destroy2

  GOING objects are actually removed from the db approximately every
  10-20 minutes. Until then, you may use the @undestroy/@unrecycle
  command to abort the destruction sequence. If you @undestroy an
  object, its STARTUP attribute is triggered. If you @destroy a
  GOING object, it is purged immediately.

  Wizards may @nuke players. If the DESTROY_POSSESSION config option
  is set (see @config), destroying a player destroys all non-SAFE
  things the player owns, and @chowns SAFE things to God. If not,
  destroying a player @chowns all their objects to God.

See also: SAFE, GOING, DESTROY_OK  
& @dig
  @dig <room name> [= <exit name>;<exit alias>*,<exit name>;<exit alias>*]
  @dig/teleport
  
  This command is used to create a new room, possibly with exits linking
  it to the room you are standing in. This command normally costs 10 pennies,
  although some MUSHes may have different amounts or may restrict this 
  command to those with the builder @power.
  
  @dig/teleport will automatically @tel the digger to the new room.

  If you use the long form of this command, an exit to the new room
  from the one you are standing in and an exit back from the new room
  will both be automatically @open'ed and @link'ed. You may have as 
  many or as few exit aliases for an exit as you like, separated in the
  command by semicolons. The exit leading to the new room is separated
  from the exit leading back by a single comma.

(continued in help @dig2)
& @dig2
  Examples: 
  @dig Kitchen
    This command will create a new room named 'Kitchen'. You will be informed
    what the dbref # of this room is.

  @dig Kitchen = Kitchen <N>;n;north;kitchen;k
    This will create the room as above and also open an exit leading
    to it named "Kitchen <N>;n;north;kitchen;k". It will appear in the 
    list of Obvious exits as just "Kitchen <N>", but you will be able to
    go through it by typing any of the following: n, k, north, kitchen
    It will NOT create an exit coming back from the Kitchen room.

  @dig Kitchen = Kitchen <N>;n;north;kitchen;k,Out <S>;s;south;out;o
    This will do just the same as the above, except it will also create
    an exit named "Out <S>;s;south;out;o" coming back from the kitchen
    to whatever room you are currently in.
    
See also: @open, @link, EXITS, @create
& @doing
  @doing <message>
  @doing/header <message>

  This command sets a short message that shows up in the WHO/DOING listing
  next to your name. @doing/header <message> works exactly like @poll and
  can only be used by Wizards or those with the poll power.

See also: @poll, WHO, DOING
& @dolist
  @dolist[/notify] <list> = <action>
  
  @dolist executes the <action> for each element in <list>. If <list> is a
  function, it will be evaluated to obtain the necessary list to use. It
  may be any space-separated list of strings, which can be object numbers,
  attributes, or arbitary words.
  
  <action> is a command or list of commands enclosed in braces { }
  and is performed once for every item in <list>. The special symbol "##"
  is replaced by the corresponding item from <list>.  The special symbol
  "#@" is replaced by the position of that item in the list.
 
  If the /notify switch is used, a "@notify me" is queued after all the
  list commands. This is useful for object synchronization with semaphores.
   
  Example: @dolist [lcon(here)] = "[name(##)]
    would cause you to say the name of all objects in the room.
& @drain
  @drain <object>
  
  This command discards all commands waiting on the semaphore <object>
  and resets the semaphore to its initial state (clearing the SEMAPHORE
  attribute). The pending commands are removed from the queue without
  being executed.
  
  See also the help for: SEMAPHORES, @notify, @wait
& @drop
  @drop <object> [=<message>]. <object> can be a thing, player, exit,
  or room, specified as <name> or #<number> or 'me' or 'here'. Sets 
  the drop message for <object>. The message is displayed when a 
  player drops <object>. Without  a message argument, it clears the 
  message. 

  See also: drop, @odrop, @adrop.
& @dump
  @dump [/paranoid] [check interval]
 
  This is a wizard only command that saves a copy of the current memory
  database out to a save file.  This preempts the normal regular dumping
  that the mud performs on its own.
 
  If the /paranoid switch is used, the game performs additional consistency
  checking which corrects possible data corruption. If a check interval
  is specified, the game writes confirmation of the dump to the checkpoint
  log file every <interval> objects. If no interval is specified, it is
  taken to be the size of the databased, divided by 5.
  This switch should ONLY be used if a normal @dump is not being done
  correctly. Paranoid dumps should generally only be done by wizards with 
  access to the account on which the MUSH is running, since others will
  not have access to the checkpoint logfile.
& @ealias
  @ealias <object> = <enter alias>

  This allows a player to type the enter alias instead of "enter <object>"
  If you have a chair, you coud "@ealias chair = sit down" and then just
  type "sit down" instead of "enter chair" - using the object name is
  not necessary. Note that the enter alias is checked after normal exits.
  Like an exit, it may have a semi-colon separated list of words,
  i.e. sit down;sit;sit on chair
& @edit
& @gedit
  @edit <object>/<pattern> = <search>,<replace> 
  @edit <object>/<pattern> = $,<string to append>
  @edit <object>/<pattern> = ^,<string to prepend>

  This is useful when you don't want to have to retype those obnoxiously 
  long descriptions just to make one little change.  Instead, search and 
  replace via @edit.  
  
  <pattern> is a pattern, optionally containing wildcards, for the attribute 
  names you wish to edit. Only attributes already defined on <object> may be 
  edited. <search> and <replace> are two strings. It's also possible to use 
  "$" and "^" to signal appending and prepending text, respectively.
  
  If the text contains commas, precent signs, or similar special characters,
  it usually must be enclosed in curly braces.
  
  See also ATTRIBUTES, edit()
& @efail
  @efail <object> = <message>
  This is the message shown to the player who fails to enter the object.
& @elock
  @elock <object> = <key>
  Enter-locks an object, restricting who is allowed to enter it. Special
  lock types are supported (see "help @lock" for details). Only objects
  which are ENTER_OK may be entered, regardless of the key.
 
  The enter lock of a room is its Teleport Lock. Only people who pass
  the room's teleport lock, are wizards or royalty, or control the room,
  will be allowed to @teleport into the room. (Note that this is different
  from NO_TEL, which prevents people from teleporting out of a room).
  The teleport lock is evaluated even if the room is JUMP_OK - in other 
  words, if you are trying to teleport into a room you don't control, the 
  room must be JUMP_OK, and you must pass the teleport lock.
 
  Note that the enter lock of an object or room being used as a Zone
  Master Object determines control of that zone. Please note that if
  you're using a room as a ZMO (i.e. as a zone master room), only the
  controllers of that zone will be able to teleport into that room
  (which is a good thing for security).
& \\
& @emit
  @emit[/room] <message>
  @emit[/noeval] <message>
  \\<message>

  This send message to every person in the current room. However, no
  identifier marking it as being sent by you is shown.  For example,
  @emit foo would show 'foo' to every object in the room. 

  The /room switch makes this command equivalent to "@lemit". 
  The /noeval switch prevents the MUSH from evaluating the message.

  @emit can be abbreviated "\\"

  See also @pemit, @remit, @oemit, @lemit, NOSPOOF and SPOOFING.
& @enable
& @disable
  @enable <parameter>
  @disable <parameter>
  
  These are wizard commands that allow certain parameters of the game to
  be changed at runtime. The values of these parameters are listed by the
  "@config/globals" command. Parameters and their effects are as follows:
  
  logins       --  When logins are disabled, only wizards and royalty may
                   log into the game. Mortals attempting to log in will be
                   given the down text, as well as the @rejectmotd.
  guests       --  When guests are disabled, players can not log in as
                   guest characters.
  daytime      --  When daytime is enabled, computationally expensive commands
                   cannot be run. @find, @search, @entrances, LSEARCH(), and 
                   @dump cannot be used, although the automatic database save
                   routines will continue to run.
  command_log  --  When this is enabled, all commands are logged.
  huh_log      --  When this is enabled, all commands that produce a "Huh?"
                   are logged.
  force_log    --  When this is enabled, @forces done by wizards are logged.
  wall_log     --  When this is enabled, @walls are logged.
& @enter
  @enter <object> = <message>

  This sets the message that is displayed to anyone entering the 
  object. Works just as @success on an exit does.

  Example:
    @enter Chair = You sit down on the comfy chair.
    enter chair
    > You sit down on the comfy chair.

See also: @oenter, @oxenter, enter
& @entrances
  @entrances[/<switch>] <object> [=<begin>,<end>]
  
  This command will show you all exits linked to the object you use the
  command on, as well as where the exit originates.  This command is
  computationally expensive and costs the same as @find. You can limit
  the range of the dbrefs searched by specifying <begin> and <end>.
  
  It takes four switches:
  
  /exits       show only exits linked to <object>
  /things      show only things which have their homes in <object>
  /players     show only players who have their homes in <object>
  /rooms       show only rooms which have a drop-to of <object>
& @eunlock
  @eunlock <object>

  Enter-unlocks an object, in a fashion similar to @unlock. For anyone
  to be able to enter an object, it must be both @eunlocked and ENTER_OK.
  You can also simply type 
    @lock/enter <object> 
  to unlock an object.

See also: @lock, locktypes, @elock
& @exitformat
  @exitformat <object> [=<format>].

  Replaces the usual "Obvious Exits:" format when an object is looked
  at, by a player-specified exits format. This is evaluated as if it
  were a description or similar message on the room.  The objects that
  the looker would normally be able to see is passed as a dbref list
  in %0; all exits can be aquired through 'lexits(me)'.
 
  One could change the format to 'Exits: Exit1 Exit2 Exit3' through
  '@exitformat here = Exits: [iter(%0,name(##))]', for example.

  See also: TRANSPARENT, @conformat

& @failure
  @failure <object> [=<message>]

  Sets the message shown to someone who fails to pass the object's
  basic @lock. For a thing or player, this would be when someone tries
  to pick the object up and fails. For an exit, this occurs when someone
  tries to go through the exit and fails.

  If [=<message>] is omitted, any currently set message will be reset.

  Can be abbreviated @fail. It is recommended that you put an @fail message
  on any locked object.

See also: FAILURE, @ofailure, @afailure
& @firstexit
  @firstexit <name of exit>

  Makes the named exit the first in the listing of Obvious Exits in a
  room. You must control the room in order to use this command.

See also: EXITS, @open, @link
& @fixdb
  @fixdb/<switch> <object>=<value>

  This command directly sets a field in <object> to <value>.  <value> 
  must be an integer.  Note that NO ERROR CHECKING is performed, so if 
  you mess up the setting of <value>, you may very well crash or hang 
  the server with your database corruption. This command is restricted 
  to wizards only and should NEVER be used unless you know PRECISELY what 
  you are doing.

  NOTE: Doing a @dbck immediately after any use of the @fixdb command
  is strongly recommended.
  
  - Switch -     - Players/things -       - Rooms -        - Exits -
  location       container object         drop-to          destination
  contents       first object carried     first object     nothing
  exits          home                     first exit       source
  next           pointer to next in contents/exits chain
& @filter
  @filter <object> = <pattern 1>, <pattern 2>, <pattern 3>, ...
 
  This attribute is meant to be used in conjunction with the AUDIBLE
  flag. The @filter of an object is a comma-separated list of wildcard
  patterns (like @switch patterns). Any messages which match one of the 
  patterns is suppressed and not propagated through the AUDIBLE object
  with the @filter set. (Note: @filter on rooms has no effect!)
 
  Please note that you should NOT use curly brackets {} in an @filter
  pattern. Also note that AUDIBLE exits will not take effect unless the
  room they lead from is also set AUDIBLE.

  See 'help @filter2' for examples.
& @filter2
 
Example: 
  An exit leads from the room where Wizard is standing to another
  room where the puppet "Wiztoy" is standing. The exit is set AUDIBLE.
  
    @prefix exit=From inside,
    :tests.
    > Wizard tests.
    Wiztoy> From inside, Wizard tests.
    @filter exit=* jumps.,* tests.
    :jumps.
    > Wizard jumps.
    :tests.
    > Wizard tests.
  (Wiztoy doesn't hear anything, because it is filtered out.)
    :tests again.
    > Wizard tests again.
    Wiztoy> From inside, Wizard tests again.

See also: AUDIBLE, @infilter, LISTENING
& @find
  @find [<name>] [=<begin>,<end>]

  Displays the name and number of every room, thing, or
  player that you control whose name matches <name>. Because the
  command is computationally expensive, this costs 100 pennies.
  You can limit the range of the @find by specifying <begin> and
  <end>, where these are the first and last dbrefs to examine.

  Some MUSHes may choose to restrict @find only to Royalty. Even if 
  not, it is recommended that you use @search instead, as it can be
  limited more effectively.

See also: @search
& @follow
  @follow <object> = <message>

  Sets the message shown to someone after they begin following 
  the object (using the 'follow' command). 

See also: follow, unfollow, followers(), @ofollow, @afollow
& @force
  @force <object>=<command>

  This forces the object to perform the command just as if it had
  typed it in itself. Only wizards may @force other players. You
  can @force any object which you own or control. Useful for
  manipulating puppets. If <object> is not in the same room as you,
  you can instead use the object's dbref number. 

  @force can be shortened to @fo or @for, or abbreviated as:
    <dbref #> <command>

(continued in help @force2)
& @force2

Example:
  @create Lackey
  > Created: Object #103 
  @fo Lackey = go east
  > Lackey goes east.
  > Lackey has left.
  @fo #103 = page Cyclonus = Hi there!
  > Lackey pages: Hi there!
  #103 page Cyclonus = Whee
  > Lackey pages: Whee

See also: PUPPET, DBREF 
& @function
  @function [<function name>=<object>,<attribute>]
  @function/delete <function name>
  
  When used without any arguments, this command lists all global
  user-defined functions. For wizards and others with the Functions
  power, it also lists the dbref number and attribute corresponding
  to the listed functions.
  
  Otherwise, this command defines a global function with the name
  <function name>, which evaluates to <attribute> on <object>.
  <object> can be anything that the player using the @function command
  controls. <function name> must be 30 characters or less.
  @function/delete removes a user-defined function.

  A function defined using @function works just like any of the normal
  MUSH functions, from the user's perspective. The functions are
  executed by the object, with its powers. 
 
(continued in help @function2)
& @function2
  Functions defined via @function should follow the format used by
  UFUN() - %0 is the first argument passed, %1 is the second argument
  passed, and so forth.
  
  Example:
  
    > &WORD_CONCAT #10=%0 %1
    > say "[ufun(#10/word_concat,foo,bar)]
    You say, "foo bar"
  
    > @function word_concat = #10, word_concat
    > say "[word_concat(foo,bar)]
    You say, "foo bar"
 
(continued in help @function3)
& @function3
  Global user-defined functions are not automatically loaded when the
  game is restarted. In order to avoid objects which attempt to use
  functions that have not been loaded, a @startup containing @function
  commands should be set on a wizard object with as low a dbref number 
  as possible; object #1 (generally God) is suggested for this use.

  For example, if you have one object that stores all your global
  functions, you could set the following command (the object is #100
  in the example):

    @startup #1=@dol lattr(#100)=@function ##=#100,##

  And then store each function as an attribute of the same name on 
  object #100.

See also: FUNCTIONS, global functions, @startup
& @grep
  @grep[/<switch>] <object>[/<attrs>]=<pattern>
  
  This command searches attributes in an object for <pattern>. It takes
  four switches:
  @grep/list
    Lists the names of the attributes on the object containing <pattern>.
  @grep/ilist
    Same as above, but is case-insensitive when trying to match <pattern>.
  @grep/print
    Prints out all the attributes, highlighting the pattern itself in 
    boldface. Requires being set ANSI.
  @grep/iprint
    Same as above, case-insensitive.

  When used without a switch, @grep defaults to @grep/list.
(continued in help @grep2)
& @grep2

  You must be able to see attributes on <object> (i.e. you must control
  the object, it must be VISUAL, or you must be a Wizard or Royalty).
 
  <attrs> is an optional wildcard pattern specifying attributes to
  match (much like @edit). If <attrs> is not provided, all attributes
  are assumed (just as if you had provided "*").
   
  <pattern> is not treated as a wildcard pattern, so you can grep for
  patterns containing '*', '?', etc.  Also, <pattern> is NOT PARSED,
  so '[v(0)]' and the like can be searched for.
& @halt
  @halt <object> [=<new_command>] 
  @halt/all
 
  The @halt command removes all queued actions for <object>. 
  If <new command> is specified, that new command is placed
  in the queue for the object instead. If no new command is
  specified, the object is set HALT.

  If <object> is a player, it clears the queue for the player and
  and all of his objects. You can use "@halt me" to clear your own
  queue without setting yourself HALT. Only wizards can @halt 
  other players.
  
  Note that halting an object does NOT affect any objects waiting
  on it as a semaphore.

  @halt/all is a synonym for @allhalt and is a wizard-only command.

See also: HALT, QUEUE, @ps
& @haven
  @haven <player> = <message>

  This message is sent to a player whose pages you are refusing, either
  through use of the HAVEN flag or through the use of a page lock, if
  it evaluates to something non-null.

See also: HAVEN, page, @lock, @away
& @hide
  @hide[/<switch>]
  
  This command enables a royalty, wizard, or player with the Hide
  power to disappear from the WHO list for mortals. "@hide/yes" or "@hide/on"
  hides the player, "@hide/no" or "@hide/off" unhides the player.
  Hidden players are marked as "(Hidden)" in the privileged WHO listing.
 
  Hidden players also disappear from the RWHO, and mortals cannot
  use the CONN(), IDLE(), or LWHO() functions to find them.

& @idescribe
& @oidescribe
& @aidescribe
  @idescribe <object> [=<description>]
  @oidescribe <object> [=<message>]
  @aidescribe <object> [=<action list>]

  @idescribe command sets the internal description for an object, which is 
  shown to anyone who enters or looks while inside the object. Meaningless 
  for rooms and exits. May be abbreviated to @idesc.

  @oidescribe sets the message seen by others when someone looks at the 
  idesc, and @aidescribe sets the action the object will take (just as 
  with @desc, @odesc, @adesc). 

  If there is no IDESCRIBE set for an object, those who enter or look 
  inside it will see its @desc, and no o-message or action will be
  available. If you want to use @aidescribe without @idescribe, set 
  @idescribe to a blank string.

  If [=<description>] or [=<message>] omitted, the attribute will be 
  reset.
  
See also: enter, @enter, ENTER_OK, @describe, look
& @idle
  @idle <player> = <message>

  This message is sent in return to every page which successfully reaches
  you if it evaluates non-null. It is useful if you are idle for long 
  periods of time and wish to inform people where you are, or if you
  are in a meeting and cannot quickly return pages.

  Clever example: 

   @idle me=[switch(gt(idlesecs(me),120),1,I'm idle. Use @mail,)]

  Players paging me will only see the "I'm idle" message if I've been
  idea for over 2 minutes (120 seconds).
& @infilter
  @infilter <object> = <pattern 1>, <pattern 2>, <pattern 3>, ...
  
  @infilter is meant to be used on objects that have an @listen of "*"
  (ie, objects that listen to everything, which is commonly used for 
  things like chairs so that someone inside the object can hear 
  everything said/done outside it). @infilter filters out any messages
  that match one of the patterns and prevents those inside the object
  from hearing them.
 
  For an explanation of infilter patterns, see the help for "@filter".

See also: @filter, @listen, AUDIBLE, LISTENING
& @inprefix
  @inprefix <object> = <message>
  
  @inprefix is intended for use with objects with a @listen of "*".
  It prepends the <message> string to any message propagated to the
  contents of <object> from the outside. If there is no @inprefix,
  no string is prepended to the output.
  
  Example:
  
  [ First, @create Vehicle and Test (objects #103 and #104) and drop them ]
    > @inprefix Vehicle = From outside,
    Vehicle - Set.
    > enter Vehicle
    Vehicle(#103)
    > @force #104=:bounces.
    From outside, Test bounces.

See also: @prefix, @listen, @infilter
& @kick
  @kick <number>
  
  This wizard-only command forces the immediate execution of <number>
  items from the queue. Rarely useful. If your MUSH is lagging badly,
  chances are high that it stems from network problems. Check the queue
  before using this command.

See also: @ps, QUEUE
& @lalias
  @lalias <object> = <leave alias>

  Sets the leave alias(es) of an object that is ENTER_OK. Setting a leave 
  alias allows people to type the leave alias instead of the "leave"
  command in order to get out of the object. Meaningless for exits and
  rooms.

  You can set multiple leave aliases on an object by separating them with
  semi-colons.
  Example:
      @lalias chair=stand up;stand;get up;rise

See also: @ealias, leave, @leave, @lfail
& @leave
  @leave <object> = <message>
  
  Sets the message that is displayed to anyone leaving <object>. 
  
See also: leave, @lfail
& @lemit
  @lemit <message>

  Emits a message to the outermost container object. For example, if you
  are carrying a bird, and are inside a vehicle which is in room #10, and
  you force the bird to @lemit "Cheep", everyone in room #10 will hear
  "Cheep". This command is the same as "@emit/room".
& @lfail
  @lfail <object> = <message>

  This is the message shown to the player who fails to leave the object,
  either because the object is set NO_LEAVE or because the person leaving
  fails the leave-lock.

See also: leave, @leave, NO_LEAVE, locktypes
& @list
  @list/<switch>
  @list <switch>

  The @list command lists useful MUSH information.

  Switches include:
  /motd      : Alias for @listmotd, shows current messages of the day.
  /functions : Alias for @config/functions, shows all functions
  /commands : Alias for @config/commands, shows all commands
  /attribs : Alias for @config/attribs, shows all standard attribs
& @listmotd
  @listmotd

  This command lists the current MOTD (message of the day) for the MUSH.
  If used by a wizard or admin, it will also include the wizard, full, and
  down MOTDs to the user. Same as @list/motd.

See also: @list
& @link
  @link <object>=<dbref | here | home | variable>

  Links <object> to either a room or a thing. If a thing or player is
  linked, that sets the object's HOME. If a room is linked, that sets 
  the object's drop-to room, which is where objects that are dropped
  in the room will be sent to.

  Most often, @link is used to link or relink an exit to a destination 
  room. In order to link an exit to a room, you must either own or control
  the room, OR the room must be set LINK_OK. If you do not own an exit and
  you relink it, the exit will be set HALT and @chowned to you. Linking an
  exit usually costs 1 penny.
  
  If the destination of an exit is "variable", its destination is determined
  at the time of travel by the attribute DESTINATION on the exit, which is
  evaluated like a U()-function. Only Wizards may create variable exits.
 
  LINK_OK objects can also be used as semaphores, and any object
  can be @parented to them.
 
See also: EXITS, @open, @dig, DROP-TO, HOME
& @listen
  @listen <object> = <string>

  Sets the object's listen pattern to <string>, which can have wildcards.
  Whenever something the object hears matches the pattern, the object's
  ahear/amhear/aahear attribute will be triggered. In addition, anything 
  inside the object will hear it as well.

For example:
  @listen Chair = *  
    Since the wildcard (*) matches anything, anyone inside the object will
    hear anything said outside it.
  @listen Butler = * has arrived.
  @ahear Butler = :walks over to the new arrival and takes %p coat.
  > Cyclonus has arrived.
  > Butler walks over to the new arrival and takes his coat.
    In this case, the listen pattern is met whenever someone 'arrives' in
    the room, and then the object does whatever is inside its @ahear 
    attribute.

(continued in help @listen2)
& @listen2
  An object "hears" anything that another player standing in the same room
  would hear. For example, if you type in a command, the object does NOT
  hear it. If the command has a result that people in the room hear, the
  object will hear it.

For example:
  @listen Recorder = @emit *
  @ahear Recorder = :records {%0}
  @emit Whee!
  > Whee!
    In this example, the Recorder's listen-pattern is NOT matched, because
    it doesn't hear the '@emit Whee!', it only hears the 'Whee!' part, which
    doesn't match.

  @listen Recorder = Cyclonus says, "*"
  "Whee!
  > Cyclonus says, "Whee!"
  > Recorder records: Whee!

See also: LISTENING, @ahear, @amhear, @aahear
& LOCKING
& LOCKS
& @lock
  @lock[/<switch>] <object>=<key> 
  
  This command "locks" the object, specifying (by the key) who or what can
  do certain things with the object. There are many different types of locks,
  all of which are described in "help locktypes" and which are designated by
  the switch. The "basic" lock determines, for players and objects, who can
  pick them up. For exits, it determines who can go through the exit.
  All other locks can be set the same way as the basic lock.

  Whenever you "pass" the basic lock, you succeed in doing something with
  the object. This triggers the @success/@osuccess/@asuccess
  messages and actions. If you fail to pass the basic lock, you trigger
  the @failure/@ofailure/@afailure messages and actions. Other locktypes
  may also have such success/failure messages.

  You can specify <object> and <key> as either the name of an object in
  the immediate area, a DBREF number, "me", or "here". 

(continued in help @lock2)  
& @lock2
  You can lock an object in several different ways. The simplest lock is to
  lock it to one other thing:
   @lock My Toy = = me
     This locks the object "My Toy" to you and you alone. It is recommended
     that you @lock me == me in order to prevent anyone else from picking
     you up. The two = signs are NOT a typo!

  You can lock an object -against- one other object as well, using the '!' 
  symbol:
    @lock Shared Toy = !Vector Sigma
      This locks the object "Shared Toy" to everyone -except- Vector Sigma.
      Everyone except Vector will be able to pick up the object.

(continued in help @lock3)
& @lock3
  You can lock an object to something that has to be carried:
    @lock Door = +Secret Door Key
      This locks the exit "Door" to someone carrying the object "Secret Door
      Key". Anyone carrying that object will be able to go through the exit.

  You can lock an object to -either- an object or to someone carrying the
  object with:
    @lock Disneyworld Entrance = Child
      This locks the exit "Disneyworld Entrance" to either the object 
      "Child" -or- to someone carrying the object "Child". (OK, so it's
      a weird example.)
  
  You can lock an object to a specific player by using a *:
    @lock Note == *Jazz
      Only the player "Jazz" will be able to pick up the Note object.
  
(continued in help @lock4)
& @lock4
  An "owner" lock allows you to lock something to anything owned by the
  same player:
    @lock Box = $My Toy
      This locks "Box" to anything owned by the owner of "My Toy" (since
      players own themselves, that includes the owner as well).

  An "indirect" lock allows you to lock something to the same thing as
  another object (very useful in setting channel locks; see help @clock):
    @lock Second Puppet = @First Puppet
      This locks the object "Second Puppet" to whatever the object 
      "First Puppet" is locked to.

  There are also some more complex locks called attribute and evaluation
  locks. In addition, you can make complex locks (combining several types
  or reversing them).

(continued in help @lock5)
& @lock5
ATTRIBUTE LOCKS
  You can lock an object to an attribute on the person trying to pass 
  the lock (as long as the object can "see" that attribute):

    @lock <object>=<attribute>:<value>

  <value> can contain wildcards (*), greater than (>) or less than (<)
  symbols.

  For example:
    @lock Men's Room = sex:m*
      This would lock the exit "Men's Room" to anyone with a SEX attribute
      starting with the letter "m". 
    @lock A-H = name:>g
      This would lock the exit "A-H" to anyone with a NAME starting with a
      letter "less than" the letter "g".

(continued in help @lock6)
& @lock6
COMPLEX LOCKS
  You can combine or reverse locks very easily using the following 
  BOOLEAN symbols and parentheses () to group them:
    &      - "and"
    |      - "or"

  For example:
   @lock My Toy = =me | !*Chromia | +Toy Box Key
      This locks "My Toy" to me, -against- the player Chromia, or to anyone 
      carrying the object "Toy Box Key". 
   @lock My Toy = *Marissa & +Toy Box Key
      This locks "My Toy" to the player Marissa, who needs to be carrying
      the object "Toy Box Key".
   @lock My Toy= *Chromia | ( *Marissa & +Toy Box Key )
      This locks it to Chromia, OR to Marissa if she is carrying the Key.

(continued in help @lock7)
& @lock7
EVALUATION LOCKS
  An evaluation lock is set using this format:

    @lock <object>=<attribute>/<value>

  The difference between this and an attribute lock is that the <attribute>
  is taken from <object> rather than from the person trying to pass the
  lock. When someone tries, <attribute> is evaluated, and the result is 
  compared to <value>. If it matches, then the person passes the lock.

  The person trying to pass the lock is %# and <object> is %! when the
  evaluation takes place. The evaluation is done with the powers of
  <object>. If you try to do something (like [get(%#/<attribute>)]) and
  <object> doesn't have permission to do that, the person will automatically
  fail to pass the lock.

(continued in help @lock8)
& @lock8

  Example: 
    @lock Stage = ispuppet/1
    &ispuppet thing = hasflag(%#, PUPPET)
      This locks the object "Stage" to puppets only.

      Whenever someone tries to pick up the object, the attribute 
      "ispuppet" will be checked, substituting in the person's DBREF number
      for %#. 
 
      [hasflag(<dbref>, PUPPET)] will come out to 1 if the object with 
      <dbref> has the "PUPPET" flag. Otherwise, it will come out to be 0. 
      Since the value in the @lock is 1, only objects with the PUPPET flag
      will be able to pass this lock.

See also: locktypes, @clock
& locktypes
& locklist
& lock types
& lock list
  Your MUSH will almost certainly support these standard lock types:

  @lock/enter           Who can enter the player/object
  @lock/teleport        Who can teleport to the room
  @lock/use             Who can use the object
  @lock/page            Who can page the player

  Most MUSHes will also support these lock types:

  @lock/zone            Who can control objects on this zone
  @lock/parent          Who can @parent something to this object/room
  @lock/link            Who can @link something to this object/room
  @lock/mail            Who can @mail the player
  @lock/user:<name>     User-defined. No built-in function of this lock,
                        but users can test it with elock()

  See 'help locktypes2' for more
& locktypes2
  Not all of these lock types may be enabled in your MUSH. 
  When in doubt, try it out!

  @lock/speech          Who can speak/pose/emit in this room
  @lock/listen          Who can trigger my @listen/^-patterns
  @lock/leave           Who can leave this object
  @lock/drop            Who can drop this object or in this room
  @lock/give            Who can give this object
  @lock/follow          Who can follow this object

  @elock is an abbreviation for @lock/enter
  @ulock is an abbreviation for @lock/use

See also: @lock, @clock, FAILURE
& @log
  @log[/<switch>] <message>

  This wizard-only command puts <message> in a log file, tagged with
  the time and object executing the command.  The available switches
  are /check, /cmd, /conn, /err, /trace, and /wiz, specifying which
  file to log to.  /cmd is default.
& @map
  @map <list> = <function or pattern>
 
  This command takes a space-separated list of words, and performs
  pronoun/pattern substitution on each word, returning a list - 
  "mapping" the function onto each item in the list. It returns the
  list in a MAPLIST attribute, automatically set on the object executing
  the @map. The set is always performed before any actions further
  actions are executed.
  
  Brackets are generally necessary in order to make the function
  substitutions evaluate correctly.
  
  @map is an obsolete command provided for backwards compatibility;
  the ITER() or MAP() functions should probably be used instead.
 
  See "help @map2" for examples of @map.
 
& @map2
 
  Examples of @map:
    @map foobar baz blech=[strlen(##)]
      Returns "6 3 5" in MAPLIST.
    @map testing map-test=[strlen(before(##, est)]
      Returns "1 5" in MAPLIST
    @map Joe Bob Ann=I know ##.
      Returns "I know Joe. I know Bob. I know Ann." in MAPLIST
 
  >  @va Object=$test * * *:@map %0 %1 %2=[strlen(##)];
           @dolist [v(maplist)] = say ##
  Object - Set.
  >  test aaa bb c
  Object says, "3"
  Object says, "2"
  Object says, "1"
& @motd
  @motd [/<switch>] [<message>].  
 
  The default for this command (and with the /connect) switch, is a
  wizard only command that will set a temporary message that 
  will be shown to players when they connect. This MOTD is cleared
  every time the MUSH restarts.
 
  Other switches:
  /wizard : sets the message for wizards (like @wizmotd)
  /down   : sets the logins-off message (like @rejectmotd)
  /full   : sets the max-players-logged-in message
  /list   : list the MOTDs (like @listmotd, can be used by anyone)
& @move
  @move <object> = <movement message>

  This sets the message that is shown to <object> whenever it moves.
  Example:
       @move me=You moved! You are now in the room: [name(loc(me))].

See also: go, @omove, @amove
& @name
  @name <object>=<new name> [<password>]

  Changes the name of <object>, which can be a thing, player, exit,
  or room. You can refer to object by name, DBREF number, or as "me"
  or "here". For a player, it requires the player's password.

& @newpassword
  @newpassword <player> = <password>

  This wizard-only command changes <player>'s password. If <player>
  is logged in, s/he will be informed that the password was changed.
  @newpassword cannot be abbreviated.

See also: @password
& @notify
  @notify[/all] <object>[=<count>]
  
  This command notifies the semaphore <object>, running the first
  command that waited on <object> using the semaphore version of
  @wait. If <count> is specified, it notifies the semaphore that
  many times. If there are no commands, or less than <count>
  commands, pending for <object>, then subsequent @waits will not
  block until the semaphore count reaches zero again.
  
  The "/all" switch to this command notifies the semaphore until
  the semaphore count is exactly zero; all commands pending on that
  semaphore are executed immediately. <count> is ignored.

See also: SEMAPHORES, @drain, @wait
& @odeath
  @odeath <player> [=<message>]

  This sets the ODEATH attribute on the player, which contains the
  message that will be shown to others when s/he is killed. The
  @odeath message will automatically have the player's name included.

Example:
     @odeath me=falls to the ground and vanishes.
     (if I am killed, others in the room then see:)
     > Cyclonus falls to the ground and vanishes.

  If the =<message> part is omitted, the ODEATH attribute will be reset.

See also: @death, @adeath, kill
& @odescribe
  @odescribe <object> [=<message>]

  This sets the message that will be shown to others whenever anyone
  looks at <object>. The name of the person looking will be added to
  the beginning of the message. Please note that @odescs are often found
  annoying. 

  If the =<message> part is omitted, the message will be reset.

See also: look, @describe, @idescribe
& @odrop
  @odrop <object> [=<message>]

  This sets the message that will be shown to others whenever anyone drops
  <object>. The name of the person dropping the object will be added to the
  beginning of the message automatically.

  If the =<message> part is omitted, the message will be reset.

See also: drop, @drop, @adrop
& @oefail
  @oefail <object> [= <message>]

  This sets the message that will be show to others whenever anyone tries
  to enter <object> and fails, usually because they fail the enter-lock.

  If the =<message> part is omitted, the message will be reset.

See also: enter, @efail, @aefail, @lock
& @oemit
  @oemit[/noeval] [<room>/]<object> = <message>
 
  This command shows <message> to everyone in the location of <object>
  EXCEPT <object>. The object can be specified by name if in your current
  location, or by DBREF number. 
  
  If a room is specified (usually via dbref), this command shows
  <message> to everyone in <room> except for <object>. In this case,
  <object> is matched with reference to <room>. Therefore, if you
  want to send a message to everything but an object called "spy"
  in #100, you can simply use "@oemit #100/spy=Test"; you don't need
  to know the dbref of "spy".

  The /noeval switch prevents the MUSH from evaluating the message.
 
See also: @emit, @pemit, NOSPOOF and SPOOFING.
& @oenter
  @oenter <object> [= <message>]

  This sets the message that will be show to others whenever anyone
  enters the object. It will be seen by those already -inside- the
  object and will automatically add the name of the person entering
  at the beginning. If you wish to set a message to be seen by those
  -outside- the object, use @oxenter.

See also: enter, @enter, @oxenter
& @ofailure
  @ofailure <object> [=<message>]

  This sets the message that will be show to others whenever anyone
  fails to pass <object>'s basic lock. For players and things, this means
  failing to pick them up. For exits, this means failing to go through 
  the exit. It automatically prefixes the name of the player.

Example:
  @ofail Locked Door=tries to open the door, but it seems to be locked.

  If the =<message> part is omitted, the message will be reset.

See also: FAILURE, @lock, @failure, @afailure
& @ofollow
  @ofollow <object> [= <message>]

  Sets the message shown to others in the room after someone
  begins following the object (using the 'follow' command). 
  Similar to @omove or @osucc, this command prepends the name
  of the person doing the following.

  If the =<message> part is omitted, the message will be reset.

Ex: @ofollow me=falls into step behind Cyclonus.

See also: follow, unfollow, followers(), @follow, @afollow
& @oleave
  @oleave <object> [= <message>]
  
  This sets the message that will be displayed to the people inside
  <object> whenever someone leaves <object>. If you want to set a 
  message to be displayed to people outside the object, use @oxleave.
  This command automatically inserts the name of the person leaving
  at the start of the message.

  If the =<message> part is omitted, the message will be reset.

See also: leave, @leave, @aleave, @oxleave
& @olfail
  @olfail <object> [= <message>]
  
  This sets the message that will be shown to others whenever someone
  tries to leave <object> and fails (usually if the person fails the
  leave-lock, or if <object> is set NO_LEAVE). It automatically inserts
  the name of the person trying to leave at the start of the message.

  If the =<message> part is omitted, the message will be reset.

See also: leave, @lfail, @alfail, @lock
& @omove
  @omove <object> [= <message>]

  Sets the message that will be shown to others whenever <object> moves.
  It is shown in the destination room or object and automatically inserts
  the name of the <object> at the beginning. Please note that long @omoves
  are frequently found annoying.

Example:
 @omove me=stalks into the room wearing the latest in malevolent expressions.
  
  If the =<message> part is omitted, the message will be reset.

See also: go, @move, @amove
& @opayment
  @opayment <object> [=<message>]

  Sets the message that will be show to others whenever someone "pays"
  <object> (by giving the object a certain amount of MUSH money). The
  name of the person giving the money will be automatically inserted at
  the beginning of the message.
  
  If the =<message> part is omitted, the message will be reset.

Ex: @opay Vending Machine=sticks a quarter in the vending machine.

See also: give, @cost, @payment, @apayment, MONEY
& @open
  @open <exit name>
  @open <exit name>;<exit alias>*=<destination>
  @open <exit name>;<exit alias>*=<destination>,<exit name>;<exit alias>*

  This command opens an exit in the room you are standing in with the 
  specified name. You can then use the @link command to set the exit's
  destination, or you can set it automatically by using the DBREF of a
  destination, which can be a room or object. (Note that you CANNOT open
  exits from objects.) If you also include the second exit name, an exit
  from the destination room will be opened back to the room you are in.

  * Note that you can have as many exit aliases as you like by adding more,
  separated by semicolons. An exit alias allows you to type that instead of 
  the full exit name to go through the exit. Only the exit name appears in
  the list of Obvious Exits in a room.

See also: EXITS, @link, @dig
& @osuccess
  @osuccess <object> [=<message>]

  Sets the message that is shown to others whenever someone passes the 
  object's Basic lock. For players and things, this means picking them up.
  For exits, this means going through the exit, and the osuccess message
  is shown to those in the room the player has just left. This message 
  automatically inserts the name of the person at the beginning.

  @osucc's are very useful for allowing people to follow someone around
  if the name of the exit is included in the message. It is recommended 
  that you put @osuccs on all exits and all takeable objects.

Ex: @osucc North=heads north into the catacombs.
  
  If the =<message> part is omitted, the message will be reset.

See also: take, @success, @asuccess, @lock, FAILURE
& @otport
  @otport <object> [=<message>]

  Sets the <message>, which will be prefixed by <object>'s name,
  that will be shown to the others in the room that the <object>
  is teleported to. If you want to set a message that will be shown
  to the room that the object is teleported OUT of, use @oxtport.

  If the =<message> part is omitted, the message will be reset.

See also: @teleport, @oxtport
& @ouse
  @ouse <object> [=<message>]

  Sets the message that will be shown to others whenever someone successfully
  uses <object>. The name of the person using the object will automatically
  be inserted at the beginning.

  If the =<message> part is omitted, the message will be reset.

See also: use, @use, @ause
& @oxenter
  @oxenter <object> [= <message>]

  Sets the message that will be shown to others outside the object whenever
  someone enters the object. The name of the person entering will be
  inserted at the beginning of the message automatically. If you want
  to show a message to everyone inside the object, use @oenter.

  If the =<message> part is omitted, the message will be reset.

See also: enter, @oenter, leave
& @oxleave
  @oxleave <object> [= <message>]

  This message is shown to everyone in the room that a person enters
  when doing a 'leave' command.  This will be shown in addition to the
  enter messages of the room, not instead of.

  If the =<message> part is omitted, the message will be reset.

See also:
& @oxtport
  @oxtport <object> [=<message>]
  
  Sets the <message>, which will be prefixed by <object>'s name,
  that will be shown to those in the room that the object has
  left via @teleport. If you want to show a message to the room the
  object has arrived in, use @otport.

  If the =<message> part is omitted, the message will be reset.

See also: @teleport, @otport, @atport
& @parent
  @parent <object> = <parent>
 
  This command sets the parent of <object> to <parent>. <parent> may be
  an object of any type; <object> can be anything but a player. The
  player must control <object>. <parent> must either be owned by the
  player, or LINK_OK, or the player must be a wizard.
  If <parent> is "none" or blank, the object is unparented.

See also: PARENTS, parent(), lparent()
& @password
  @password <old password>=<new password>

  This changes your password.  It can be abbreviated @pass. Please note
  that passwords ARE case-sensitive.
  
& @payment
  @payment <object> [=<message>]

  Sets the message that is shown to anyone who pays the object, by giving
  it a certain amount of MUSH money. If =<message> is omitted, the message
  is reset to nothing. May be abbreviated @pay. 

See also: give, @apay, @opay, and @cost.
& @pcreate
  @pcreate <name> = <password>
  This is a wizard level command that is only available if registration is
  being enforced.  It creates a player with the given name and password.
& @pemit
  @pemit[/<switch>] <object> = <message>
  
  The basic form of this command sends <message> to <object> directly.
  It is very similar in its effects to @emit except only one object
  will see the message. You may @pemit to objects in the same room,
  objects you are carrying, and to objects that are carrying you, 
  or @pemit remotely, using #<object> or *<player name>.
 
  The /list switch to this command allows you to @pemit a message to
  a list:  @pemit/list <object 1> [<object 2> <object N>] = <message>
  There can be any number of objects in the list. The objects must be
  specified by dbref number. You will not get back a "confirmation"
  message for the /list form of this command. You can use ## in the
  <message>, which will be replaced with the db#'s of each object in
  the message sent to that object.
  
(continued in help @pemit2)
& @pemit2
  The @pemit command can take the following additional switches:
    /contents  -- equivalent to @remit.
    /silent    -- does not tell the @pemit'ing object a confirmation message.
    /noisy     -- tells the @pemit'ing object a confirmation message.
    /noeval    -- the message will not be evaluated for substitutions 

  Note that page-lock and the HAVEN flag will block @pemits as well, 
  except from Wizards or those with the pemit_all power.

See also @emit, @oemit, @remit, NOSPOOF, and SPOOFING.
& @poll
  @poll <poll question>
  This wizard-only command sets the "poll" - the Doing question. If
  "@poll" is used by itself, the question is reset to the default
  string "Doing". It can also be used by those with the poll @power.

See also: @doing, WHO, DOING
& @poor
  @poor <value>.
  This is a wizard only command.  It sets every player's money supply to
  value.

See also: MONEY
& @power
  @power <object>=[!]<power>
  
  This is a wizard-only command which allows the granting of special
  privileges to objects of any type. 
  
  A list of powers is given in "help powers list".
& @prefix
  @prefix <object> = <message>
 
  This attribute is meant to be used in conjunction with the AUDIBLE
  flag. The @prefix of the object is prepended to messages propagated
  via AUDIBLE.   Pronoun substitution is done on @prefix messages.
  
  For example, if you have an audible exit "Outside" leading from a room 
  Garden to a room Street, with @prefix  "From the garden nearby,"  if
  Joe does a ":waves to everyone." from the Garden, the people at Street
  will see the message,   "From the garden nearby, Joe waves to everyone."

See also: @inprefix, AUDIBLE, @listen
& @ps
  @ps[/<switch>] [*<player> | all]
  
  @ps is a useful command for MUSHers.  It lists all commands currently on
  your 'to be executed' queue, thus allowing you to identify infinite (or
  unnecessary) loops with-out putting in says or poses. It gives a count of
  the total commands in each of the queues (Player, Object, Wait, and
  Semaphore), displayed in the format:
      <Number of your queued commands> / <Total number of queued commands>.
      
  @ps with no arguments will show you your own queue. Wizards may specify
  the /all switch, and see the full queue. They may also specify a player.
  @ps/summary just displays the queue totals for the whole queue.
  @ps/quick displays the queue totals for just your queue.
& @purge
  @purge is a wizard only command that calls the internal purge routine to 
  advance the clock of each object scheduled to be destroyed, and destroy 
  those things whose time is up. The internal purge routine is normally
  run automatically aproximately every 10 minutes. 

  The @purge command should almost never need to be performed
  manually. If you do use it manually, you may want to use it twice in
  a row to make sure that everything marked GOING is actually
  destroyed.

See also: @dbck
& @quota
  @quota [/<switch>] <victim>
  This is a wizard level command that is only available if the quota
  system is enabled.  It reports the victim's owned objects and the
  maximum number of objects he may own.
  The /set and /all switches are equivalent to @squota and @allquota,
  respectively.
& @readcache
  @readcache
  
  This wizard-only command reads the text files into the cache. This must
  be done every time the text files (connect text, quit text, etc.) are 
  changed while the game is running.
 
  A site admin can achieve the same effect by sending the MUSH process
  a kill -1 or kill -HUP.
 
& @rejectmotd
  @rejectmotd <message>

  This is a wizard only command that will set a short (non-longterm) message 
  that will be shown to players that try to connect when logins are disabled. 
  This is the "Down MOTD" in the @listmotd listing. The siteadmin can set a
  more permanent message for this by editing the file "down.txt".
  
See also: @motd, @list, @listmotd
& @remit
  @remit[/noeval] <object> = <message>.

  Sends the message to all contents of <object>, which can be a room,
  thing, or player. (The TinyMUSH equivalent is @pemit/contents).
  The /noeval switch prevents the MUSH from evaluating the message.

See also: @emit, @pemit, @oemit, SPOOFING, NOSPOOF and CONTROL.
& @restart
  @restart <object> or @restart/all
  
  This command halts <object> (as described in @halt), and then triggers
  the STARTUP attribute on the object, if set. If <object> is a player,
  it affects the player and all of their objects. Players can use
  @restart me to restart their own objects. The /all switch halts
  all objects (see @allhalt) and restarts them, and can only be used
  by a wizard.


See also: @halt, @startup
& @runout 
  @runout <object> = <action list> 

  Sets the actions to be taken when the charges of the object reaches
  zero. 

See also: @charges, use, ACTION LISTS
& @rwall
  @rwall <message>

  Only wizards and royalty may use this command. It broadcasts a message to
  all connected wizards and royals, prefixed with "Admin:". If the first
  character is : or ; it does the same thing as @rwallpose.
& @rwallemit
  @rwallemit <message>
  Only wizards and royalty may use this command. It is similar to @wizemit,
  but broadcasts the message to all connected wizards and royals.
& @rwallpose
  @rwallpose <pose>
  Only wizards and royalty may use this command. It's a variant of @rwall,
  using a pose, and is identical to "@rwall :<pose>"
& @scan
  @scan[/<switch>] <command>
  
  @scan gives you a list of all objects containing $commands (user-defined
  commands) which could match <command>. If given no switches, it checks
  you, your possessions, your location, objects in your location, the
  zone/zone master room of your location, your zone, and objects in the 
  master room. It does NOT stop when it gets a match, but rather, finds all 
  possible matches. It also tells how many commands on each object were
  matched. It does NOT scan objects that you do not control and are not
  set VISUAL.
  
  This command can take four switches:
     /room     --   just matches on your location and objects in it.
     /self     --   just matches on you and anything you're carrying.
     /zone     --   just matches on zones of your location and yourself.
     /globals  --   just matches on objects in the master room.
& @search
  @search [<player>] [<class>=<restriction>] [,<begin>,<end>]
  
  This command searches the database and lists objects which meet user
  specified search criteria.  You can limit the scope of the search by
  specifying <begin> and <end> as the first and last dbrefs to search.
  
  If a <player> argument is supplied, only objects owned by that player
  will be listed. If a <class> argument is supplied only objects of a
  certain class will  be listed. Possible <class>es include TYPE, NAME,
  ZONE, PARENT, EXITS, OBJECTS, ROOMS, PLAYERS, FLAGS, POWERS, and EVAL.
  If <class>=TYPE, possible <restriction>s include OBJECTS, ROOMS,
  EXITS, PLAYERS.
  
  If <class>=NAME, only objects whose name begin with the string <restriction>
  will be listed. If <class>=ZONE, only objects in the zone <restriction>
  will be listed. If <class>=PARENT, only children of parent <restriction>
  will be listed. For ZONE and PARENT, <restriction> must be specified as a
  dbref number.
  
  'help @search2' for more.
& @search2
  If <class>=EXITS, OBJECTS, ROOMS, or PLAYERS, only objects of that type
  
  If <class>=FLAGS, only  objects with the list of flags specified by 
  <restriction> will be listed. Flag names should be specified by single
  letters. Flag names are case-sensitive.
  
  If <class>=POWERS, only objects with the given power are listed. Only
  one power may be specified.
  
  If <class>=EVAL, only objects for which <restriction> evaluates to 1
  will be listed. The token '##' in <restriction>, which is a function,
  is replaced by each dbref sequentially.
  
  See "help @search3" for more.
  
& @search3
  For the class TYPE=PLAYER, and for  PLAYER=<player-name>, anyone may
  obtain information on any player.  In all other cases, only wizards may
  obtain information about other players. This is computationally
  expensive, costing 100 pennies. It is generally faster than @find.
  
  Examples:  
    @search flags=Wc      <-- search for connected wizards.
    @search type=rooms    <-- list all rooms owned by me.
    @search zone=#50      <-- list all objects belong to zone #50.
    @search Joe,100,200   <-- list all objects from #100-#200 owned by Joe.
  
    @search eval=gt(money(##,10)     <-- list all objects owned by me  
                                         worth more than 10 coins.

& @select
  @select <string> = <expr1>, <action1> [,<exprN>, <actionN>]... [,<default>]
  This is similar to @switch, except it only executes the action
  associated with the first expression which matches <string> - the
  targets are mutually exclusive. If no target is matched, the default
  actions are executed. This is equivalent to "@switch/first".

  Example:
    &FOO thing = $foo *:@select %0=*a*,:acks,*b*,:bars,*c*,:cheeps,:glurps
    foo abc
    > thing acks
    foo xxx
    > thing glurps

  The string "#$" in <action>'s will be expanded to the evaluated result
  of <string> before it is acted on.

See also: @switch, switch()
& @set
  @set <object>=[!]<flag>
  @<pre-defined attribute> <object>=<value>
  @set <object>=<attribute>:<value>
  @set <object>/<attribute>=[!]<atrflag>
  
  The first form sets (or unsets) a flag on <object>.
    Ex: @set me=VISUAL

  The second form sets a pre-defined attribute on <object>
    Ex: @fail Heavy Box=You can't pick that up.

  The third form sets an arbitrary attribute with <value> on <object>.
  You can also do this with &<attribute> <object>=<value>
    Ex: @set Test Object=random:This is a random attribute.
        &random Test Object=This is a random attribute.
  
  See "help @set2" for more.
& @set2
  The fourth form sets (or unsets) an attribute flag on the specified
  attribute. Possible flags are:
 
  no_command        Attribute will not be checked for '$' commands and
                    '^' listen patterns. In an 'examine', this is denoted
                    by '$' next to the dbref of the attribute's owner.
  visual            Attribute can be seen by anyone via get(), eval(),
                    ufun(), zfun(), and similar functions. In 'examine',
                    this is denoted by 'v'.

(continued in help @set3)
& @set3
  no_inherit        Attribute will not be inherited by the children of
                    this object. In 'examine', this is denoed by 'i'.
                    "private" is a synonym for no_inherit.
  no_clone          Attribute will not be copied if the object is @clone'd.
                    In 'examine', this is denoted by 'c'.
  mortal_dark       Attribute cannot be seen by mortals. Denoted by 'm'.
                    This flag can only be set by royalty and wizards.
                    "hidden" is a synonym for mortal_dark.
  wizard            Attribute can only be set by wizards. Denoted by 'w'.
                    This flag can only be set by royalty and wizards.
  
See also: FLAGS, NON-STANDARD ATTRIBUTES.
& @sex
  @sex <player> = <gender>  

  You can use this command to set yourself or any of your objects to be
  male, female, neuter, or plural. The SEX attribute is used for pronoun 
  substitution by the MUSH, and anything not recognizable will be treated
  as neuter. 

  @sex me = Male
  @sex me = Female
  @sex me = Woman
  @sex me = They
  @sex me = Plural
  @sex me = No thank you (silly, but possible)

See also: GENDER, SUBSTITUTION
& @shutdown
  @shutdown[/panic][/reboot][/paranoid]

  @shutdown shuts down the game. It may only be used by Wizards and
  must be typed in full.

  @shutdown/panic performs a panic shutdown of the game. It may only
  be used by God.

  @shutdown/reboot restarts the game without disconnecting the users.

  If the /paranoid switch is added, the shutdown dump will be a paranoid
  dump (see @dump).
& @sitelock
  @sitelock
  @sitelock/name <name>
  @sitelock <host-pattern> = <options>
  @sitelock[/<ban|register>] <host-pattern>

  The @sitelock command adds rules to the access.cnf file, controlling
  a host's level of access to the MUSH, or adds banned player names to
  the names.cnf file. Only Wizards may use @sitelock.

  @sitelock without arguments lists all sites in access.cnf.
  Rules are processed in the order listed, and the first matching
  rule is applied.

  @sitelock/name adds a name to the list of banned player names.

  @sitelock <host-pattern> = <options> controls the access options
  for hosts which match <host-pattern>, which may include wildcard
  characters "*" and "?". See help @sitelock2 for the list of options.

  For backward compatibility, @sitelock/ban is shorthand for
  setting options "!connect !create !guest", and @sitelock/register
  is shorthand for options "!create".

& @sitelock2

  Sitelock allow/deny options:
   connect   --  allow this site to connect to non-guest players
   !connect  --  don't allow this site to connect to non-guest players
   guest     --  allow this site to connect to guest players
   !guest    --  don't allow this site to connect to guest players
   create    --  allow this site to create players
   !create   --  don't allow this site to create players
   default   --  allow any of the above
   none      --  don't allow any of the above

  Allow/deny options not set are assumed to be allowed.

  Sitelock special options:
   register  -- allow this site to use 'register <name> <email>'
                at the connection screen to register players.
                Players will be emailed their character's password.
                This should be used with !create to be effective.
   suspect   -- set all players who connect from this site SUSPECT.
& @squota
  @squota <victim> = <limit>

  This is a wizard level command that is only available if the quota
  system is enabled.  It reports the victim's owned objects, and sets
  the maximum number of objects he may own to <limit>. If no limit is
  specified, this works identically to @quota.
& @startup
  @startup <object> = <action list>

  Sets the list of actions on <object> that will happen whenever the MUSH
  is restarted. This lets you start up objects that need to be running 
  continuously. It is also useful for use with @function. Setting or
  resetting this attribute automatically sets or resets the STARTUP (z) flag.
  
See also: @function, STARTUP, ACTION LISTS
& @stats
  @stats. Display the number of objects in the game broken down by 
  object types.  Wizards can supply a player name to count only 
  objects owned by that player.
& @success
  @success <object> [=<message>]. Sets the success message for 

  Sets the message that is shown to someone who successfully passes
  the basic lock of <object>. For things and players, this means picking
  them up. For exits, this means going through the exit.

  Ex.: @succ Box=You pick up the box.
       @succ Door=You walk through the door.

See also: @osuccess, @asuccess
& @sweep
  @sweep [connected | here | inventory | exits ]
 
  @sweep gives you a list of all objects/players that are listening in
  the room you are currently in, as well as the objects you are
  carrying. Most objects only listen for a particular string or
  phrase, so they normally do not pose a problem if you need privacy.
  You will have to be careful of players and puppets since they will
  hear everything you say and do. (And might post the same to r.g.m!)
  AUDIBLE exits are also shown on an ordinary sweep, if the room is
  also AUDIBLE. (Audible exits aren't active unless the room is audible).
 
  The four command options can also be used as switches (i.e., you
  can use "@sweep/connected" instead of "@sweep connected"). 
  If the connected flag is given, only connected players and puppets
  owned by connected players will be shown in the @sweep.
  The "here" and "inventory" flags check only your location or
  inventory, respectively. "exits" only checks for AUDIBLE exits.
& @switch
  @switch [/<switch>] <string> = <expr1>, <action1> [,<exprN>, 
                                 <actionN>]... [,<default>]
  For those of you familiar with programming, this command acts like
  if/then/else or switch/case. It compares <string> against whatever
  each <expr> evaluates to. If <string> and <expr> match, the action list
  associated with that <expr> is carried out. If no match is found, the
  <default> action list is carried out. 

  The string "#$" in <action>'s will be expanded to the evaluated result
  of <string> before it is acted on.
  
  @switch/all   will carry out the action lists for -all- of the 
                expressions that match <string>. This is the default.
  @switch/first will carry out the action list for only the -first-
                expression that matches <string>. This is the same as
                @select, and it is less computationally expensive than 
                /all in many cases.

(continued in help @switch2)
& @switch2
Examples: 
    &SWITCH_EX thing = $foo *:@switch %0=*a*,:acks,*b*,:bars,:glurps
    foo abc
    > thing acks
    > thing bars
    foo xxx
    > thing glurps

    &SWITCH_EX thing = $foo *:@switch/first %0=*a*,:acks,*b*,:bars,:glurps
    foo abc
    > thing acks

    &SWITCH_EX thing = $test:@switch hasflag(%#,PUPPET)=1,"Puppet!,"Not Puppet!
    test
    > thing says, "Not Puppet!"
See also: @select, switch()
& @teleport
  @teleport [<object>=] <room>. Teleports <object> to <room>. 
    
  <object> must be a thing; if you do not supply a thing, the object 
  is assumed to be yourself. The destination must be either JUMP_OK
  or controlled by you, and you must either control <object> or
  <object>'s current location. Also, the destination, if a room,
  cannot be teleport-locked against <object>. Mortals cannot teleport 
  Royalty or Wizards. If the target room has a drop-to, <object> will go 
  to the drop-to room instead. Wizards can teleport things into players'
  inventories.
  
  Teleportation from a room can be stopped by setting the NO_TEL flag.
  Royalty and Wizards can _always_ teleport to any location, regardless
  of NO_TEL or teleport locks.
  
  Teleportation triggers the @oxtport/@tport/@otport/@atport attributes,
  unless <room> is an exit.
  
  See also: JUMP_OK, NO_TEL, @oxtport, @tport, @otport, @atport, @lock
& @toad
  @toad <player>

  This is a wizard only command.  It changes a player into an object, and 
  @chowns all of the previous players possessions over to the @toading
  wizard. Some MUSHes may disable this command.
& @tport
  @tport <object> [=<message>]
  
  Sets the <message> shown to <object> when <object> is teleported.
& @trigger 
  @trigger <object>/<attribute> [=<value 0>,<val. 1>,...,<val 9>]

  @trigger can be used to set off commands stored in an attribute on 
  an object. It can also pass values to that attribute on the stack 
  as %0 - %9.

  Example:
    &GREET me=POSE waves hi.
    @tr me/GREET
    > Cyclonus waves hi.

    &GREET me=POSE waves to %0! ; say Hi there, %1.
    @trig me/GREET = Gears, Arcee
    > Cyclonus waves to Gears.
    > You say, "Hi there, Arcee."

(continued in help @trigger2)
& @trigger2
  @trigger is very useful for splitting up large commands and for making
  them neater, but it does cause a time delay in execution, because the 
  commands are put into the queue a second later. For very commonly-used
  globals that you want to execute quickly, you should probably avoid using 
  @trigger. However, in most cases, the time saved by cramming everything 
  into one attribute is outweighed by the time spent debugging.

& @ulock
  @ulock <object> = <key>

  This is an abbreviation of @lock/use.

  This lock determines who is allowed to "use" the object or to set off
  any of the $-commands on the object. 

  Example: if I want everyone but Bob to be able to use my toy, I would
  "@ulock toy=!*Bob". If I want only Bob to be able to use it, I would
  "@ulock toy=*Bob".

See also: @lock, locktypes
& @uptime
  @uptime
  
  This command, for mortals, gives the time until the next database dump.
  For wizards, it also gives the system uptime (just as if 'uptime' had
  been typed at the shell prompt) and process statistics: the process ID,
  the machine page size, the maximum resident set size utilized (in K),
  "integral" memory (in K x seconds-of-execution), the number of page 
  faults ("hard" ones require I/O activity, "soft" ones do not), the
  number of times the process was "swapped" out of main memory, the
  number of times the process had to perform disk I/O, the number of
  network packets sent and received, the number of context switches,
  and the number of signals delivered to the process.
  In addition, this command gives wizards the dbref number of the first
  object in the destroyed object free list.
& @unlink
  @unlink <exit>
  @unlink <room>

  The first form of this command unlinks an exit from its destination
  room. Unlinked exits may be picked up and dropped elsewhere or relinked
  by anyone else. (Note that relinking an unlinked exit will @chown it to
  you if you do not already own it.)

  The second form removes the DROP-TO on the room.

See also: @link, DROP-TO
& @unlock
  @unlock[/<switch>] <object>

  Removes the lock on <object>. It can take as many switches as @lock can. 

See also: @lock, locktypes
& @use
  @use <object> [=<message>]

  Sets the message that is displayed to someone who successfully uses 
  <object>. If =<message> is omitted, the message is reset to nothing.

See also: use, @ouse, @ause
& @uunlock
  @uunlock <object> = <key>

  Un-use-locks the object. See also: @lock, @ulock
& @version
  @version
  Tells the player the name of the MUSH, which version of the code is 
  currently running on the system, when it was compiled, and when
  the last restart was.
& @verb
  @verb <victim>=<actor>,<what>,<whatd>,<owhat>,<owhatd>,<awhat>,<args>
  
  This command provides a way to do user-defined verbs with associated
  @attr/@oattr/@aattr groups. Invoking it does the following:
  
  <actor> sees the contents of <victim>'s <what> attribute, or
    <whatd> if <victim> doesn't have a <what>.
  Everyone in the same room as <actor> sees the contents of
    <victim>'s <owhat> attribute, with <actor>'s name prepended,
    or <owhatd>, also with <actor>'s name prepended, if <victim>
    doesn't have an <owhat>.
  <victim> executes the contents of his <awhat> attribute.
  
  By supplying up to nine <args>, you may pass those values on
  the stack (i.e. %0, %1, %2, etc. up through %9).
  
  See "help @verb2" for more.
  
& @verb2  
  In order to use this command, at least one of the following criterion
  must apply:
    1. The object which did the @verb is a wizard.
    2. The object which did the @verb controls both <actor> and <victim>
    3. The thing which triggered the @verb (such as through a $command on
       the object which did the @verb) must be <actor>, AND the object
       which did the @verb must be either privileged or control <victim>
       or <victim> must be VISUAL.
  
  See "help @verb3" for examples.
  
& @verb3
  Example:
  
  &VERB_EXAMPLE Test Object=$test:@verb me=%N,TEST,You just tested.,OTEST,
       just tested the example.,ATEST,%N
  test
  > You just tested.
  > [others see] Cyclonus just tested.

  &TEST Test Object=You have just tested this object!
  &ATEST Test Object=@emit %0 has failed!
  &OTEST Test Object=tests test object.
  test
  > You have just tested this object!
  > [others see] Cyclonus tests test object.
  > Cyclonus has failed!

  Another example follows in "help @verb4"
& @verb4
  In order to make this into a global command that anyone can use, we
  need to put it on a WIZARD object in the Master Room. 

  &DO_TEST Global=$test *:@select locate(%#,%0)=#-1,
                  {@pemit %#=I don't see that here.},
                  {@verb locate(%#,%0,n)=%#,
                   TEST,You test [capstr(%0)].,
                   OTEST,tests [capstr(%0)].,
                   ATEST}
 
  &TEST Example=You test this fun example.
  &ATEST Example=POSE has been tested!
  test example
  > You test this fun example.
  > [others see] You test Example.
  > Example has been tested!

See also: USER-DEFINED COMMANDS, STACK, @trigger, @select
& @wait
  @wait <time> = <command_list>
  @wait <object> = <command_list>
  @wait <object>/<time> = <command_list>
  
  The basic form of this command puts the command list (a semicolon-separated 
  list of commands) into the wait queue to execute in <time> seconds.
  
  The second form sets up a semaphore wait on <object>. The enactor will
  execute <command_list> when <object> is @notified.
  
  The third form combines the first two: the enactor will execute
  <command_list> when <object> is @notified or when <time> passes,
  whichever happens first.
 
  See also the help for: SEMAPHORES, @drain, @notify
& @wall
& @wallemit
& @wallpose
  @wall [/<switch>] <message>
  @wallemit <message>
  @wallpose <pose>

  Only wizards can use this command, which allows the player to shout
  a message to every player connected. It must be typed in full.
  It can also take the following switches:
  /wizard  : broadcast to wizards (like @wizwall)
  /royalty : broadcast to wizards and royalty (like @rwall)
  /pose    : pose a message to all (or use @wallpose)
  /emit    : emit a message to all (or use @wallemit)

  You can also use @wall :<pose> to @wallpose.

See also: @wizwall, @rwall
& @warnings
  @warnings <object|me>=<warning list>

  If the building warning system is enabled, this command will set
  the types of warnings which should be reported on an object or
  to a player. You must control the object to use this command.

  When an object is checked for warnings (via @wcheck by the owner, or
  automatically), only warnings which are set to be reported on the
  object will be reported. If no warnings are set on the object, the
  owner's warning settings will be used. When admin use @wcheck to
  check non-owned objects, their personal warnings are always used.

  For a list of warnings, see 'help warnings list'
  See also 'help @wcheck' and 'help NO_WARN'

  For examples, see 'help @warnings2'

& @warnings2

  Example 1: Normal building situations
  Most people will simply want to leave their @warnings set to "normal"
  and their objects' @warnings set to "none". They will then receive 
  normal warnings for all their objects.

  Example 2: Warning-lover
  People who find warnings very helpful (like heavy builders) may want
  to set their personal @warnings to "extra" or "all", and keep their
  objects' warnings at "none". If a specific object should be treated 
  less strictly, set that object's @warnings differently. If an object
  shouldn't be warned on at all, set the NO_WARN flag on the object.

(continued in help @warnings3)
& @warnings3
  Example 3: Warning-hater
  People who prefer not to be warned except for specific object may
  set their personal @warnings to "none" and set the @warnings on
  those objects to appropriate levels.

  Example 4: I need some peace!
  Players who @set themselves NO_WARN will receive no warnings ever
  until they unset the flag.

& @wcheck
  @wcheck <object>
  @wcheck/all 

  This command is enabled if the building warning system is enabled.

  The first form of the command performs warning checks on a specific
  object. The player must own the object or be see_all. When the owner
  runs the command, the @warnings of the object are used to determine
  which warnings to give. If the object has no @warning's set, the
  @warnings of the owner are used. When a non-owner runs the command,
  the @warnings of the non-owner are used.

  The second form of the command runs @wcheck on every object in the
  database and informs connected owners of warnings. It is usually
  automatically run by the MUSH at intervals. Only Wizards may use
  @wheck/all.

See also: @warnings, WARNINGS, NO_WARN
& @whereis
  @whereis <player>

  If <player> is not set UNFINDABLE, this command will tell you where
  the player is. It will also inform the player that you attempted to
  locate their position, and whether you succeeded or not.

  To avoid being found this way, just do: @set me=UNFINDABLE

  Ex: @whereis  Moonchilde

See also: UNFINDABLE, loc()
& @wipe
  @wipe <object>[/<attribute pattern>]
  
  This command clears attributes from <object>, with the exception of
  attributes changeable only by wizards, and attributes not controlled by
  the object's owner (i.e. locked attributes owned by someone else).
  Only God may use @wipe to clear wiz-changeable-only attributes.
  The SAFE flag protects objects from @wipe.
 
  If no <pattern> is given, this gets rid of all the attributes, with
  exceptions as given above. If <pattern> is given, it gets rid of
  all attributes which match that pattern. Note that the restrictions
  above still apply.
& @wizemit
& @wizwall
& @wizpose
  @wizwall <message>
  @wizemit <message>
  @wizpose <message>

  This wiz-only command works similarly to @rwall or @wall, sending
  a message in either say, pose, or emit format to all wizards who
  are currently logged in. 

  @wizwall :<pose> or @wizwall ;<pose> will also send the message in
  pose format.

See also: @wall, @rwall
& @wizmotd
  @wizmotd <message>

  This is a wizard only command that will set a short temporary message
  that will be shown to all wizards when they connect. It is listed in
  @listmotd as the Wiz MOTD. A more permanent message can be set by
  the siteadmin by editing the file "wiz.txt".
& @zemit
  @zemit <zone> = <message>

  Emits a message to all rooms in <zone>. You must have control in that
  zone in order to use this command. Because it is computationally
  expensive, it costs 100 pennies.
& ahelp
  ahelp [<topic>]

  Shows the current admin help for the MUSH. Only ROYALTY and WIZARDS
  can use this command.

See also: anews
& anews
  anews [<topic>]

  Shows the current admin news for the MUSH. Only ROYALTY and WIZARDS
  can use this command.

See also: ahelp
& brief
  brief <object> 

  This command works like an abbreviated version of examine. It does not
  print out all the attributes on the object. 

See also: examine
& cd
& ch
  cd <name> <password>
  ch <name> <password>

  Not really a MUSH command, but a command available at the connect
  screen for Wizards. If enabled, Wizards who use 'cd' instead of
  'connect' to connect will be set DARK as they connect, and will not
  show arrival messages. Their arrival will, however, be broadcast
  to other admin, but not to MONITOR-flagged mortals.

  ch is a variant of cd that allows Royalty to connect @hidden.

See also: DARK, @hide
& DOING
  DOING

  This command displays the list of players currently connected to the
  MUSH. For mortals, it is identical to WHO. For wizards, it displays
  the WHO in the format mortals see. The wizard WHO shows location and
  host, but does not show @doing messages. DOING shows @doing messages
  but not location or host.

See also: WHO, @poll, @doing
& drop 
  drop <object>

  Drops <object>, if you are presently carrying it. If the room the object
  is dropped in has a DROP-TO set, the object may automatically be sent
  to another location. Some MUSHes may have @lock/drop enabled, which 
  allows you to set who is permitted to drop the object.

  Note that as of 1.6.6, the TEMPLE flag and SACRIFICING have been 
  disabled.

See also: STICKY, DROP-TO
& enter
  enter <object>

  Used to enter a thing or player. You can only enter an object if 
  you own it or if it is set ENTER_OK. You must also pass the enter-lock,
  if it is set. Entering an object triggers is @enter/@oenter/@oxenter
  messages and its @aenter actions. If you fail the enter-lock, the
  object's @efail/@oefail/@aefail messages and actions are triggered.

  Insides of objects are best used for vehicles, or storage spaces
  when you don't have a home. You can describe the interior of an
  object differently from its exterior by using @idescribe.  

See: @enter, @oenter, @oxenter, @aenter, leave, @lock, @idesc, INTERIORS
& events
& rules
  events [<topic>]
  rules [<topic>]

  These commands, like news, work the same way as the help command, except
  that the information provided in them is specific to this particular
  MUSH. Not all MUSHes will have both or either of these commands enabled.

See also: news, help
& examine
  examine[/<switch>] <object>[/<attribute>] 
  
  Displays all available information about <object>.  <object> may be an 
  object, 'me' or 'here'. You must control the object to examine it.  If 
  you do not own the object, or it is not visible, you will just see the 
  name of the object's owner.  May be abbreviated 'ex <object>'.  If the 
  attribute parameter is given, you will only see that attribute (good 
  for looking at code). You can also wild-card match on attributes.  For 
  example. to see all the attributes that began with a 'v' you could do 
  ex <object>/v*
  
  Examine takes three switches, "brief"  (equivalent to the "brief" command),
  "debug", which is a wizard-only switch, and "mortal".  "debug" examine
  will show the raw values for certain fields in an object. "mortal"
  examine will show an object as if you were a mortal and not the object's
  owner. It's primarily useful to admins.
& follow
  follow <object>

  If you pass the object's follow lock, you begin following it. As the
  object moves around (except if it @teleports away or goes home), you
  will automatically move around with it, so long as you pass all the
  locks and enter/leave locks on the exits and things the object moves
  through.

See also: unfollow, followers(), @follow, @ofollow, @afollow
& get
& take
  get <object>
  take <object>

  You pick up object, if you pass the object's @lock. You can also do 
  get <thing>'s <object>, which will fail if either thing is not ENTER_OK 
  or the object is locked against you. Some MUSHes choose to disable the 
  ability to take an object in someone else's inventory.
  
See also: @lock, ENTER_OK, give, drop, @success, inventory
& give
  give <player>=<pennies/object>

  Gives player the specified number of pennies or <object>. You can't give 
  someone pennies if their new total would be greater than 10000 pennies. 
  (No reason to get greedy)  You may also give players objects, but the 
  other player must be set ENTER_OK in order to receive something you give.
  
  Giving money to an object gives the money to the object's owner. Some
  MUSHes may have @lock/give enabled, which determines who is allowed to
  give an object.

See also: @pay, @cost, @lock, inventory
& go
& goto
& move
  go[to] <direction> 
  go[to] home
  move <direction>
  move home

  Goes in the specified direction. <Direction> can be the name or alias of
  an exit in your area, the enter alias of an object in your area, or
  the leave alias of the object you are in. You do not need to use the
  word 'go' or 'move', in fact -- simply typing the direction will have the
  same effect.

  'go home' is a special command that returns you to your home room/object.
  Some MUSHes may disable this command.

See also: HOME, @link, @ealias, @lalias, EXITS
& index
  index

  A file similar to news, often indexing the news and events files.
  May not be available on some MUSHes.
& INFO
  INFO

  This command returns some information about the MUSH you are on, such
  as its version number, time of last restart, number of players currently
  connected, and size of database. It can be issued from the connect
  screen.
& inventory
  inventory

  Lists what you are carrying. Can be abbreviated by just 'i', or 'inv'.
  It also tells you how much MUSH money you have. If you are not set
  OPAQUE, others will also be able to see what is in your inventory by
  looking at you.

  Note that on some MUSHes it is possible to take things that are in 
  someone else's inventory. To be safe, @lock any objects that you do
  not want to lose.
  
See also: score, take, drop, OPAQUE, @lock
& kill
  kill <player> [=<cost>]

  Attempts to kill the specified player. Killing costs <cost> pennies, which 
  gives you a <cost>% chance of killing the player. Thus, spending 100 
  pennies always works (except against wizards,  who can never be killed). 
  Players cannot be killed in rooms which have been set HAVEN. If you don't 
  specify a cost, the default is 10 (i.e. 10%).  The player, if killed, 
  receives <cost>/2 pennies in insurance.

  This command may be disabled in this MUSH.

See also: BEING KILLED, HAVEN, FLAGS, powers list
& leave
  leave

  The command leave allows you to exit an object you have enter'ed 
  into. When you leave an object, its @leave/@oleave/@oxleave messages
  are triggered, and its @aleave actions are triggered. 

  The NO_LEAVE flag may be enabled on some MUSHes. Objects set with this
  flag cannot be left. @lock/leave may also be enabled on some MUSHes,
  which allows you to set who can leave the object. If you fail to
  leave, the object's @lfail/@olfail/@alfail messages/actions will be
  triggered.

See also: enter, @leave, @lfail, @lock, INTERIORS 
& LOGOUT
  LOGOUT

  LOGOUT is similar to QUIT, but instead of disconnecting you from the
  game completely, it merely disconnects you from your current character
  and returns you to the opening welcome screen. This is useful if you
  want to disconnect and then reconnect to another character.
& look
& read
  look [<object>]
  look <person>'s <object>
  look/outside

  Displays the description of <object>, or the room you're in if you don't 
  name a specific object.  You can specify object as <name> or #<dbref> or 
  'me' or 'here'. On some MUSHes, 'read' may work the same as 'look'. The 
  second form of this command allows you to look at objects held by other 
  people, if the person is not OPAQUE.
    
  Look can take one switch, "outside". look/outside allows you to
  look at objects outside your current location, as long as your
  immediate location is not a room, and is not OPAQUE.

(continued in help look2)
& look2
  If you look at an object that is not set OPAQUE, you will see any non-DARK
  items in its inventory. You can look at DARK items in your location if 
  you know what their name is by typing 'look <object>', but they will
  not show up in the list of contents.

  When you type 'look' alone, you look at your current location. For a room,
  this normally shows you the room's description, the list of contents, and
  any obvious exits from the room. For an object, it only shows you the
  interior description (@idescribe).
  
  If a room is set DARK, when you look you will not see any of the exits
  or contents of the room, unless they are set LIGHT. 

  'look' may be abbreviated 'l'.
  
See also: OPAQUE, FLAGS, @describe, @adescribe, @odescribe, DARK, LIGHT
& news
  news [<topic>]

  The news system works just like the help system. Many MUSHes use it to
  provide standard information on the rules, theme, and customized
  commands of the particular MUSH. It is highly recommended that you 
  read it regularly.
& page 
  page[/<switch>] [<player-list>=]<message>.

  This command sends a message to a player or list of players. If
  the player's name contains spaces, surround it with double-quotes.
  If you have already paged someone since connecting, just typing:

    page <message>

  will send the message to the last person paged. You cannot page a 
  player if they are set HAVEN or if you do not pass their page-lock.

  Examples:
    > page airwolf=hi there!
    You paged Airwolf with 'hi there!'.
    > page see, I don't have to retype the name.
    You paged Airwolf with 'see, I don't have to retype the name.'.
    > page "John Lennon" Ringo=Paul's fine!

(continued in help page2)
& page2
  Page will attempt a partial match on the name, checking both for an
  @alias and to see if the name matches someone connected. If the first
  character of <message> is a : or a ;, it will send the page in pose
  format.  

  Objects may page players, but not vice versa. If an object pages
  a NOSPOOF player, that player will see the object's number in
  square brackets, in front of the message, in a fashion similar to
  the way NOSPOOF flags emits.

  Page takes two switches: /list and /noeval. 
  The /list switch is not needed to page a list of players, but it 
  informs all the players paged who else was paged and also notifies 
  the pager just once, which makes for less spam.

  The /noeval switch prevents the MUSH from evaluating the message.
  
See also: @lock, @alias, pose, :, ;, HAVEN, NOSPOOF, FLAGS
& :
& ;
& pose
& semipose
  pose[/noeval] <action pose>
  :<action pose>

  pose[/nospace] <action pose>
  semipose[/noeval] <action pose>
  ;<action pose>
 
  Displays your name followed by the statement you posed.  May be abbreviated
  by the ':' symbol. Normally, a space is placed between your name and the
  action you are posing. If you do not wish to have a space inserted, use
  the /nospace switch, the 'semipose' command, or the ';' symbol.
  The /noeval switch prevents the pose from being evaluated by
  the parser.

(continued in help pose2)
& pose2
 
  Examples:
    If you are player Bob, and you type in ':laughs out loud.' or
    'pose laughs out loud.' everybody in the room will see:
    "Bob laughs out loud." 
  
    If you are player Bob, and you type in ';'s smiling today.' or
    'pose/nospace 's smiling today.' everybody in the room will see:
    "Bob's smiling today."
& rpage
  rpage[/<switch>] <player>@<MUSHname> = <message>
 
  This command allows you to remote-page a player connected to another 
  MUSH. <Message> may be either text or a pose, and is formatted accordingly.
  The MUSH you are trying to page to must be registered with the MUSH
  you are on  (they must know each other's names and rpage passwords;
  talk to the Gods if they aren't).
 
  A remote-page message is prepended with the name of the originating
  MUSH, in curly braces. When you attempt to remote-page someone, you
  are not guaranteed to be able to contact the other MUSH; unless you
  get your message echoed back, you cannot be sure that the remote
  player received your message. He might have, but then again, he might
  not have.  The remote-page facility uses UDP datagrams, and thus does
  not guarantee transmission.

Read 'help rpage2' for more.
& rpage2
  Example:  Amberyl, on TinyKrynn, wishes to page Polgara, on Belgariad.
 
    Amberyl types:  rpage Polgara@Belgariad = Hi there.
    Polgara sees:  {TinyKrynn} Amberyl pages, 'Hi there.'
    Amberyl sees:  {Belgariad} To Polgara: Amberyl pages, 'Hi there.'
 
    Polgara replies:  rpage Amberyl@TinyKrynn =:waves hello.
    Amberyl sees:  {Belgariad} Polgara waves hello.
    Polgara sees:  {TinyKrynn} To Amberyl: Polgara waves hello.
  
  Read 'help rpage3' for more.
  
& rpage3
 
  If the other person is not connected, is set HAVEN, or doesn't exist,
  the person attempting to page will receive an error message.
 
  If the person attempting to page receives no message of acknowledgement
  other than "Done.", it is likely that the message hasn't gotten through.
  Often, though, a few seconds will pass between the "Done."  message and
  the acknowledgement.
 
  Please note that the names of the MUSHes are case-sensitive. You need
  to make sure that the name of the MUSH you are typing appears in the
  remote-page connection list, accessed by typing "rpage/list".
  
  Read 'help rpage4' for more.
  
& rpage4
 
  The rpage command takes two additional switches, "add" and "delete",
  which are restricted to God only. 

  To add a new server: rpage/add <Name of server> <Password> = <Address>
  For every server you are "connected" to, you must have one entry which
  has the full name of the MUSH, as used in @version on that MUSH. This
  is the "identifying" entry. Both your MUSH and the other MUSH need to
  share a password.
  FooMUSH:  rpage/add BazMUSH foobar=bazvax.cowtech.edu
  BazMUSH:  rpage/add FooMUSH foobar=foovax.cowtech.edu

  You can have multiple entries for the same MUSH, i.e. you could also do:
  rpage/add Foo foobar=foovax.cowtech.edu

  Deleting a server entry is simple: rpage/delete <Name of server entry>
  
  Server entries are automatically saved when the database is.
& "
& say
  say <message>
  say/noeval <message>
  "<message>

  Says <message> out loud. The message will be enclosed in double-quotes.
  A single double-quote is the abbreviation for this common command.

  Say takes one switch, /noeval. The /noeval switch prevents any evaluation 
  of the message, and is handy when you want to say things that use special 
  characters like % or []'s.

  See also: whisper, pose
& score
  score
  
  Displays how many pennies you are carrying.  Helpful to see if
  any machines are looping. If they are, your pennies will be being 
  rapidly drained. MUSH money may also be used for other purposes in
  the game.
  
See also: LOOPING, @ps, QUEUE, MONEY
& slay
  slay <player/object> 

  This is a Wizard-only command that kills players without paying any 
  insurance to the victims. It is used in places where 'suicide' should 
  not pay.
  
  (Su-ic-ide is pain-less... {MASH theme})
& think
  think <message>

  You can use this command to send a private message to yourself. Pronoun
  substitution is performed. This is essentially equivalent to doing a
  "@pemit me=<message>", but with "think", there's no prepended text.
  One possible use: @adesc me=think %N just looked at you.
& QUIT    
  QUIT

  Log out and leave the game. Must be in all capitals.  
& unfollow
  unfollow
  unfollow <object>

  The first form of this command clears off all your followers, if you
  have any. The second form of this command enables you to stop 
  following an object which you were formerly following. Note that you
  can also stop following by going off in a different direction before
  the object moves.

See also: follow, followers(), @follow, @ofollow, @afollow
& use
  use <object>

  Attempts to use an object, triggering its @use/@ouse/@ause attributes.
  The person using the object must pass its uselock; no inheritance check
  is necessary. This is may be done remotely, by using a dbref number;
  it provides an easy way for non-INHERIT objects to perform commands on
  INHERIT objects.
& whisper 
  whisper <player>=<message>
  whisper/silent <player>=<message>
  whisper/noisy <player>=<message>
  whisper/noeval <player>=<message>
  whisper/list <players>=<message>

  Whispers the message to the named person, if they are in the same
  room as you. No one will see the message you whisper.  You can also
  whisper to things you are carrying, or to things that are carrying
  you. whisper <player>=:<pose> also works, in a fashion similar to
  page-pose.

  In a noisy whisper, other players in the room may be told who you whispered
  to (but not what you whispered): Polgara whispers to Javelin.
  The probability that a noisy whisper will be heard aloud is configurable.
  In a silent whisper, other players will not know that you whispered.
  The default whisper may be configured either silent or noisy (check @config)

(continued in help whisper2)
& whisper2
  The /noeval switch prevents any evaluation of the message, and
  is handy when you want to say things that use special characters
  like % or []'s.

  The /list switch lets you whisper to many people at once. Multiple
  persons should be space-separated, and names with spaces should be
  enclosed in double-quotes.

  'whisper' can be abbreviated by just 'w'.  
& WHO
  WHO   

  Displays a list of players currently connected to the MUSH.
  The WHO tells you how long a player has been on and how long they
  have been inactive. 

See also: @doing, @poll, DOING
& FLAGS
  @set <object>=[!]<flag name>

  Flags give objects certain abilities or qualities. For example,
  a wizard player has wiz powers because s/he has the WIZARD flag 
  set. 

  Some flags can only be set on certain types of objects, such as
  just players or just rooms. Other flags, like VISUAL, can be set
  on any kind of object (player, room, exit, thing). 

  To un-set a flag, use the exclamation point (!) before the flag
  name. For help on any particular flag, type help <flag name>.

  The list of flags is available in: help flag list

(continued in help flags2)
& FLAGS2
  To go into more detail, all objects in the MUSH, like players, rooms, 
  exits, and things, are essentially the same on the program level. The 
  MUSH tells things apart by the flags that are set on them. For example,
  all rooms have the ROOM flag set on them, just as all players have the
  PLAYER flag.

  You can see the list of flags set on an object if you are allowed to
  examine it. The flags are listed on the line just below the object's
  name, after the word "Flags:". Flag abbreviations are also visible 
  after the object's name in the room description (if the object is not
  set OPAQUE). 

See also: examine, hasflag(), orflags(), andflags()
  
 
& FLAG LIST
& FLAGS LIST
Flag  Title           Flag  Title             Flag  Title
-----------------------------------------------------------------------
  A - Abode, Ansi       C - Chown_Ok, Color     D - Dark
  E - Exit (type)       F - Floating, Fixed     G - Going
  H - Haven             I - Inherit             J - Jump_Ok, Judge
  L - Link_Ok           M - Monitor             N - Nospoof, No_Tel, No_Leave
  O - Opaque            P - Player (type)       Q - Quiet
  R - Room (type)       S - Sticky              T - Feature
  U - Unfindable        V - Visual              W - Wizard
  X - Safe              Z - Zone, Z_Tel

  a - Audible           b - Debug               c - Connected, Cloudy
  d - Destroy_Ok        e - Enter_Ok            f - Fighter
  g - Gagged            h - Halt                i - Admin
  k - Killed            l - Light               m - Myopic
  n - No_Command        o - On-Vacation         p - Puppet
  q - Force_White       r - Royalty             s - Suspect
  t - Transparent       u - Uninspected         v - Verbose
  w - No_Warn           y - Equipment           x - Terse
  z - Startup           ? - Unregistered        ~ - Emeritus
---------------------------------------------------------------------
Some flags may not be enabled on some MUSHes.
& ABODE
  Flag:  ABODE  (rooms)

  If a room has the ABODE flag set, any player can set his home there,
  and can set the homes of objects there.  It does not mean that a
  player can open an exit to that room, only that they can set their
  home there.  This flag should not be set unless you want to make the
  room a public 'living area'.

  To make a room your home, type '@link me=here' while standing in the
  room.

See also: @link
& ANSI
  Flag:  ANSI  (players)
  
  When set on a player, this flag bold-hilites the names and owners
  of attributes when the player "examines" an object. This makes it
  much easier to pick out where attributes begin and end, when examining
  complex objects. You must be using a terminal which supports ANSI
  control codes in order for this to work. Additionally, some MUSHes
  may not support ANSI. Check @config to see.
  
  See also the COLOR flag. If COLOR is not set, and ANSI is, you will
  see vt100 ANSI codes, but not color ANSI codes.

See also: COLOR, ansi(), @config
& AUDIBLE
  Flag:  AUDIBLE  (all types)

  Exits that are AUDIBLE propagate sound to their destinations. In
  other words, any message - emit, say, or pose - that is heard in the
  source room of the exit is passed on to the contents of the exit's
  destination room. The message is prepended with the exit's @prefix
  attribute; if there is no @prefix, the default is used:
  
  "From <name of the exit's source room>,"
  
  Messages matching a certain pattern may be filtered out by using
  @filter on an exit; read 'help @filter' for more.
  
  In order for exits in a room to propagate sound, the room must also
  be set AUDIBLE. If the room is audible, exits that are audible show 
  up on a @sweep, even if they are set DARK.
   
  See "help AUDIBLE2" for more.
 
& AUDIBLE2
  This flag is also valid for things. If an object is set AUDIBLE,
  any messages which originate from its contents will be broadcasted
  to the outside world. This makes it very simple to program vehicles.
  Like AUDIBLE on exits, the message is prepended with the thing's
  @prefix attribute, and messages matching certain patterns may be
  filtered with @filter. If there is no @prefix, the message will be
  prepended with "From <name of AUDIBLE object>,"
  The AUDIBLE object does not receive its own propagated messages.
 
  The AUDIBLE flag allows most "emitters" (objects that listen for
  messages and broadcast them to other rooms) to be eliminated. The
  message is propagated only to the next room and no farther, so 
  there is no danger of looping.
& BUILDER
  BUILDER 

  BUILDER is actually an @power rather than a flag. Some MUSHes choose
  to limit the building commands (@dig, @open, and sometimes even 
  @create) to registered builders only. If you are on a MUSH that does
  this, you will not be able to use these commands unless you have the
  power. Only wizards can grant @powers. To see if building is limited, 
  check @config.

See also: POWERS, @power, @dig, @open, @create, @config
& CHOWN_OK
  Flag:  CHOWN_OK  (things, rooms, exits)

  You can set this flag on an object you own to allow other players 
  to transfer ownership of the object to themselves (using @chown).
  You must be carrying the thing, or in the room in order to set the
  flag, unless you use the DBREF number.

See also: @chown
& CLOUDY
  Flag:  CLOUDY (exits)

  If this flag is set on a (non-TRANSPARENT) exit, when a player looks
  at the exit they will see the contents of the destination room
  following the exit's description.

  If the flag is set on a TRANSPARENT exit, when a player looks at the 
  exit they will see only the description of the destination room
  following the exit's description, and will not see contents.
& COLOR
  Flag:  COLOR  (players)
  
  When set on a player, this flag allows the player to see ANSI color.
  The ANSI flag must also be set.

See also: ANSI, ansi()
& CONNECTED
  Flag:  CONNECTED  (players)

  This flag applies only to players and it shows if the 
  player is connected or not. Thus, each time you are connected to 
  the game, you should see the 'c' flag set, otherwise, you are DEAD!
  You cannot reset this flag, and it is used internally by the code 
  for things like tabulating players for the WHO list, etc. You cannot
  see whether other players are CONNECTED using this flag.

See also: conn()
& DARK
  Flag:  DARK  (all types)

  If a room is DARK, then no items are shown when a person 
  'looks' there. If a thing is DARK, then "look" does not list that 
  object in the room's Contents:, and if an exit is DARK, it doesn't 
  show up in the Obvious Exits: list.  Puppets and objects that can 
  listen cannot be DARK. Note that players, puppets, and other "hearing"
  objects still trigger enter/leave messages when in DARK areas.
  There is a config option for "full invisibility": players and objects
  that are dark will be slightly disguised in speech and poses.  Such
  actions by these objects will show as being from Someone or Something
  depending on whether it was an object or wizard player.
  
  See 'help DARK2' for more.
  
& DARK2
  Players who can hide from the WHO list should use @hide/on and
  @hide/off to control this, not the DARK flag. While any player
  can turn off their DARK flag, only Wizards can set their DARK flag.

  Wizards who are DARK "disappear" completely -- they are not on the WHO
  list, do not announce connects and disconnects, etc.
& DEBUG
  Flag: DEBUG  (all types)
  
  The DEBUG flag is used for debugging MUSHcode. It is meant to be used
  in conjunction with the VERBOSE flag. If an object is set DEBUG, all
  parser evaluation results will be shown to the object's owner, in the
  format: #<object dbref>! <string to evaluate> => <evaluated string>
  Note that verbose output is "#obj]" - debug output is "#obj!".
  
  Because the parser does recursive evaluations, you will see successive
  messages evaluating specific parts of an expression. This enables you
  to pinpoint exactly which evaluation is going wrong.
  
  Objects run under this flag are computationally expensive.
  Avoid leaving it set on objects. Only admin and those with the can_debug
  power can set this flag, but anyone can reset it on an object they own.
  
  During a DEBUG evaluation, the flag is temporarily reset; therefore,
  a test for HASFLAG(), FLAGS(), etc. in the debug execution will show
  that the DEBUG flag is not set (although the actual output will be
  correct.)
  
  See "help DEBUG2" for more.
& DEBUG2
  
  Create test, and set it DEBUG.
  
  > @va test=$wc *:"String %0 has [strlen(%0)] letters and [words(%0)] words.
  > wc This is my test string
  #14! String %0 has [strlen(%0)] letters and [words(%0)] words. => String
       This is my test string has 22 letters and 5 words.
  #14! strlen(%0) => 22
  #14! %0 => This is my test string
  #14! words(%0) => 5
  #14! %0 => This is my test string
  Test says, "String This is my test string has 22 letters and 5 words."
& DESTROY_OK
  Flag:  DESTROY_OK  (things)

  The DESTROY_OK flag allows anyone who is holding an object to
  @destroy it. This is good for "temporary" objects like "Can of
  Cola". DESTROY_OK takes precedence over SAFE.

& ENTER_OK
  Flag:  ENTER_OK  (all types)
 
  If an object or person is ENTER_OK, other players may 
  enter the object or person by using 'enter <object/person>.
  Only objects which are ENTER_OK may be entered, regardless of the
  enter lock. Players must also have the ENTER_OK flag set if they wish
  to be able to receive  things given to them by other players via the 
  command 'give <player> = <object>'.  

  This flag has no effect on rooms.

See also: enter, leave, give, @lock
& FIXED
  Flag: FIXED (players)
  
  When this flag is set on a player, it prevents them or any of their
  objects from using the @tel or home command. The only exception is
  that a player's objects are permitted to @tel themselves to the
  player's inventory.
& FLOATING
  Flag:  FLOATING (rooms)

  If a room is set floating, you will not be notified every 10 
  minutes or so that you have a disconnected room.
  A disconnected room may mean (depending on how the MUSH is
  configured) a room that can't be reached from room #0, or
  a room that can't be reached from room #0 and has no exits.
& FORCE_WHITE
& WEIRDANSI
& WHITE
  Flag: FORCE_WHITE (players)

  When set on an ANSI player, this player causes the ansi code to
  reset the font color to white to be sent after everything the player
  sees. Necessary for players with broken ansi clients which "bleed".

  This flag is aliased to "WEIRDANSI" as well.

& GAGGED
  Flag: GAGGED (players)

  When set on a player, it disables him from doing anything 
  except moving and looking.  He cannot talk, page, build, pose, get 
  or drop objects. Normally used as a penalty for those who break
  MUSH rules.

  Only wizards can set this flag.
& GOING
  Flag:  GOING  (all types)

  Used internally for the @destroy command, it is set on things that
  are scheduled to be destroyed. To prevent a GOING object from being
  destroyed, use the @undestroy (or @unrecycle) command. You can no
  longer @set the object !GOING.

& HALT
  Flag:  HALT   (all types)

  While this flag is set, the object cannot perform any mush 
  actions, listen, be triggered, evaluate functions or substitutions,
  etc.

See als: @halt, @restart
& HAVEN
  Flag:  HAVEN (players, rooms)

  If a player is set HAVEN, she cannot be paged and anyone paging them
  will be sent a brief notification. You can also set a longer @HAVEN
  message if you wish. You may prefer to use @lock/page to block out
  only specific individuals.

  If a room is set HAVEN, the 'kill' command cannot be used in that room.

See also: @haven, kill
& INHERIT
  Flag:  INHERIT  (all types)

  Inherit is a security flag used to prevent objects without authorization
  from using @force, @set, and @trigger on other objects.
  Authorization is successful if:
 
     1. The enactor is WIZARD.
     2. The enactor's owner is INHERIT.
     2. The enactor is INHERIT.
     3. The target is not INHERIT.
 
  Only INHERIT or WIZARD objects may force their owners. Players can
  always @force, @set, and @trigger their objects. 
 
  Read "help Inherit2" for more.
 
& INHERIT2
 
  Authorization is only denied if the enactor is neither a player nor
  INHERIT, and the target is WIZARD, INHERIT, or is a player.
  The INHERIT protection against @trigger may be overridden by setting
  the target object LINK_OK.
  Objects which are WIZARD are not subject to any special criterion,
  although they are automatically considered to be INHERIT.
  The normal criteria for object control still apply.
 
  For zoned objects, the INHERIT flag protects against an object from
  being controlled by anything not owned by its owner. This prevents
  someone who controls a zone from doing things like @forcing an
  INHERIT object to @force its owner.
& JUDGE
& JURY_OK
  Flags: JUDGE and JURY_OK (players)
 
  These flags may be used by the MUSH to support some form of Judged
  RP system. Or they may not be compiled in. See @config for more
  information.
& JUMP_OK
  Flag: JUMP_OK  (rooms)

  When a room is set JUMP_OK, then that room can be teleported into
  by anyone. See @teleport.
& LIGHT
  Flag:  LIGHT (all types)

  Objects, players, and exits which have the LIGHT flag set on them
  (and are not also set DARK) appear in the contents of DARK rooms.

See also: DARK
& LINK_OK
  Flag: LINK_OK  (rooms, things)

  If a room or object is LINK_OK, anyone can link exits to it (but 
  still not from it). Also, LINK_OK overrides the INHERIT protection
  against @trigger (although not @force or @set). This also allows 
  others to @parent their objects to the thing set LINK_OK.

See @link, INHERIT, @parent, PARENTS
& MONITOR
  Flag:  MONITOR  (players)
  
  When set on a player, this flag notifies that player when anyone connects
  to or disconnects from the MUSH. It is valid only for players, and must be
  set by a wizard (although royalty may set themselves MONITOR).

  Flag:  MONITOR  (things, rooms)
 
  When set on a thing or room, this flag activates the ^ listen patterns on
  the object. Objects which have ^ listen patterns but are not set MONITOR
  do not check those patterns, although they are flagged on a @sweep as
  listening.
& MORTAL
  The MORTAL flag is no longer available in PennMUSH. Please see help
  changes for more information.
& MYOPIC
  Flag:  MYOPIC  (players)

  Myopic is a flag which suppresses the printing of an object's dbref
  number and abbreviated list of flags when it is looked at. It makes
  the world appear like you don't control any of it, even if you're a
  wizard or royalty. It's useful if you don't like to see object numbers.
  This flag is only valid for players; objects belonging to MYOPIC
  players are automatically considered to be MYOPIC.

See also: DBREF
& NO_COMMAND
  Flag:  NO_COMMAND  (all types)
  
  The NO_COMMAND flag disables the checking of $-commands on an object.
  Most MUSHes will be configured to automatically set this flag on rooms
  and players. The server runs faster when fewer objects are checked for
  $-commands; thus, any object which does not have $-commands on it should
  be set NO_COMMAND. Many MUSHes choose to have all objects initially set
  NO_COMMAND at creation.

See also: USER-DEFINED COMMANDS
& NO_LEAVE
& NOLEAVE
  Flag: NO_LEAVE (objects)
  
  When this flag is set on an object, players can not "leave" it. 
  Attempts to leave the object will trigger its @LFAIL, @OLFAIL,
  and @ALFAIL, if set.

See also: leave
& NO_TEL
  Flag:  NO_TEL  (rooms)

  The NO_TEL flag prevents objects in a room from being @teleported;
  mortals in the room cannot use @teleport, nor can other objects 
  @teleport them out. This flag is checked on the "absolute room" of an
  object; thus, if you are in a container in a room which is NO_TEL,
  you cannot use @teleport from that container. There is no way to
  get out of a NO_TEL room except by exiting in some "normal" manner,
  or by going "home". Puzzle rooms, prisons, and similar locations would
  probably benefit from this flag.
& NO_WARN
& NOWARN
  Flag: NO_WARN  (all types)

  This flag is enabled with the MUSH building warning system.

  When this flag is set on an object, its owner will not receive
  any building warnings from that object. When it is set on a player,
  that player will not receive any building warnings at all.

  See also 'help warnings', 'help @warnings', and 'help @wcheck'

& NOSPOOF
  Flag: NOSPOOF  (players)

  If a player is set NOSPOOF, @emits of all sorts will be tagged with the
  name of the person/object making them. This prevents spoofing and lets
  you see where such messages originated. Objects belonging to NOSPOOF 
  players are automatically considered NOSPOOF. 
  
  Note that NOSPOOF output can be spammy and that the output format of
  NOSPOOF can mess up @listen and ^ patterns, giving unexpected results.

  Sample output:
    @set me=nospoof
    > Flag set.
    @pemit me=Testing
    > [Cyclonus->Cyclonus] Testing

See SPOOFING, @emit, @pemit, @remit, and @oemit.
& ON-VACATION
  Flag: ON-VACATION (players)

  This flag may be used by the MUSH to allow players to indicate when 
  they have left for vacation, to prevent themselves from being purged
  for inactivity. It is automatically cleared whenever a player logs in,
  so players should @set it just prior to leaving the net.
& OPAQUE
  Flag:  OPAQUE  (all types)

  When set on yourself, it prevents other players from 
  seeing what you are carrying in your inventory. This applies to
  everyone and everything, even wizards and royalty, or to stuff
  that you own. It works the same way on objects.

  When set on an exit in a TRANSPARENT room, the exit is displayed
  as if the room weren't TRANSPARENT.

  Meaningless for rooms.

See also: TRANSPARENT, look
& PLAYER
  Flag:  PLAYER  (player)

  The PLAYER flag identifies you as a player. This flag cannot
  be reset by any player, not even a Wizard (although the @toad command
  changes a player to an object). It is used mainly by hardcode to 
  identify your commands, check for validity of commands or locks, etc.
  You can just pretend it isn't there. 
& PUPPET
  Flag:  PUPPET  (things)
  
  Setting this flag on a thing turns it into a sort of extension of its
  owner, making it grow eyes and ears. It then relays everything sees
  and hears back to its owner.

See: @force, PUPPETS
& QUIET
  Flag:  QUIET  (all types)

  This flag when set on yourself prevents you from hearing 
  the 'set' or 'triggered' messages from any objects you own.  When 
  set on an object, only that object will not relay its messages.
& ROOM
  Flag:  ROOM  (rooms)

  This flag is automatically set on rooms when you @dig a new
  room. It cannot be changed.
& ROYALTY
  Flag:  ROYALTY  (all types)

  If this flag is set on any type of object, then that object will
  be able to @tel and examine as if it was a wizard. Royalty players
  do not need money, nor are they affected by quotas or restricted
  building. Royalty is not able to change things like a wizard could. 
  Only wizards may set it on players, although players who are ROYALTY
  may set their objects ROYALTY.
& SAFE
  Flag:  SAFE  (all types)

  The SAFE flag protects objects from destruction. If the REALLY_SAFE
  option was set when the MUSH was compiled (see @config), the only
  way to destroy an object set SAFE is to explicitly reset the SAFE
  flag and then @dest it. If the REALLY_SAFE option is not set,
  @destroy/override (or @nuke) will override the SAFE flag and destroy
  the object.
& STARTUP
  Flag:  STARTUP  (all types)

  This flag is automatically set or reset when you set or clear the
  STARTUP attribute on something. Players may not set this flag.
  The presence of this flag just shows that an object has a STARTUP
  attribute on it.

See also: @startup
& STICKY
  Flag:  STICKY  (all types)

  If a thing is STICKY, it goes home when dropped (See HOMES).
  It also goes home when an object carrying it teleports or goes home.
  If a room is STICKY, its drop-to is delayed until the last person leaves 
  (See DROP-TOs). This flag is only meaningful for things and rooms.  
& SUSPECT
  Flag:  SUSPECT  (players)

  This flag is only settable by wizards. Players with this flag have
  their connects, disconnects, name changes, and kills reported to
  all connected wizards. All their actions are also logged to the MUSH
  log files.
& TEMPLE
  The TEMPLE flag is no longer available in PennMUSH. Please see help
  changes for more information.
& TERSE
  Flag:  TERSE  (players)

  When an object is set TERSE, it does not see the descriptions or
  success/failure messages in rooms. This is a useful flag if you're
  on a slow connection or you're moving through a familiar area and
  don't want to see tons of text. This flag is only valid for players;
  objects belonging to TERSE players are automatically considered to
  be TERSE.
& TRANSPARENT
  Flag:  TRANSPARENT  (all types)

  If this flag is set on a room, it will display exits in "long" format.
  Instead of putting all the exits on one line under "Obvious exits:"
  it prints each exit on a line by itself, in the format:
  <Exit Name> leads to <Exit Destination>.
  Thus, you might have:
     Obvious exits:
     South leads to Joe's Room.
     East leads to City Park.
  instead of
     Obvious exits:
     South  East

  Exits set OPAQUE are still shown in the short format, so you can mix
  the two.

(continued in help transparent2)
& TRANSPARENT2

  If this flag is set on an exit, when a player looks at the exit they
  will see the description and contents of the destination room following
  the exit's description.  The exit list and succ/fail messages of the
  room will NOT be displayed. See also CLOUDY.

See also: CLOUDY, OPAQUE, EXITS, @exitformat
& UNFINDABLE
  Flag:  UNFINDABLE  (all types)
  
  If a player is set UNFINDABLE, he cannot be found by the @whereis 
  command. You also cannot use loc(), locate(), and similar functions
  to find his location.
  
  If a room is set UNFINDABLE, you cannot locate any of its contents
  via any means (@whereis, the loc() function, etc.)
  
  If a wizard is set UNFINDABLE, and he is idle past the allowable 
  maximum idle time, he will be set DARK automatically.
& UNINSPECTED 
  Flag: UNINSPECTED (rooms)

  This flag may be used by the MUSH to indicate rooms which have not been
  inspected by the Building Council, Administration, etc.
& UNREGISTERED
  Flag: UNREGISTERED (players)
  
  This flag may be used by the MUSH to support on-line registration.
  The only restriction on UNREGISTERED players is that they may not
  be granted @powers.
& VERBOSE
  Flag:  VERBOSE  (all types)

  An object set VERBOSE echoes the commands it executes to its owner
  before executing them. This differs from the PUPPET flag in that the
  owner sees the command itself, rather than the output from the command.
  This flag is extremely useful in debugging, especially if used in
  conjunction with the PUPPET flag. VERBOSE output follows the format
  "#<object>] <command>". Something like "#1300] @trigger me/test" is a
  good example of typical VERBOSE output.

See also: PUPPET, DEBUG
& VISUAL 
  Flag:  VISUAL  (all types)

  When this flag is set on an object, it allows any other player to
  examine it and see all the object's attributes as if they owned it.
  It does not enable them to make changes to the object. Very useful
  for getting help with code.

See also: examine, brief
& WIZARD
  Flag:  WIZARD    (all types)

  If a person is WIZARD, they are a wizard, unkillable, 
  subject to fewer restrictions, and able to use wizard commands.  
  In general, WIZARDs can do anything using #<number> or *<player>. 
  Only player #1 can set and unset the WIZARD flag of other players. 
  No WIZARD can turn their own WIZARD flag off.

  Other objects may also be set WIZARD, and they then have all the 
  powers of a Wizard except that they cannot @nuke/@toad players.
  Only Wizards may set the WIZARD flag on objects.

See also: ROYALTY, @power
& Z_TEL
  Flag:  Z_TEL  (all types)

  The Z_TEL flag, when set on a zoned room or on the ZMO of a room, 
  prevents objects in the room from being @teleported out of the
  zone - that is, objects can only be @teleported to a room which
  is zoned to the same ZMO. Setting this flag on the ZMO affects all
  rooms zoned to it. Like NO_TEL, the "home" command will still work.
  This flag is intended for use in puzzle rooms and IC areas.

See also: ZONES, ZONE MASTERS, @chzone, ZONE MASTER ROOMS
& ZONE
  Flag:  ZONE   (players) 

  The ZONE flag is used to designate a player as a Zone Master.
  Objects owned by a Zone Master are controlled by anyone who passes the 
  player's zone lock.  This allows zoning based on ownership rather than 
  on the zone field and is more secure, although it does not allow for 
  the "local globals" ability of standard zones.

See also: ZONES, ZONE MASTERS, @chzone, ZONE MASTER ROOMS
& FUNCTIONS
  Functions are specialized commands used to manipulate strings and
  other input. Function take the general form:  [FUNCTION(<input>)]
    
  The brackets are used to delimit and force evaluation of the function 
  (or nested functions). The brackets can also be used to group functions 
  for the purposes of string concatenation. In general, more than one pair 
  of brackets is not required, but liberal use of them makes code easier to 
  read. You can nest an arbitrary number of brackets.

  Examples:
      > say [first(rest(This is a nice day))]
      You say, "is"
      > @va me=This is a 
      Wizard - Set.
      > @vb me=nice day
      Wizard - Set.
      > say [first([rest([v(va)] [v(vb)])])]
      You say, "is"
  
  See "help FUNCTIONS2" for more.
 
& FUNCTIONS2
  
  A list of available built-in functions can be obtained via the command
  "@config/functions". In the help text, the list is under the topic
  "FUNCTION LIST".
  
  In addition to these built-in functions are MUSH-defined "global user
  functions."  These are defined by wizards or those with the "Function"
  power, via the "@function" command. To the user, they act just like
  the built-in game functions. For details on global user functions,
  see "help @function".
  
See also: MUSHCODE
& FUNCTION LIST
 
  Several major variants of functions are available. The help topics
  are listed below, together with a quick summary of the function type
  and some examples of that type of function.
 
  Attribute functions: attribute-related manipulations (GET, UFUN)
  Boolean functions:  produce 0 or 1 (false or true) answers  (OR, AND)
  Dbref functions: return dbref info related to objects (LOC, LEXITS)
  Floating point functions: floating point math (SIN, ROUND)
  Global functions: local MUSH-specific functions defined with @function
  Information functions:  find out something about objects (FLAGS, MONEY)
  List functions:  manipulate lists (REVWORDS, FIRST)
  Math functions:  number manipulation, generic or integers only (ADD, DIV)
  String functions:  string manipulation (ESCAPE, FLIP)
  Utility functions: general utilties (TIME, COMP)
  
  The command "@config/functions" lists all of the game's built-in functions.
  The command "@function" lists all of the game's global functions.
  
& Attribute functions
  All these functions access attributes on an object.
  
  aposs()       default()     edefault()    eval()        filter()
  fold()        foreach()     get()         grep()        grepi()
  lattr()       obj()         poss()        subj()        udefault()
  ufun()        ulocal()      v-function    xget()        zfun()

See also: ATTRIBUTES, NON-STANDARD ATTRIBUTES
& Boolean functions
  Boolean functions all return 0 or 1 as an answer.
  Your MUSH may be configured to use traditional PennMUSH booleans,
  in which case non-zero numbers, non-negative db#'s, and strings
  are all considered "true" when passed to these functions.
  Alternatively, your MUSH may be using TinyMUSH 2.2 booleans,
  in which case only non-zero numbers are "true".
  
  and()         cand()        cor()         eq()          gt()
  gte()         lt()          lte()         neq()         not()
  or()          t()           xor()
    
See also: BOOLEAN VALUES, @config
& Dbref functions
  Dbref functions return a dbref or list of dbrefs related to some value
  on an object.
  
  con()         entrances()   followers()   home()        lcon()        
  lexits()      loc()         locate()      lparent()     lsearch()     
  next()        num()         owner()       parent()      pmatch()      
  rloc()        rnum()        room()        where()       zone()
  
See also: DBREF
& Information functions
  Information functions return values related to objects.
 
  andflags()    channels()    conn()        controls()    ctime()
  cwho()        doing()       elock()       findable()    flags()       
  folderstats() fullname()    hasattr()     hasattrp()    hasflag()     
  haspower()    hastype()     hidden()      idle()        lock()        
  lstats()      lwho()        mail()        mailfrom()    mailstatus()  
  mailtime()    money()       mtime()       mwho()        name()        
  nearby()      objmem()      orflags()     playermem()   poll()
  ports()       powers()      quota()       type()        visible()
  
& Floating point functions
  Floating point functions operate on floating point numbers. Most of
  them return a floating-point number as a result. Floating point
  results can have at most 6 decimal places of precision.
 
  These functions only exist if floating point computation is enabled.
  Check "@config" to see if they are.
 
  acos()        asin()        atan()        ceil()        cos()
  e()           exp()         fdiv()        floor()       log()
  ln()          pi()          power()       round()       sin()
  sqrt()        tan()
 
& List functions
  List functions take at least one space-separated list of words and 
  return transformed lists or one or more members of those lists. Many
  of these functions also take an arbitrary separator; if none is 
  provided, a space is used.
  
  after()       before()      element()     elements()    extract()
  first()       grab()        graball()     index()       insert()
  items()       iter()        last()        map()         match()
  matchall()    member()      mix()         munge()       remove()
  replace()     rest()        revwords()    setdiff()     setinter()
  setunion()    shuffle()     sort()        sortby()      splice()
  wordpos()     words()

    
See also: LISTS
& Math functions
  Math functions take one or more numbers and return a numeric value.
  These functions can taken both integers and floating point numbers:
  add()         max()         min()         mul()         sign() 
  sub()         trunc()       val()
 
  These functions operate only on integers (if passed floating point
  numbers, an error will be reported):
  abs()         dec()         dist2d()      dist3d()      div()
  mod()         inc()         shl()         shr()

  These functions operate only with floating point numbers:
  acos()        asin()        atan()        ceil()        cos()
  e()           exp()         fdiv()        floor()       ln()
  log()         pi()          power()       round()       sin()
  sqrt()        tan()

  These functions operate on n-dimensional vectors. A vector
  is a delimiter-separated list of numbers (space-separated, by default):
  vadd()        vdim()        vdot()        vmag()        vmul()
  vsub()        vunit()
& String functions
  String functions take at least one string and return a transformed
  string, parts of a string, or a value related to the string(s).
  
  alphamin()    alphamax()    art()         capstr()      cat()
  center()      comp()        decrypt()     delete()      edit()
  encrypt()     escape()      if()          ifelse()      lcstr()
  left()        lit()         ljust()       merge()       mid()
  pos()         repeat()      reverse()     right()       rjust()
  scramble()    secure()      space()       squish()      strcat()
  stripansi()   strlen()      switch()      trim()        ucstr()
 
See also: STRINGS
& Utility functions
  These functions don't quite fit into any other category.
  
  ansi()        atrlock()     beep()        cemit()       convsecs()
  convtime()    clone()       create()      die()         dig()
  emit()        functions()   isdaylight()  isdbref()     isnum()       
  isword()      lemit()       link()        lnum()        mudname()     
  objeval()     oemit()       open()        pemit()       r-function    
  rand()        remit()       s-function    secs()        set()         
  setq()        setr()        soundex()     soundslike()  starttime()
  tel()         time()        timestring()  valid()       version()
  wipe()        zemit()

& ABS()
  abs(<number>)
 
  Returns the absolute value of a number. i.e. ABS(-4) returns 4;
  ABS(2) returns 2, etc.
& ACOS()
  acos(<number>)
 
  Returns the arc-cosine of <number>, expressed in radians.
& ADD()
  add(<number>,<number>)

  Returns the sum of two numbers. It operates on integers and floats.
& AFTER()
  after(<string1>, <string2>)

  Returns the portion of <string1> that occurs after <string2>.
  If <string2> isn't in <string1>, the function returns a null string.
 
  Examples:
   > think after(foo bar baz,bar)
    baz
   > think after(foo bar baz,ba)
   r baz

& ALPHAMAX()
  alphamax(<word1>, <word2>, <word3>, ...)

  Takes up to ten word arguments, and returns the word which is
  lexicographically biggest. I.e., which word would be last in 
  alphabetical order.

& ALPHAMIN()
  alphamin(<word1>, <word2>, <word3>, ...)

  Takes up to ten word arguments, and returns the word which is
  lexicographically smallest: the word that would be first in
  alphabetical order.

& AND()
& CAND()
  and(<boolean value 1>,<boolean value 2>[, ... , <boolean value N>])
  cand(<boolean value 1>,<boolean value 2>[, ... , <boolean value N>])
 
  Takes boolean values, and returns 1 if all of them are equivalent
  to true(1).  and() always evaluates all arguments (including side
  effects), while cand() stops evaluation after the first argument
  that evaluates to false.

See also:  BOOLEAN VALUES, or()
& ANDFLAGS()
  andflags(<object>,<list of flags>)

  This function returns 1 if <object> has all the flags in a specified
  list, and 0 if it does not. The list is specified with a single letter
  standing for each flag, like the output of the FLAGS() function. A '!'
  preceding a flag letter means "not flag".
  
  Thus, ANDFLAGS(me,WD) would return 1 if I was set WIZARD and DARK.
  ANDFLAGS(me,W!Dc) would return 1 if I was set WIZARD, not DARK,
  and CONNECTED.
  
  If a letter does not correspond to any flag, <object> doesn't have
  it, so the function returns 0. There can be an arbitrary number of
  flags. Do not put spaces between flag letters.
& ANSI()
  ansi(<codes>,<string>)
 
  This allows you to highlight a string using ANSI terminal effects. The
  string is terminated with a "return to normal" code, and the codes are
  utilized in the order they are specified. The codes are:
 
        f - flash                       i - inverse
        h - hilite                      n - normal
        u - underscore
 
        x - black foreground            X - black background
        r - red foreground              R - red background
        g - green foreground            G - green background
        y - yellow foreground           Y - yellow background
        b - blue foreground             B - blue background
        m - magenta foreground          M - magenta background
        c - cyan foreground             C - cyan background
        w - white foreground            W - white background
 
  For example, "ansi(fc, Test)" would hilight "Test" in flashing cyan.
 
See also: ANSI, COLOR, FORCE_WHITE
& APOSS()
  poss(<object>

  Returns the absolute possessive pronoun - his/hers/its/theirs -
  for an object.
& ART()
  art(<string>)

  This function returns the proper article, "a" or "an", based on whether
  or not <string> begins with a vowel.
& ASIN()
  asin(<number>)
 
  Returns the arc-sine of <number>, expressed in radians.
& ATAN()
  atan(<number>)
 
  Returns the arc-tangent of <number>, expressed in radians.
& ATRLOCK()
  atrlock(<object>/<attrib>[, <on|off>])

  When given a single object/attribute pair as an argument, returns 1
  if the attribute is locked, 0 if unlocked, and #-1 if the attribute
  doesn't exist or can't be read by the function's caller.

  When given a second argument of "on" (or "off"), attempts to lock
  (unlock) the specified attribute, as per @atrlock.

& BEEP()
  beep([<number>])
 
  Sends <number> "alert" bell characters. <number> must be in the range
  1 to 5, or, if unspecified, defaults to 1.
  This function may only be used by wizards. 
 
& BEFORE()
  before(<string1>, <string2>)
 
  Returns the portion of <string1> that occurs before <string2>.
  If <string2> isn't in <string1>, <string1> is returned.
 
  Examples:
   > think before(foo bar baz,bar)
   foo
   > think before(foo bar baz,r)
   foo ba
 
& CAPSTR()
  capstr(<string>)
  
  Returns <string> with the first character capitalized.
  Example: capstr(foo bar baz) returns "Foo bar baz"
& CAT()
  cat(<string1>,<string2>[,<string3>,<string4>,...])

  cat() concatenates strings, separating each string by a space.
  So "[cat(one, two)]" will return 'one two'.
& CEIL()
  ceil(<number>)
 
  Returns the least integral value greater than or equal to <number>.
& CEMIT()
  cemit(<channel>, <message>)

  Sends a message to all players listening to the given chat channel.
  See help @cemit for details.
& CENTER()
  center(<string>,<width>[,<fill>])
 
  This function will center <string> within a field <width> characters wide,
  using <fill> characters for padding on either end of the string for
  centering. If <fill> is not specified, a space will be used.
 
  Example:
    > say center(X,5,-)
    You say, "--X--"
    > say center(.NEAT.,15)
    You say, "    .NEAT.      "
& CHANNELS()
  channels()
  channels(<object>)

  With no arguments, channels() returns the list of all channel names
  which are visible to the player. With an argument, returns the list
  of channel names to which the object is listening.
& CLONE()
  clone(<object>)
 
  This function clones <object>, and returns the dbref number of the clone.
 
  This is a side-effect function and may not be enabled on some MUSHes.
& COMP()
  comp(<string1>, <string2>)
 
  Comp compares two strings.  It returns 0 if they are the same, -1 if
  string1 alphabetically precedes string2, and 1 otherwise.
 
  Note that this is a lexicographic comparison that does not work well 
  with numbers.  For example, 100 is lexicographically lower than 99. 
  Instead, consider:  if(lt(<value1>, <value2>), -1, 1)
& CON()
  con(<object>)
 
  Con returns the first object in the list of objects carried by 
  thing. Just the first, and only the first. 
 
See also: next()
& CONN()
  conn(<player name>)
 
  This function returns the number of seconds a player has been connected.
  <player name> must be the full name of a player, or a player's dbref.
  Players who are not connected have a conn value of "-1", as do dark
  wizards, when conn() is used on them by a non-priv'ed player.
 
See also: CONNECTED
& CONTROLS()
  controls(<object>,<victim>)
  
  This function returns 1 if <object> controls <victim>, or 0, if
  it does not. If one of the objects does not exist, it will return
  #-1 ARGN NOT FOUND (where N is the argument which is the invalid
  object). You must control <object> to use this function.

See also: CONTROL
  
& CONVSECS()
  convsecs(<seconds>)
 
  This function converts seconds to a time string, based on how many
  seconds the number is after Jan 1, 1970.
 
  Example:
  > say [secs()]
  You say, "709395750"
  > say [convsecs(709395750)]
  You say, "Wed Jun 24 10:22:54 1992"
 
See also: convtime(), time()
& CONVTIME()
  convtime(<time string>)
 
  This functions converts a time string to the number of seconds since 
  Jan 1, 1970. A time string is of the format: Ddd MMM DD HH:MM:SS YYYY
  where Ddd is the day of the week, MMM is the month, DD is the day
  of the month, HH is the hour in 24-hour time, MM is the minutes,
  SS is the seconds, and YYYY is the year.
  If you supply an incorrectly formatted string, it will return -1.
 
  Example:
  > say [time()]
  You say, "Wed Jun 24 10:22:54 1992"
  > say [convtime(Wed Jun 24 10:22:54 1992)]
  You say, "709395774"

See also: convsecs(), time()
& COS()
  cos(<number>)
 
  Returns the cosine of <number>, which should be expressed in radians.
& CREATE()
  create(<object>, <cost>)
 
  This function creates an object with name <object> for <cost> pennies,
  and returns the dbref number of the created object.

  This is a side-effect function and may not be enabled on some MUSHes.
& CTIME()
  ctime(<object>)
 
  If creation times are enabled, this function will return the 
  date and time that the object was created, if the player is
  able to examine the object.
& CWHO()
  cwho(<channel>)
 
  This returns a list of connected dbrefs who are on <channel>. 
  When used by mortals, hidden/DARK players do not appear on the list.
& DEC()
  dec(<integer>)
  dec(<string-ending-in-integer>)

  Dec returns the integer minus 1. If given a string that ends in an integer,
  it decrements only the final integer portion. That is:

  > think dec(3)
  2
  > think dec(hi3)
  hi2
  > think dec(1.3.3)
  1.3.2
  > think dec(1.3)
  1.2

  Note especially the last example, which will trip you up if you use
  floating point numbers with dec() and expect it to work like sub().
  See also: inc()
& DECRYPT()
  decrypt(<string>, <password>)

  Decrypts a string encrypted with the encrypt() function, if given
  the string and the same password.

  This function may not be available on MUSHes outside the U.S.
& DEFAULT()
  Function:  default(<obj>/<attr>,<default case>)
 
  This function returns the value of <obj>/<attr>, as if retrieved via
  the get() function, if the attribute exists and is readable by you.
  Otherwise, it evaluates the default case, and returns that.
  Note that the default case is only evaluated if the attribute does
  not exist or cannot be read.
 
  This is useful for code that needs to return the value of an attribute,
  or an error message or default case, if that attribute does not exist.
 
  Examples:
    > &TEST me=apple orange banana
    > say default(me/Test, No fruits!)
    You say "apple orange banana"
    > &TEST ME
    > say default(me/Test, No fruits!)
    You say "No fruits!"
 
  See also:  get(), eval(), ufun(), edefault(), udefault().
 
& DELETE()
  delete(<string>, <first>, <len>)
 
  Return a modified <string>, with <len> characters starting after the
  character at position <first> deleted. In other words, it copies <first>
  characters, skips <len> characters>, and then copies the remainder of
  the string.
 
  Example:
    > say [delete(abcdefgh, 3, 2)]
    You say, "abcfgh"
 
& DIE()
  die(<number of times to roll die>, <number of sides on die>)
 
  This function simulates rolling dice. It "rolls" a die with a given
  number of sides, a certain number of times, and sums the results.
  For example, DIE(2, 6) would roll "2d6" - two six-sided dice,
  generating a result in the range 2-12.
& DIG()
  dig(<name>, <exit to>, <exit from>)
 
  This function digs a room called <name>, and then opens and links
  <exit to> and <exit from>, like the normal @dig command. It returns
  the dbref number of the new room.

  This is a side-effect function and may not be enabled on some MUSHes.
& DIST2D()
  dist2d(x1, y1, x2, y2)

  Returns the distance between two points in the Cartesian
  plane that have coordinates (x1, y1) and (x2, y2). Coordinates must
  be integers, but dist2d can return a floating point number.
& DIST3D()
  dist3d(x1, y1, z1, x2, y2, z2)

  Returns the distance between two points in space, with
  coordinates (x1, y1, z1) and (x2, y2, z2). All coordinates must
  be integers, but dist3d can return a floating point number.
& DIV()
  div(<number>,<number>)
 
  Div returns the integer quotient of the first number divided by
  the second number.  See MOD.
& DOING()
  doing(<player>)

  Given the name of a connected player, returns that player's @doing
  string if they can be seen on the WHO list.

See also: @poll, @doing, poll()
& E()
  e()
 
  Returns the value of "e"  (2.718281).
& EDEFAULT()
  Function:  edefault(<obj>/<attr>,<default case>)
 
  This function returns the evaluated value of <obj>/<attr>, as if
  retrieved via the get_eval() function, if the attribute exists and
  is readable by you. Otherwise, it evaluates the default case, and
  returns that. The default case is only evaluated if the attribute
  does not exist or cannot be read.
 
  Example:
    > &TEST me=You have lost [rand(10)] marbles.
    > say edefault(me/Test,You have no marbles.)
    You say "You have lost 6 marbles."
    > &TEST me
    > say edefault(me/Test,You have no marbles.)
    You say "You have no marbles."
  
  See also:  get(), eval(), ufun(), default(), udefault().
 
& EDIT()
  edit(<string>, <search>, <replace>)
  edit(<string>, $, <string to append>)
  edit(<string>, ^, <string to prepend>)
 
  This functions in a similar way to the @edit command; instead of
  taking an attribute from an object, it takes an arbitrary string.
  The first form of the function searches <string> for <search> and
  replaces it with <replace>; the other two forms append and prepend
  text to <string>, respectively.
  
  See also "help @edit".
& ELEMENT()
  element(<list>,<item>,<single-character separator>)
  
  This returns the position of <item> in <list>, where <list>'s items
  are separated by <separator>. A wildcard match is done, so this 
  function behaves much like MATCH().
  
  Example:
    > say [element(this|is|a|test|string,is,|)]
    You say, "2"
& ELEMENTS()
  elements(<list of words>,<list of numbers>[,<delim>])
 
  This function returns the words in <list of words> that are in the
  positions specified by <list of numbers>. Optionally, a list delimiter
  other than a space can be separated.
 
  Examples:
    > say elements(Foo Ack Beep Moo Zot,2 4)
    You say "Ack Moo"
    > say elements(Foof|Ack|Beep|Moo,3 1,|)
    You say "Beep|Foof"

& ELOCK()
  elock(<object>[/<locktype>], <victim>)

  elock() returns 1 if the <victim> would pass the lock on <object>,
  and 0 if it would fail. You do not need to control either object.
  
  You can also provide a switch after <object> if you wish to check
  something other than the basic lock. This can be used to test
  user-defined locks. elock() can take as many switches as @lock.

  For example:
      @lock/drop Dancing Slippers=#0
      think elock(Dancing Slippers/drop, Princess)
      > 0
  
See also: @lock, locktypes
& EMIT()
  emit(<message>)

  Sends a message to the room, as per @emit.

& ENCRYPT()
  encrypt(<string>, <password>) 

  Returns an encrypted string produced by a simple password-based
  encrypted algorithm. Good passwords are long passwords.
  This is not high-security encryption.  See also decrypt().

  This function may not be available on MUSHes outside the U.S.
& ENTRANCES()
  entrances([<object> [,<type> [,<begin> [,<end>]]]])

  With no arguments, the entrances() function returns a list of all
  exits, things, players, and rooms linked to your location, like
  @entrances. You can specify an object other than your current location
  with <object>. You can limit the type of objects found by specifying
  <type> as follows:
        a        all (default)
        e        exits
        t        things
        p        players
        r        rooms
  You can also limit the range of the dbrefs searched by giving <begin>
  and <end>.

  This function is computationally expensive and costs the same as
  @find. You must control the object in order to perform entrances()
  on it.         
& EQ()
  [eq(<integer1>,<integer2>)]

  Takes two integers, and returns 1 if they are equal, 0 otherwise.
  Will not work with characters.
  
See also: neq(), match()
& ESCAPE()
  escape(<string>)
 
  The ESCAPE() function "escapes out" potentially "dangerous" characters,
  preventing function evaluation in the next pass of the parser. It 
  returns <string> after adding the escape character ('\') at the 
  beginning of the string, and before the following characters:
  %  ;  [  ]  {  }  \
  
  This function prevents strings entered by players from causing side 
  effects, such as performing an unintended GET() of an attribute. It
  is only needed when the resulting string will be passed through @force
  or used as an attribute for an object (like the description of a mail
  message object).  Since the function preserves the original string, 
  it is, in most cases, a better choice than SECURE().
  
& EVAL()
& GET_EVAL()
  eval(<object>, <attribute>)
  get_eval(<object>/<attribute>)
 
  Eval() works the same way as xget(), except that it performs substitution
  on the attribute before returning the value. 
    Example:
      &TEST me=%B%B%B-[name(me)]
      think xget(me,test)
      > %B%B%B-[name(me)]
      think eval(me,test)
      >    -Shalott

  Get_eval() does the same thing, except it uses the format of get() instead
  of xget() -- using a slash rather than a comma to separate the object from
  the attribute. It is included for TinyMUSH 2.x compatibility. Eval() and
  xget() are *slightly* faster than their counterparts which use the slash.
  
See also: get(), xget()
& EXIT()
  exit(<object>)

  Exit returns the first exit on the list of exits in the object.
  Dark exits are not listed.  You can see the remaining exits in 
  the room by using the function next(). 

See also: next()
& EXP()
  exp(<number>)
 
  Returns e to the power of <number>.
& EXTRACT()
  extract(<string>,<first>,<length>[,<delimiter>])

  Extract returns a string of length words, starting with the first 
  word. Unlike letters, the first word in a string is number 1, 
  instead of 0.

  A word is assumed to be defined as a string beginning and ending 
  with a space, or a string w/o any interior spaces.

  For example:
    think extract(This is a test string,3,2)
    > a test

See also: index()
& FDIV()
  fdiv(<numerator>,<denominator>)
 
  Returns the quotient of the two numbers. Note that the DIV() and MOD()
  functions cannot be used on floating point numbers.
& FILTER()
  filter([<obj>/]<attr>, <list>[,<delimiter>])
  
  This function returns the elements of <list> for which a user-defined
  function evaluates to "1". That function is specified by the first
  argument (just as with the ufun() function), and the element of the 
  list being tested is passed to that user-defined function as %0.
  
  Thus, "filter(obj/attr, x1 x2 x3)" is equivalent to
  "iter(x1 x2 x3, switch(ufun(obj/attr, ##),1,##,))"
  
  Example:
  
    > &IS_ODD test=[mod(%0,2)]
    > say [filter(test/is_odd, 1 2 3 4 5 6)]
    You say, "1 3 5"
& FINDABLE()
  findable(<object>,<victim>)
 
  This function returns 1 if <object> can locate <victim>, or 0, if
  it cannot. If one of the objects does not exist, it will return
  #-1 ARGN NOT FOUND (where N is the argument which is the invalid
  object).
 
& FIRST()
  first(<string>[,<delimiter>])

  Returns the first word of a string, that is, everything to the left
  of the first space in the string, or the entire string if there are
  no spaces in the string.  See REST.
& FLAGS()
  flags(<object>)

  Flags returns a string consisting of the flags attached to the 
  object. The string is, however, just one word.
& FLIP()
& REVERSE()
  flip(<string>)
  reverse(<string>)

  This function reverses a string. For example, "flip(foo bar baz)"
  returns "zab rab oof".
& FLOOR()
  floor(<number>)
 
  Returns the greatest integral value less than or equal to <number>.
& FOLD()
  fold([<obj>/]<attr>, <list>[, <base case>][,<delimiter>])
  
  This function "folds" a list through a user-defined function, specified
  by the first argument to fold(), which is analogous to ufun()'s first
  argument.
  
  If no base case is provided, fold() passes the first element of <list>
  as %0, and the second element of <list> as %1, to the user-defined
  function. The user-defined function is then called again, with the
  result of the first evaluation being %0, and the next (third) element
  of the list as %1. This is repeated until all the elements of the 
  list have been used.
  
  If a base case is provided, it is passed as %0, and the first element
  of list is passed as %1, to the user-defined function. The process for
  the no-base-case fold() is then used.
  
  See 'help FOLD2' for examples.
 
& FOLD2
 
  Examples:
  
    > &REP_NUM test=%0[repeat(%1,%1)]
    > say [fold(test/rep_num,1 2 3 4 5)]
    You say, "122333444455555"
    > say [fold(test/rep_num,1 2 3 4 5,List:)]
    You say, "List:122333444455555"
  
    > &ADD_NUMS test=add(%0,%1)
    > say [fold(test/add_nums,1 2 3 4 5)]
    You say, "15"
& FOLDERSTATS()
  folderstats()
  folderstats(folder#)
  folderstats(player)
  folderstats(player,folder#)

  FOLDERSTATS() returns the number of read, unread, and cleared messages
  in a specific folder, or, if none is given, the player's current
  folder. Only Wizards may use forms which get other players' mail
  information.
& FOLLOWERS()
  followers(<object>)

  Returns the list of things and players following object. You must
  control object.
& FOREACH()
  foreach([<object>/]<attribute>,<string>)
 
  Maps a function onto a string.
 
  Each character in <string> has the user-defined function of the first
  argument performed on it; the character is passed to the function as
  %0. The results are concatenated.
 
  Examples:
 
    > &add_one me=[add(%0,1)]
    > say [foreach(add_one, 54321)]
    You say, "65432"
 
    > &is_alphanum me=[or(isword(%0),isnum(%0))]%b
    > say [foreach(is_alphanum,jt1o+)]
    You say, "1 1 1 1 0 "
 
& FULLNAME()
  fullname(<object>)

  Fullname() returns the name of object <object>. It is identical to
  name() except that for exits, fullname() returns the complete
  exit name, including all aliases.
  
  >"[fullname(south)]
  You say, "South;sout;sou;so;s"

  Related functions: NAME()
& GET()
  get(<object>/<attribute>)

  The get function will be replaced by the string stored in the
  attribute of the object. You may get the attributes of objects you
  control, the attributes you control on other objects, and publicly
  accessible attributes.
  
& GRAB()
  grab(<list>, <pattern>[, <delimiter>])
  
  This function returns the first word in list which matches the pattern.
  The pattern is specified as in match(); i.e., it can contain wildcards.
  
  Basically, this is a much more efficient way to do:
  extract(list, match(list, pattern, delimiter), 1)
 
& GRABALL()
  Function: graball(<string>,<pattern>[,<delim>])
  
  This function works identically to the grab() function, save that it
  returns all matches, not just the first: It returns all words in the
  list <string> which match <pattern>. If none match, an empty string
  is returned.
  
  Examples:

  > say graball(This is a test of a test,test)
  You say "test test"
  > say graball(This is testing a test,tes*)
  You say "testing test"
  
  See also: match(), matchall(), grab().
  
& GREP()
  grep(<object>,<attrs>,<pattern>)
  
  This function returns a list of attributes on <object> containing
  <pattern>.  <attrs> is a wildcard pattern for attribute names to
  search; if you want to search all attributes, use "*".
  
  The list returned is similar to that returned by
  @grep/list <object>/<attrs>=<pattern>
  
  Parsing _does_ occur before this function is invoked. Therefore,
  "special" characters will need to be escaped out.  <pattern> is
  NOT wildcard matched.

  This function is case-sensitive. grepi() is a case-insensitive version.
& GREPI()
  grepi(<object>,<attrs>,<pattern>)
 
  This function works exactly like grep, but is case-insensitive.
  See "help grep()" for details. 
& GT()
  [gt(<integer1>,<integer2>)]

  Takes two integers, and returns 1 if and only if 
  integer1 > integer2, and 0 otherwise.
& GTE()
  [gte(<integer1>,<integer2>)]

  Takes two integers, and returns 1 if and only if
  integer1 >= integer2, and 0 otherwise.

& HASATTR()
& HASATTRP()
& HASATTRVAL()
& HASATTRPVAL()
  hasattr(<object>, <attribute name>)
  hasattrp(<object>, <attribute name>)
  hasattrval(<object>, <attribute name>)    
  hasattrpval(<object>, <attribute name>)   
  
  The hasattr() functions check to see if an object has an attribute.
  They return #-1 if the object does not exist or the attribute can't
  be examined by the player. Otherwise, they return 1 if the attribute
  is present and 0 if it is not.

  hasattr() returns 1 if the object has the attribute, 0 if it doesn't.
  
  hasattrp() also checks for attributes inherited from parent objects.

  hasattrval() returns 1 if the attribute exists and isn't empty.
  
  hasattrpval() is hasattrval() but checks parents.
  
& HASFLAG()
  hasflag(<object>[/<attrib>], <flag name>)
 
  Returns 1 if the object has the named flag, and 0 if it does not.
  If the object does not exist, #-1 will be returned. You do not have
  to control the object.
 
  Example: hasflag(me, opaque) will return "1" or "0".

  Unlike orflags() and andflags(), hasflag uses the *flag name*, not
  the single character abbreviation. Many flag names have shorter
  abbreviations which will also work (W for Wizard, roy for royalty).
  
  The "flags" ROOM, EXIT, and PLAYER are actually types. If you want
  to check if an object "has" one of these flags, you must use the
  HASTYPE() function.

  If an attribute is given, checks to see if the attribute has the 
  given attribute flag. See help @set2 for attribute flag names.

& HASPOWER()
  haspower(<object>, <power name>)
 
  Returns 1 if the object has the named power, and 0 if it does not.
  If the object does not exist, #-1 will be returned. 

  You may or may not have to be able to examine the object to use this.
& HASTYPE()
  hastype(<object>, <type>)

  Returns 1 if the object is of the named type, otherwise 0.
  Valid types are: ROOM, EXIT, PLAYER, THING.
  If an invalid type is given, #-1 is returned.
& HIDDEN()
  hidden(<player>)

  Returns 1 if the player is hidden, otherwise 0.
  Can only be called by someone privileged to see hidden players.
  If you're not, #-1 is returned.
& HOME()
  home(<object>)
 
  Returns the object's 'home'.  This is the home for a player or thing,
  the drop-to of a room, or source of an exit.
& IDLE()
& IDLESECS()
  idle(<player name>)
  idlesecs(<player name>)
 
  This function returns the number of seconds a player has been idle,
  much as WHO does. <player name> must be the full name of a player, or
  a player's dbref. Players who are not connected have an idlesecs of "-1",
  as do dark wizards, when idle() is used on them by a non-priv'ed player.

& IF()
& IFELSE()
  if(<condition>, <true expression>[, <false expression>])
  ifelse(<condition>, <true expression>, <false expression>)

  These functions evaluate the <condition> and return <true expression>
  if the <condition> is true, or <false expression> (if provided) if the
  <condition> is false.

See also:  BOOLEAN VALUES, switch()
& INC()
  inc(<integer>)
  inc(<string-ending-in-integer>)

  Inc returns the integer minus 1. If given a string that ends in an integer,
  it increments only the final integer portion. That is:

  > think inc(3)
  4
  > think inc(hi3)
  hi4
  > think inc(1.3.3)
  1.3.4
  > think inc(1.3)
  1.4

  Note especially the last example, which will trip you up if you use
  floating point numbers with inc() and expect it to work like add().
  See also: dec()
& DECRYPT()
  inc(<number>)

  Inc returns the number plus 1. Equivalent to add(<number>,1) but
  slightly faster and easier to write.
& INDEX()
  index(<list>,<character>,<first>,<length>)
  
  This function is similar to EXTRACT(), except that an item in the
  list may be more than one word; instead of a space being used to
  separate items in the list, <character> is used. The function returns 
  <length> items starting from that in the <first> position. Trailing
  spaces are trimmed. The comma cannot be used as the <character> separator. 
  
  Examples:
  
    > say [index(Cup of Tea | Mug of Beer | Glass of Wine, |, 2, 1)]
    You say, "Mug of Beer"

    > say [index(%rtoy boat^%rblue tribble^%rcute doll^%rred ball,^,2,2)]
    You say, "
    blue tribble^
    cute doll"
  
& INSERT()
  insert(<list>,<position>,<new item>[,<single-character separator>])
  
  This inserts before the item of <list> at <position> the <new item>.
  That means that <new item> then becomes the <position>th element of
  <list>. If a separator is not given, a space is assumed.
  
  Examples:
    > say [insert(This is a string,4,test)]
    You say, "This is a test string"
    > say [insert(one|three|four,2,two,|)]
    You say, "one|two|three|four"
  
& ISDAYLIGHT()
  isdaylight()

  Returns 1 if it's daylight savings time in the MUSH time zone,
  otherwise 0.
& ISDBREF()
  isdbref(<string>)
 
  This function returns 1 if the string is a valid object dbref, and
  0 if the string is not a valid object dbref.
 
See also: DBREFS
& ISNUM()
  isnum(<string>)

  This function returns 1 if <string> is a number, and 0 if it is not.
  Numbers can begin with a '-' sign (for negatives), but the rest of
  the characters in the string must be digits.
& ISWORD()
  isword(<string>)
  
  This function returns 1 if every character in <string> is a letter,
  or 0, if any character isn't a letter.  Case does not matter.
    
& ITEMS()
  items(<list>,<single-character separator>)
  
  This counts the number of items in a list which uses some arbitrary
  separator. This is similar in function to WORDS(), but you can use
  any character, not just a space.
 
  Example:
    > say [items(this|is|a|short|string,|)]
    You say, "5"
   
& ITER()
& PARSE()
  iter(<list>,<pattern>[,<delimiter> [,<output separator>]])
  parse(<list>,<pattern>[,<delimiter> [,<output separator>]])
  
  This works in a manner very similar to @map, except that it returns
  a string directly.  <list> is a space-separated list of words, and
  <pattern> is what will be "mapped" onto each element of the list,
  with the token "##" being replaced successively by the next word in
  the list, and the token "#@" being replaced by the word's position
  in the list.  The result is concatenated and returned as a space
  separated list.  This is similar to @dolist, but the results are
  made into a list rather than executed.
  
  The list may be <delimiter>-separated.

  By default, the return list will be space-separated. However,
  by including the output separator (which requires explicitly
  including the delimiter), you can have it separated by any string.
   
  parse() is a synonym for iter(). See "help ITER2" for some examples.
& ITER2
  Examples:
  
  > say [iter(This is a test string., [strlen(##)])]
  You say, "4 2 1 4 7"
  
  > say [iter(lnum(5), mul(add(##,##),2))]
  You say, "0 4 8 12 16"
  
  > say [iter(lexits(here), [name(##)] (owned by [name(owner(##))]))]
  You say, "South (owned by Claudia) North (owned by Roy)"
  
  > &STRLEN_FN me=[strlen(%0)]
  > say [iter(This is a test string., [u(STRLEN_FN, ##)])]
  You say, "4 2 1 4 7"

  > say [iter(lnum(3), ##, ,%r)]
  You say, "1
  2
  3"
& LAST()
  last(<string>[,<delimiter>])
  
  Returns the last word of a string, that is, everything to the right
  of the last space in the string, or the entire string if there are
  no spaces in the string.  See FIRST, REST.
& LATTR()
  lattr(<object>[/<attribute pattern>])
 
  Returns a space-separated list of the attribute names on the object.
  You must either be a Wizard or Royalty, own the object, have the
  See_All power, or have the object set VISUAL in order to use this 
  function on the object.
  
  If a wildcarded attribute pattern is provided, only attribute names
  matching that pattern will be returned.
 
& LCON()
  lcon(<object>)

  Returns a list of the dbrefs of all contents in a room that you can
  see. If you are not in the room, you must control it in order to get
  its contents.
& LCSTR()
  lcstr(<string>)

  Returns <string> with all letters converted to lowercase.
  Example: lcstr(Foo BAR bAz) returns "foo bar baz"
& LDELETE()
  Ldelete(<list>,<position>[,<single-character separator>])
  
  This deletes the item at <position> in the list. If a separator
  character is not given, a space is assumed.
  
  Examples:
    > say [ldelete(This is a long test string,4)]
    You say, "This is a test string"
    > say [ldelete(lemon|orange|apple,2,|)]
    You say, "lemon|apple"
& LEFT()
  left(<string>, <length>)

  Returns the first <length> characters from string.

& LEMIT()
  lemit(<message>)

  Sends a message to the outermost room, as per @lemit.

& LEXITS()
  lexits(<object>)

  Returns a list of the dbrefs of all the non-dark exits in the room.
  If you are not in the room, you must control it in order to get the
  list of exits.
& LJUST()
  ljust(<string>,<length>[,<fill>])
  
  This function pads a string with trailing characters ("left-justifies")
  so it is <length> long. If <string> is longer than <length>, the <string> 
  is returned; it is not truncated. If <fill> is not specified, a space
  is used.
  
  Examples:
  
    > say [ljust(foo,6)]
    You say, "foo   "
  
    > say %r0[ljust(foo,6,-)]7%r01234567
    You say, "
    0foo---7
    01234567"
 
& LINK()
  link(<name>, <destination>)
 
  This function links object <name> to <destination>. While normally
  used on exits, it has all of the other capabilities of @link as well.
  It returns nothing.

  This is a side-effect function and may not be enabled on some MUSHes.
 
& LIT()
  lit(<string>)

  This function returns the string literally - without even squishing
  spaces, and without evaluating *anything*. This can be useful for
  writing ASCII maps with spaces or whatever.

  It can be a bit tricky to get a literal string with spaces into an
  attrib, however, since spaces are usually squished in setting an
  attribute. This example illustrates how to make it work:

    > @va me=$test: think {[lit(near       far)]}
    Set.
    > ex me/va
    VA [#1]: $test: think {[lit(near       far)]}
    > test
    near       far

  Leaving out the {}'s will not work in the above.
& LN()
  ln(<number>)
 
  Returns the natural log of <number>.
& LNUM()
  lnum(<number>)

  Lnum returns a list of numbers, from 0 to <number - 1>. For example,
  lnum(4) returns the list "0 1 2 3". This is useful for creating loops.

& LOC()
  loc(<object>)
  
  Loc returns the dbref of the location that object is at.  The 
  object has to either be yours or be in the same room as you to 
  work. The location of an exit is its destination (the source of 
  an exit is its home). The location of a room is its drop-to
  (if one is not set, then the location is #-1).
 
& LOCATE()
  locate(<looker>, <name>, <parameters>)
 
  This function attempts to find the number called <name> relative to
  <looker>. You must control <looker>. This is a bit like the NUM()
  function, but with a wider, controllable "range".
 
  You can control the preferred type of the match with:
    E   -   Exits
    L   -   Unlocked exits preferred over locked exits
    N   -   No type (this is the default)
    P   -   Players
    R   -   Rooms
    T   -   Things
  If you specify more than one type, the last one will be preferred.
 
  (Read "help locate2" for more.)
 
& LOCATE2
 
  You can control where to look with:
    a   -   Absolute match (look for #<object>)
    c   -   Exits carried by <looker>
    e   -   Exits in <looker>'s location
    h   -   "here"  (the location of <looker>)
    i   -   Inventory of <looker>
    l   -   Location (container) of <looker>
    m   -   "me"  (<looker> itself)
    n   -   Neighbors (other objects in same location as <looker>)
    p   -   Player names prefixed by '*'
    *   -   All of the above (try a complete match)
 
Just string all the parameters together, without separating them by
spaces, i.e.  LOCATE(#100, Test, Tn)  would check #100's neighbors
for an object named "Test", preferring a thing over other types.
 
& LOCK()
  lock(<object>[/<locktype>][, <new value>])

  lock() returns the text string equivalent of the lock on an object that
  you control. You can also provide an "enter", "use", "tport", or "page" 
  switch after the object, if you want to check something other than the
  regular lock.  If a new value is specified, it will attempt to change
  the lock before reporting it.

  This is a side-effect function and may not be enabled on some MUSHes.
& LOG()
  log(<number>)
 
  Returns the logarithm (base 10) of <number>.
& LPARENT()
  lparent(<object>)
  
  This function returns a list consisting of the object's db# (as per
  num()), the db# of its parent, grandparent, greatgrandparent, etc.
  The list will not, however, show parents of objects which the player
  is not privileged to examine.

& LSEARCH()
& SEARCH()
  lsearch(<player>, <class>, <restriction>[, <low>[, <high>]])
  lsearchr(<player>, <class>, <restriction>[, <low>[, <high>]])
 
  This function is similar to the @search command, except it returns
  just a list of dbref numbers. It is computationally expensive, and
  costs 100 pennies to perform. The function must have at least three
  arguments.  Wizards can specify "all" or <player> for the <player>
  field; mortals must use "me". If you do not want to restrict
  something, use "none" for <class> and/or <restriction>. <low> and
  <high> restrict the search to that range of db#'s and are specified as
  plain numbers ("2"), without an #.

  Possible <class>es are TYPE, NAME, ZONE, PARENT EXITS, OBJECTS, ROOMS,
  PLAYERS, FLAGS, and EVAL.
  
  If <class>=TYPE, the possible <restrict>ions are OBJECT, ROOMS, EXITS, 
  and PLAYERS. 

  If <class>=NAME, only objects with <restriction> whose name matches
  <restriction> will be listed.
  
  See 'help lsearch2' for more details.
& LSEARCH2
& SEARCH2 
  
  If <class>=EXITS, OBJECT, ROOMS, or PLAYERS, only objects of that type 
  and whose name matches <restriction> will be listed. 
 
  If <class>=FLAGS, only objects with the list of flags specified by 
  <restriction> will be listed.

  If <class>=ZONE, only objects belonging to the zone <restriction> will
  be listed. If <class>=PARENT, only children of parent <restriction> will
  be listed. For ZONE and PARENT, <restriction> must be specified as a
  dbref number. 

  lsearchr is like lsearch, but works backward through the database.
  search() is an alias for lsearch().
 
  Examples:
  
  lsearch(all, flags, Wc)                   <-- lists all connected wizards.
  lsearch(me, type, room)                  <-- lists all rooms owned by me.
  lsearch(me, type, room, 100, 200)        <-- same, but only w/db# 100-200
  lsearch(all, eval, \[eq(money(##),100)\]) <-- lists everyone with 100 coins.
 
& LSTATS()
& STATS()
  lstats(<player>)
 
  This function returns the breakdown of objects in the database, in
  a format similar to "@stats". If <player> is "all", a breakdown is
  done for the entire database. Otherwise, the breakdown is returned
  for that particular player. Only wizards can LSTATS() other players.
  The list returned is in the format:
  <Total objects> <Rooms> <Exits> <Things> <Players> <Garbage>
& LT()
  lt(<integer1>,<integer2>)

  Takes two integers, and returns 1 if and only if
  integer1 < integer2, and 0 otherwise.
& LTE()
  lte(<integer1>,<integer2>)

  Takes two integers, and returns 1 if and only if
  integer1 <= integer2, and 0 otherwise.
& LWHO()
  lwho()

  This returns a list of the dbref numbers for all currently-connected
  players. When mortals use this function, the dbref numbers of DARK
  wizards or royalty do NOT appear on the dbref list.

See also: mwho()
& MAIL()
  mail()
  mail(<player name>)
  mail([<folder #>:]<mail message #>)
  mail(<player>, [<folder #>:]<mail message #>)

  Without arguments, mail() returns the number of messages in
  all the player's mail folders. With a player name argument,
  mail() returns the number of read, unread, and cleared messages
  <player> has in all folders. Only Wizards can use this on other players.

  When given numeric arguments, mail() returns the text of the
  corresponding message in the current folder. The message number
  may also be prefaced by the folder number and a colon, to indicate
  a message in a different folder.

  Example: 
  > think mail(3:2)
  (text of the second message in the player's third folder)
  
& MAILFROM()
& MAILTIME()
& MAILSTATUS()
  mailfrom([<player>,] [<folder #>:]<mail message #>)
  mailtime([<player>,] [<folder #>:]<mail message #>)
  mailstatus([<player>,] [<folder #>:]<mail message #>)
 
  mailfrom() returns the dbref number of the sender of a mail message.
  mailtime() is similar, but returns the time the mail was sent.
  mailstatus() returns the mail's status characters (as per
  @mail/list)

& MAP()
  map([<object>/]<attribute>,<list>[,<delim>])
  
  Maps a function onto a list.
 
  This function works much like ITER(). Each element of <list> has
  the user-defined function of the first argument performed on it;
  the element is passed to the function as %0. <delim> is used as
  the element delimiter; if it is not specified, a space is used.
 
  Examples:
  
    > &times_two me=[mul(%0,2)]
 
    > say [map(times_two, 5 4 3 2 1)]
    You say, "10 8 6 4 2"
 
    > say [map(times_two,1;2;3;4;5,;)]
    You say, "2;4;6;8;10"
 
& MATCH()
  match(<string>, <pattern>[, <delimiter>])

  This function tests if the pattern matches the string.  The pattern
  can contain the wildcards * and  ?.  ? matches to any one 
  character, while * matches to any number of characters, including 
  none.  So s?x would match to sex or six, but not to socx, but s*x 
  would match to all of them. If no match is found, 0 is returned.
  
  This attempts to match to a word, not to an entire string. To match
  an entire string  (for example, to match "red blue green" to "*bl*"),
  use the strmatch() function.
& MATCHALL()
  Function: matchall(<string>,<pattern>[,<delim>])
 
  This function works identically to the match() function, save that it
  returns all matches, not just the first: It returns the index numbers of
  all words in the list <string> which match <pattern>. If none match, an
  empty string is returned.
 
  Examples:
 
  > say matchall(This is a test of a test,test)
  You say "4 7"
  > say matchall(This is testing a test,tes*)
  You say "3 5"
 
  See also: match(), strmatch(). 
& MAX()
  max(<num1>, <num2>, ..., ...)

  This function returns the largest number in its list of arguments.
  It can take up to ten numbers as arguments.
& MEMBER()
  member(<list>,<word>[,<delimiter>])

  Member takes a list and a word, and returns the position of <word>
  if <word> is a word in <list>.  A word is defined as a string which
  has no interior spaces.  So '  hello  ' would be one word, while
  'hello there' would be two.  See LISTS
& MERGE()
  merge(<string1>, <string2>, <character>)
  
  This function merges <string1> and <string2>, depending on <character>.
  If a character in <string1> is the same as <character>, it is replaced
  by the character in the corresponding position in <string2>.  The two
  strings must be of the same length.
  
  Example:
    > say [merge(AB--EF,abcdef,-)]
    You say, "ABcdEF"
 
  Spaces need to be treated specially. A null character is considered to
  equal a space, for <character>.
  
  Example:
    > say [merge(AB[space(2)]EF,abcdef,)]
    You say, "ABcdEF"
  
& MID()
  mid(<string>, <first>, <length>)

  Mid returns a segment of the string, the <length> characters to the
  right of the <first> character.  Note that the first character in a
  string is numbered zero, and not one.
& MIN()
  min(<num1>, <num2>, ..., ...)

  This function returns the smallest number in its list of arguments.
  It can take up to ten numbers as arguments.
& MIX()
 
  mix([<object>/]<attribute>,<list 1>,<list 2>[,<delim>])
 
  This function is similar to MAP(), except that it takes the elements
  of both lists, one by one, and passes them to the user-defined function
  as %0 and %1, respectively, for elements of <list 1> and <list 2>.
  <delim> is used to separate elements; if it is not specified, it
  defaults to a space. The lists must have the same number of elements.
  
  Examples:
 
  > &add_nums me=[add(%0,%1)]
 
  > say [mix(add_nums,1 2 3 4 5,2 4 6 8 10)]
  You say, "3 6 9 12 15"
 
  > say [mix(add_nums,1:3:5:7,0:2:4:6,:)]
  You say, "1:5:9:13"
 
& MOD()
  mod(<number>,<number>)

  Mod returns the remainder of the integer division of the first
  number by the second.  See DIV.
& MONEY()
  money(<object>)

  returns the amount of money <object> has.
& MTIME()
  mtime(<object>)

  If creation times are enabled, this function will return the 
  date and time that one of the object's attributes was last
  added, deleted, or modified. Only things, rooms, and exits have
  modification times.
 
& MUDNAME()
  Function: mudname()
 
  Returns the name of the MUD.  This is usually (but not necessarily) the name
  that appears in the various mud lists, and is the name that the mud is
  listed under in reports from RWHO servers (that is, if the mud sends its
  WHO information to an RWHO server).
 
  Example:
    > say mudname()
    You say "TestMUSH"

& MUL()
  mul(<number>,<number>)

  Returns the product of two numbers. It operates on integers and floats.
& MUNGE()

  munge([<object>/]<attribute>,<list 1>,<list 2>[,<delimiter>])
 
  This function takes two lists of equal length. It passes the entirety of
  <list 1> to the user-defined function as %0. Then, this resulting list
  is matched with elements in <list 2>, and the rearranged <list 2> is
  returned. This is useful for doing things like sorting a list, and then
  returning the correspoding elements in the other list. If a resulting
  element from the user-defined function doesn't match an element in the
  original <list 1>, a corresponding element from <list 2> does not appear
  in the final result.
 
  For example: Consider attribute PLACES, which contains "Fort Benden Ista",
  and another attribute DBREFS contains the dbrefs of the main JUMP_OK
  location of these areas, "#20 #9000 #5000".  We want to return a list of
  dbrefs, corresponding to the names of the places sorted alphabetically. The
  places sorted this way would be "Benden Fort Ista", so we want the final
  list to be "#9000 #20 #5000". The functions, using munge(), are simple:
  
  > &sort_alpha me=[sort(%0)]
  > say [munge(sort_alpha,v(places),v(dbrefs))]
  You say, "#9000 #20 #5000"
 
& MWHO()
  mwho()

  This returns a list of the dbref numbers for all current-connected,
  non-hidden players. It's exactly the same as lwho() used by a
  mortal, and is suitable for use on privileged global objects who
  need an unprivileged who-list.
& NAME()
  name(<object>[,<new name>])
 
  Name returns the name of object <object>. For exits, name returns
  the displayed name of the exit.
 
  If function side effects are allowed, this function, given two arguments,
  will rename <object> to <new name>.

  Related functions: FULLNAME() 
& NEARBY()
  nearby(<object 1>, <object 2>)

  Returns 1 if object 1 is "nearby" object 2. "Nearby" is defined as:
  object 1 is in the same location as object 2, or,
  object 1 is being carried by object 2, or,
  object 1 is carrying object 2.
  You must control at least one of the objects.
& NEQ()
  [neq(<integer1>,<integer2>)]

  Basically the same as [not(eq(<integer1>,<integer2>))].
  (see eq(), not())
& NEXT()
  next(<thing>)

  If thing is an exit in a room, then next will return the next 
  nondark exit in the list of exits for that room.  If thing is an 
  object, then next will return the next oject in the inventory list 
  that the object is in.  Otherwise, it returns a '#-1' string.
& NOT()
  [not(<boolean value>)]

  Takes a boolean value, and returns it's inverse.  
  I.E. if the input is equivalent to true(1), it returns a 0, and if 
  the input is equivalent to false(0), it returns a 1.
  See BOOLEAN VALUES.
& NUM()
  num(<object>)

  Returns the dbref number of the object, which must be in the same 
  room as the object executing num.
& OBJ()
  obj(<object>)

  Returns the objective pronoun - him/her/it - for an object.
& OBJEVAL()
  objeval(<object>, <expression>)
 
  Allows you to evaluate <expression> from the viewpoint of <object>.
  You must either own <object>, be royalty or wizard, or have the
  see_all power. If <object> does not exist or you don't meet one
  of the criterion, the function evaluates with your privileges.
 
  This function is useful for securing objects which need to evaluate
  attributes on things owned by others.
  
& OBJMEM()
  objmem(<object>)

  This function returns the amount of memory, in bytes, being used
  by the object. It can only be used by players with Search_All powers.

  See also 'playermem()'

& OEMIT()
  oemit([<room>/]<object>,<message>)

  Sends <message> to all objects in <room> (default is the room of the
  object executing the function) except <object>, as per @oemit.

& OPEN()
  open(<exit name>, <room>)
 
  This function opens an exit called <exit name> and links it to
  <room>, which must be a dbref number. It returns the dbref number
  of the new exit.
 
& OR()
& COR()
  or(<boolean value 1>,<boolean value 2>[, ... , <boolean value N>])
  cor(<boolean value 1>,<boolean value 2>[, ... , <boolean value N>])
 
  Takes boolean values, and returns a 1 if at least one of the inputs 
  is equivalent to true(1).  or() always evaluates all arguments
  (including side effects), while cor() stops evaluation after the
  first argument that evaluates to true.

See also:  BOOLEAN VALUES, and().
& ORFLAGS()
  orflags(<object>,<list of flags>)
  
  This function returns 1 if <object> has at least one of the flags in
  a specified list, and 0 if it does not. The list is specified with a
  single letter standing for each flag, like the output of the FLAGS()
  function. A '!' preceding a flag letter means "not flag".
  
  Thus, ORFLAGS(me,Wr) would return 1 if I am set WIZARD or ROYALTY.
  ORFLAGS(me,D!c) would return 1 if I am DARK or not CONNECTED.
  
  If a letter does not correspond to any flag, <object> doesn't have
  it, so it is simply ignored. There can be an arbitrary number of
  flags. Do not put spaces between flag letters.
& OWNER()
  owner(<object>[/<attribute>])
 
  Given just an object, it returns the owner of the object.
  Given an object/attribute pair, it returns the owner of that attribute.
& PARENT()
  parent(<object>[, <new parent>])
 
  This function returns the dbref number of an object's parent. You
  must control the object. The parent of a player is always #-1.  If
  you specify a second argument, it tries to re-parent the object.


& PEMIT()
  pemit(<object list>,<message>)

  This function will send each object on the list a message, as per
  the @pemit/list command. It returns nothing. It respects page-locks
  and HAVEN flags on players.
& PI()
  pi()
  
  Returns the value of "pi" (3.141592).
& PLAYERMEM()
  playermem(<player>)

  This function returns the amount of memory, in bytes, being used
  by everything owned by the player. It can only be used by players
  with Search_All powers.

  See also 'objmem()'

& PMATCH()
  pmatch(<string>)
 
  Given the partial name of a player, it returns that player's dbref
  number. This partial name completion works identically to the partial
  name completion of the "page" command - i.e. it first attempts to match
  the normal names of all players (connected or not), and if that fails,
  it tries to match the partial names of connected players. If no player
  is matched, it returns "#-1". If more than one match is possible for
  a partial name, it returns "#-2".
  
  Pmatch() will also accept *<player> or #<db#>. If given a non-player
  dbref #, pmatch() will return #-1.
& POLL()
  poll()

  This function returns the current @poll. 

  See also: @poll, doing(), @doing 
& PORTS()
  ports(<player name>)
 
  This function returns the list of descriptors ("ports") that a player,
  specified by full player name, or by dbref, is connected to. Only Wizards
  and Royalty may use this function; if a user lacks the privileges, or the
  player is not connected, an empty list is returned. Otherwise, a list of
  ports is returned in order of most recent connection to least recent
  connection.
& POS()
  pos(<string1>,<string2>)

  This function returns the position that string1 begins in string2,
  with the first position being 1.  
  If string1 is not in string2, then it returns #-1.
  
& POSS()
  poss(<object>)

  Returns the possessive pronoun - his/her/its - for an object.
& POWER()
  power(<number>,<exponent>)
 
  Returns <number> to the power of <exponent>.
& POWERS()
  powers(<object>)

  Returns a space-separate list of powers possed by the object.
  If the object does not exist, #-1 will be returned.
& QUOTA()
  quota(<player>)  
  
  Returns the player's quota, the maximum number of objects they can
  create, if quotas are in effect. Returns 99999 for players with
  unlimited quotas, so it's safe to use in numerical comparisons.
& R()
& R-FUNCTION
  r(<number>)
  
  The r() function is used to access "local registers", and returns
  the contents of the specified register. There are ten such registers,
  numbered 0 through 9.
 
  The '%qN' percent-substitution can also be used to access these local
  registers, where N is register <number> needed.
  
  See "help SETQ()" for details about registers.
& RAND()
  rand(<num>)

  Rand returns an integer between 0 and num-1.
  If called with an invalid argument, rand() returns -1.

& REMIT()
  remit(<object>, <message>)

  Sends a message to the contents of <object>, as per @remit.

& REMOVE()
  remove(<list>,<word>[,<delimiter>])

  Remove takes a list and a word, and returns the list, with the
  word deleted from it.  A word is defined as a string which contains
  no interior spaces (or <delimiter>'s if <delimiter> is used).  
  If the word is not in the list, then the list is returned.

& REPEAT()
  repeat(<string>,<number>)
  
  This function simply repeats <string>, <number> times.  No spaces are
  inserted between each repetition.
  
  Example:
    > say [repeat(Test, 5)]
    You say, "TestTestTestTestTest"
  
& REPLACE()
  replace(<list>,<position>,<new item>[,<single-character separator>])
  
  This replaces the item at <position> of <list> with <new item>.
  If no separator is given, a space is assumed.
  
  Examples:
    > say [replace(Turn north at the junction,2,south)]
    You say, "Turn south at the junction"
    > say [replace(blue|red|green|yellow,3,white,|)]
    You say, "blue|red|white|yellow"
  
& REST()
  rest(<string>[,<delimiter>])

  Rest takes a string, returns all the string except the first word, 
  that is, everything to the right of the first space, or an empty 
  string, or the empty string if there are no spaces in the string.  
  See FIRST.
& REVWORDS()
  revwords(<list of words>[,<delimiter>])
 
  This function reverses the order of words in a list.
 
  Example:
    > say revwords(foo bar baz eep)
    You say, "eep baz bar foo"
  
& RIGHT()
  right(<string>, <length>)

  Returns the <length> rightmost characters from string.

& RJUST()
  rjust(<string>,<length>[,<fill>])
  
  This function pads a string with leading characters ("right-justifies")
  so it is <length> long. If <string> is longer than <length>, the <string>
  is returned; it is not truncated. If <fill> is not specified, a space
  is used.
 
  Examples:
  
    > say -[rjust(foo,6)]-
    You say, "-   foo-"
  
    > say %r0[rjust(foo,6,-)]%r01234567
    You say, "
    0---foo7
    01234567"
 
& RLOC()
  rloc(<object>, <levels>) 
  
  This function may be used to the get the location of an object's location
  (and on through the levels of locations), substituting for repeated nested
  loc() calls. <levels> indicates the number of loc()-equivalent calls to
  make; i.e., loc(loc(<object>)) is equivalent to rloc(<object>,2).
  rloc(<object>,0) is equivalent to num(<object>), and rloc(<object>,1) is
  equivalent to loc(<object>).
  
  If rloc() encounters a room, the dbref of that room is returned. If rloc()
  encounters an exit, the dbref of that exit's destination is returned.
  It can also return the locations of controlled or nearby objects, or of
  findable players.
 
  Related functions:  LOC(), WHERE(), ROOM()
 
& RNUM()
  rnum(<room number>, <object>)
 
  This function returns the dbref number of an object (player, thing, or
  exit). The object must be in the specified room. This function is
  essentially identical to NUM(), except it matches things in the
  specified room rather than the room that you are in. The RNUM()
  function is meant to be used in conjunction with Master Room objects.

& ROOM()
  room(<object>)

  Returns the "absolute" location of an object. This is always a room;
  it is the container of all other containers of the object. The
  "absolute" location of an object is the place @lemit messages are
  sent to and NO_TEL status determined.
  You must control the object, be a wizard or royalty, or be near
  the object in order for this function to work. The exception to this
  are players; if <object> is a player, the ROOM() function may be
  used to find the player's absolute location if the player is not
  set UNFINDABLE.
& ROUND()
  round(<number>,<places>)
 
  Rounds <number> to <places> decimal places. <places> must be between
  0 and 6.
 
& S()
& S-FUNCTION
  s(string)

  This function performs pronoun substitution in a string, and then 
  returns that string.  As usual, %n is the name, %s the subjective
  pronoun, %o the objective, and %p the possessive.  It is important 
  to note that the pronoun is that of the triggering object.

  So, if the ve of an object were: "[s(This is %n)], and I were to 
  type @trigger <object>/ve, it would return "This is <myname>", but 
  if vf were @trigger me/ve, then triggering the vf makes the ve 
  return "This is <object>"
    
& SCRAMBLE()
  scramble(<string>)
  
  This function scrambles a string, returning a random permutation of its 
  characters. For example, "[scramble(abcdef)]" might return "cfaedb".
  Note that this function does not pay any attention to spaces or other
  special characters; it will scramble these characters just like normal
  characters.
  
& SECS()
  secs()
 
  This function takes no arguments, and returns the number of elapsed
  seconds since midnight, January 1, 1970. This is a good way of
  synchronizing things that must run at a certain time.
& SECURE()
  secure(<string>)
 
  This function returns <string> with all "dangerous" characters replaced
  by spaces. Dangerous characters are ( ) [ ] { } $ % , ^ and ;
  This can make output slightly ugly, but it's a good way of preventing
  other people from doing nasty things with your objects.

  See also:  ESCAPE()

& SET()
  set(<name>, <string>)
 
  This function is equivalent to @set, and can be used to switch
  flags, set attributes, and many other things.  The <name> and
  <string> fields correspond to the stuff before and after the '='
  in @set.  This function returns nothing.
 
  Note that you can't clear an attribute with set(), though
  you can make it an empty attribute. Use wipe() to clear attributes.

& SETDIFF()
  setdiff(<list1>, <list2>[,<delimiter>])
 
  This function returns the difference of two sets -- i.e., the 
  elements in <list1> that aren't in <list2>. The list that
  is returned is sorted.
 
  Example:
    > say setdiff(foo baz gleep bar, bar moof gleep)
    You say, "baz foo"
 
& SETINTER()
  setinter(<list1>, <list2>[,<delimiter>])
 
  This function returns the intersection of two sets -- i.e., the
  elements that are in both <list1> and <list2>. The list that is
  returned is sorted.
 
  Example:
    > say setinter(foo baz gleep bar, bar moof gleep)
   You say, "bar gleep"

& SETQ()
& SETR()
  setq(<number>,<string>)
  setr(<number>,<string>)
  
  The setq() and setr() functions are used to copy strings into local
  registers.  setq() returns a null string; it is a purely "side effect"
  function.  setr() returns the value stored.
  
  There are ten local registers, numbered 0 through 9. They are cleared
  at the start of each new queue cycle (i.e. whenever a new command is
  evaluated). They are most useful for storing complex function evaluations
  which are used repeatedly within a single command.
 
  Registers set via setq() or setr() can be accessed via the r() function, 
  or via the %qN percent-substitution.
  
  See "help SETQ2" for examples of its use.
  
& SETQ2
  
  The setq() function is probably best used at the start of the string
  being manipulated, such as in the following example:
  
    &TEST object=[strlen(%0)]
    &CMD object=$test *:"[setq(0,u(TEST,%0))]Test. %0 has length [r(0)].
    test Foo
    > Object says, "Test. Foo has length 3."
  
  In this case, it is a waste to use setq(), since we only use the function
  result once, but if TEST was a complex function being used multiple times
  within the same command, it would be much more efficient to use the local
  register, since TEST would then only be evaluated once.
  
  setq() can thus be used to improve the readability of MUSH code, as well
  as to cut down the amount of time needed to do complex evaluations.
 
  See "help SETQ3" for scoping rules of setq().
  
& SETQ3
  The registers set by setq() can be used in later commands in the same
  thread.  That is, the registers are set to null on all $-commands,
  ^-commands, A-attribute triggers, etc., but are then retained from
  that point forward through the execution of all your code.  Code
  branches like @wait and @switch retain the register values from the
  time of the branch, so the code:
    
  say setq(0,foo)%q0; @wait 0=say %q0; say setq(0,bar)%q0
    
  produces the following when executed by an object:
  
  Object says "foo"
  Object says "bar"
  Object says "foo"

& SETUNION()
  setunion(<list1>, <list2>[,<delimiter>])
 
  This function returns the union of two sets -- i.e., all the
  elements of both <list1> and <list2>, minus any duplicate
  elements. Think of it as CAT() without words duplicated.
  The list returned is sorted.
 
  Example:
    > say setunion(foo baz gleep bar, bar moof gleep)
    You say, "bar baz foo gleep moof"
& SHL()
  shl(<number>,<count>)

  Performs a leftwards bit-shift on <number>, shifting it <count> times.
  This is equivalent to mul(<number>,pow(2,<count>), but much faster.
& SHR()
  shr(<number>,<count>)

  Performs a rightwards bit-shift on <number>, shifting it <count> times.
  This is equivalent to div(<number>,pow(2,<count>), but much faster.
& SHUFFLE()
  shuffle(<word1> <word2> <word3> <...wordN>[,<delimiter>])
  
  This function shuffles the order of words in a list, returning a
  random permutation of its elements. "[shuffle(foo bar baz gleep)]" 
  might evaluate to "baz foo gleep bar".
  
& SIGN()
  sign(<number>)

  Essentially returns the sign of a number -- 0 if the number is 0,
  1 if the number is positive, and -1 if the number is negative.
  Thus, SIGN(-4) is -1, SIGN(2) is 1, and SIGN(0) is 0.
& SIN()
  sin(<number>)  
 
  Returns the sine of <number>, which should be expressed in radians.
& SORT()
  sort(<word1> <word2> <word3> ...[,<sort type>][,<delimiter>])
  
  This sorts a list of words. If no second argument is given, it will
  try to detect the type of sort it should do. If all the words are
  numbers, it will sort them in order of smallest to largest. If all
  the words are dbrefs, it will sort them in order of smallest to
  largest. Otherwise, it will perform a lexicographic sort.
  
  The following letters as a second argument specify a certain sort:
 
  'a':  Sort lexicographically.
  'd':  Sort dbrefs.
  'n':  Sort numbers.
   
& SORTBY()
  sortby([<obj>/]<attrib>,<list>[,<delimiter>])
 
  This sorts an arbitrary list according to the u-function <obj>/<attrib>.
  This u-function should compare two arbitrary elements, %0 and %1, and
  return zero (equal), a negative integer (element 1 is less than element 2)
  or a positive integer (element 1 is greater than element 2).
 
  A simple example, which imitates a normal alphabetic sort:
    > &ALPHASORT test=[comp(%0,%1)]
    > say [sortby(test/ALPHASORT,foo bar baz)]
    You say, "bar baz foo"
 
  A silghtly more complicated sort. #1 is "God", #2 is "Amby", "#3" is "Bob":
    > &NAMESORT me=[comp(name(%0),name(%1))]
    > say [sortby(NAMESORT,#1 #2 #3)]
    You say, "#2 #3 #1"
 
  Warning: the function invocation limit applies to this function. If
  this limit is exceeded, the function will fail _silently_. List and
  function sizes should be kept reasonable.
& SOUNDEX()
  soundex(<word>)

  The soundex function returns the soundex pattern for a word.
  A soundex pattern represents the sound of the word, and similar
  sounding words should have the same soundex pattern. Soundex patterns
  consist of an uppercase letter and 3 digits.
 
  > think soundex(foobar)
  F160

  For details of how the algorithm works, see help soundex2
  See also: help soundslike()
& SOUNDEX2
  Here's how the soundex algorithm works:
  1. The first letter of the soundex code is the first letter of
     the word (exception: words starting with PH get a soundex
     starting with F)
  2. Each remaining letter is converted to a number:
      vowels, h, w, y ---------> 0
      b, p, f, v --------------> 1
      c, g, j, k, q, s, x, z --> 2
      d, t --------------------> 3
      l -----------------------> 4
      m, n --------------------> 5
      r -----------------------> 6
     At this stage, "foobar" is "F00106" 
  3. Strings of the same number are condensed. "F0106"
  4. All 0's are removed, because vowels are much less important
     than consonants in distinguishing words. "F16"
  5. The string is padded with 0's or truncated to 4 characters. "F160"
  That's it. It's not foolproof (enough = "E520", enuf = "E510") but
  it works pretty well. :)
& SOUNDLIKE()
& SOUNDSLIKE()
  soundslike(<word>,<word>)
  soundlike(<word>,<word>)

  The soundslike function returns 1 if the two words have the same
  soundex code (see help soundex() for information), which means, 
  in general, if they sound alike. For example:
  
  > think soundslike(robin,robbyn)
  1
  > think soundslike(robin,roebuck)
  0

& SPACE()
  space(<number>)
 
  Prints <number> number of spaces. Useful for times when you want to
  be able to use lots of spaces to separate things. For example,
  "a[space(5)]b  would print, "Amberyl says, "a     b"".
& SPLICE()
  splice(<list1>, <list2>, <word>[, <delimiter>])
  
  This function splices <list1> and <list2> together. <list1> and <list2>
  are space-separated lists of words
  
  If a word in <list1> is the same as <word>, it is replaced by the word
  in the corresponding position in <list2>.  Both lists must have the
  same number of words.
  
  Example:
    > say [splice(foo bar baz,eek moof gleep,bar)]
    You say, "foo moof baz"
  
& SQRT()
  sqrt(<number>)
 
  Returns the square root of <number>. <number> cannot be negative.
& SQUISH()
  squish(<string>)
  
  This function removes the leading and trailing spaces from a string,
  and condenses all inter-word spaces to a single space. This applies
  only to literal spaces, and not to tabs or newlines.
  
  Example:
  
    > say [squish(  foo bar  baz blech   eek )]
    You say, "foo bar baz blech eek"

& STARTTIME()
  Function: starttime()
 
  Returns a string which is the time the MUSH last rebooted.  The time
  is in the same format as the TIME() function returns.
 
  Example:
    > say starttime()
    You say "Sat Dec  7 00:09:13 1991
  See also: convtime().

& STRCAT()
  strcat(<string1>, <string2>)
 
  Concatanates two strings together, with no space between them.
  For example, strcat(foo bar,baz blech) will return the string
  "foo barbaz blech".
 
& STRIPANSI()
  stripansi(<string>)

  Returns the string with all ansi codes removed.
  
& STRLEN()
  strlen(<string>)

  Returns the length of the string in a numerical string.

& STRMATCH()
  strmatch(<string>, <pattern>)
  
  This function is matches <pattern> against the entire <string>.
  It returns 1 if it matches and 0 if it doesn't. It is not
  case-sensitive, and <pattern> may contain wildcards.
 
  strmatch(Foo bar baz,*Baz) will return 1.
  strmatch(Foo bar baz,*Foo) will return 0.
  strmatch(Foo bar baz,*o*a*) will return 1.
  
& SUB()
  sub(<num>, <num>)
 
  Sub() returns the integer subtraction of two numbers.
& SUBJ()
  subj(<object>)

  Returns the subjective pronoun - he/she/it - for an object.
& SWITCH()
  switch(<string>, <expr1>, <list1>, [<exprN>, <listN>], ...[<default>])
 
  This function matches <string> against the <expr>essions, returning the
  corresponding <list>. If nothing is matched, the <default> is returned.
  This is similar to @switch/first, but instead of executing the list,
  it simply returns it. Wildcard patterns are allowed. There may be
  a maximum of ten arguments total to the function.

  If the string "#$" appears in the <list> to be executed, it will be
  replaced with the evaluated value of <string> before execution.
 
  Example:
    > say switch(test, *a*, foo, *b*, bar, *t*, neat, baz)
    You say, "neat"
    > say switch(ack, *a*, foo, *b*, bar, *t*, neat, baz)
    You say, "foo"
    > say switch(moof, *a*, foo, *b*, bar, *t*, neat, baz)
    You say, "baz"
    > say switch(moof, *a*, foo, *b*, bar, *t*, neat, #$)
    You say, "moof"
 
& T()
  t(<expression>)

  Returns a 0 if the expression is null, 0, #-1, or #-2.
  Returns a 1 otherwise.
& TABLE()
  table(<list>,<field width>,<line length>,<delimiter>,<output separator>) 

  This function returns the elements of <list> in a tabular format.
  All other parameters are optional.
  <field width> specifies how wide each table entry is allowed to be.
  It defaults to 10 characters
  <line length> is how wide a table row can be. Default is 78 chars.
  <delimiter> is the delimiter used in <list>. Default is white space.
  <output separator> is a single character to be used between entries
  in the table. Default is a single space.
 
  Examples:
  > think table(a b areallylongone d)
  a          b          areallylon d

  > think table(the quick brown fox,10,25, ,|)
  the       |quick
  brown     |fox
    
& TAN()
  tan(<number>)
 
  Returns the tangent of <number>, which should be expressed in radians.
& TEL()
  tel(<object>,<destination>)

  This function will teleport <object> to <destination>, exactly as
  @tel <object>=<destination>.

  See also: @tel
& TIME()
  time()

  Gives you the current time on the MUSH.
  WARNING!  This is the time on the machine that the mud is running
  on, and not where you are.

See also: timestring(), convsecs(), convtime()
& TIMESTRING()
  timestring(<seconds>[,<pad flag>])

  The timestring function takes a number of seconds as input and
  returns the amount of time formatted into days, hours, minutes, and
  years. If <pad flag> is non-zero, all time periods will be used even
  if the number of seconds is less than a day, hour, or minute.

  Example:
  > say [timestring(301)]
  You say, " 5m  1s"
  > say [timestring(301,1)]
  You say, "0d  0h  5m  1s"

& TRIM()
  trim(<string>[,<character to trim>[,<trim style>]])
 
  This function trims leading and trailing characters from a string.
  The character trimmed is normally a space; if a second argument is
  provided, however, that character will be used instead.
  
  If no trim style is specified, characters are trimmed from both the
  left and right sides of the string. If the 'l' trim style is specified,
  characters are only trimmed from the left side. If the 'r' trim style
  is specified, characters are only trimmed from the right side. If you
  specify a trim style, you must also explicitly specify the character
  to trim, since the trim style must be the third argument to the function.
 
   Examples:
      > say [trim(   foo bar baz   eek  )]
       You say, "foo bar baz   eek"
      > say [trim(***BLAM***,*)]
       You say, "BLAM"
      > say [trim(-----> WOW---,-,r)]
       You say, "-----> WOW"

& TRUNC()
& VAL()
  trunc(<string>)
  val(<string>)
  
  This function truncates floating point numbers to integers. It can
  also be used to return the leading numeric prefix of a string, or
  "0" if there isn't one. For example, "val(101Dalmations)"  => 101.
  
& TYPE()
  type(<object>)

  This function returns the type of an object - PLAYER, THING, EXIT,
  or ROOM. See "help types of objects" for more.
& U()
& UFUN()
  u([<object>/]<user function name>, <arg 0>, <arg 1>, ... <arg 8>)
  ufun([<object>/]<user function name>, <arg 0>, <arg1>, ... <arg 8>)
 
  This allows you to create your own functions and evaluate them.
  <user function name> is the attribute that contains the desired
  user-defined function. Supplying <object> is optional; if you
  do not, the attribute will be read off the object that is
  evaluating the UFUN().
  
  <arg 0>, <arg 1>, ... <arg 8> are the functions that get passed
  to the user function as v(0), v(1), etc. (as in @trigger).
  You can pass up to 8 arguments. v(9) is always null.
  
  This function is also known as U()  (alias for TinyMUSH compatibility).

  See "help UFUN2" for more.
  
& U2
& UFUN2
  Example:
  
  > @va Object=$test *:"[ufun(testfun, v(0))]; @emit [v(0)]
  >
 &testfun object=[strlen(v(0))] [ucstr(v(0))]
  > test string
  Foo says, "6 STRING"
  string
  
  See "help UFUN3" for more.
 
& U3
& UFUN3
  A user-defined function may be as complex as you want it to be.
  If the evaluation order doesn't quite seem right, adding escapes
  or breaking up the expression will probably help.
    
  Excessive recursion in either a UFUN() or ZFUN() will cause it to
  return "#-1 EXCESSIVE RECURSION ERROR", and sets the object HALT.
  An object which is HALT may not evaluate either UFUN() or ZFUN();
  those functions will then return "#-1 OBJECT HALTED".
  
& UCSTR()
  ucstr(<string>)

  Returns <string> with all letters converted to uppercase.
  Example: ucstr(Foo BAR baz) returns "FOO BAR BAZ"
& UDEFAULT()
  Function:  udefault([<obj>/]<attr>,<default case>[,<arg>]...)
 
  This function returns the value of the user-defined function
  as defined by <attr> (or <obj>/<attr>), as if retrieved via
  the u() function, with <args>, if the attribute exists and is
  readable by you.
 
  Otherwise, it evaluates the default case, and returns that. The
  default case is only evaluated if the attribute does not exist
  or cannot be read.
 
  Examples:
    > &TEST me=[center(%0,5,*)]
    > say udefault(Test,-- BOOM --,ACK)
    You say "*ACK*"
    > &TEST me
    > say udefault(me/Test,-- BOOM --,ACK)
    You say "-- BOOM --"
 
  See also:  get(), eval(), ufun(), default(), edefault().

& ULOCAL()
  Function:  ulocal([<obj>/]<attr>[,<arg>]...)
 
  The ulocal() function is almost identical to u() in function:  it
  evaluates an attribute, either from the object performing the function,
  or another object that you control or has the same owner as you, passing
  in arguments and returning the result. When evaluating the fetched
  attribute, %# refers to the original enactor and not the 'calling' object;
  'me' refers to the object that supplied the attribute.
 
  However, unlike the u() function, the global registers r(0) through r(9)
  (%q0 - %q9) are preserved in their initial state. This means that functions
  "below" the level of the u() can reset global registers for temporary
  calculations, without needing to worry about "clobbering" the original
  values.
 
  This makes ulocal() particularly useful for global or shared code which
  calls arbitrary u() functions, where global register values need to be
  preserved from accidental user clobbering.
 
  See "help ulocal2" for examples.
 
& ULOCAL2
  Example of ulocal():
    > &FRUIT me=apples bananas oranges pears
    > &SUB-FUNCTION me=[setq(0,v(FRUIT))][extract(%q0,match(%q0,%0),1)]
    > &TOP-FUNCTION me=[setq(0,are delicious!)][ulocal(SUB-FUNCTION,%0)] %q0
    > say u(TOP-FUNCTION,b*)
    You say "bananas are delicious!"
 
  If SUB-FUNCTION had been called with u() instead of ulocal():
    > &TOP-FUNCTION me=[setq(0,are delicious!)][u(SUB-FUNCTION,%0)] %q0
    > say u(TOP-FUNCTION,b*)
    You say "bananas apples bananas oranges pears"
 
  In this second example, in SUB-FUNCTION, %q0 was set to "apples bananas
  oranges pears", so that when the u() "returned" and TOP-FUNCTION evaluated
  %q0, this is what was printed. In the first example, ulocal() reset the
  value of %q0 to its original "are delicious!"
 
  See also:  u(), setq(), r()
 
& V()
& V-FUNCTION
  V(<name of attribute>)
  V(<variable name>)

  The first form of this function works just like get(me/<attribute name>).
  It is faster and more efficient than get(), however, and so it's better
  to use v() when you are getting attributes off an object or its parents.

  The second form of this function provides a different way of getting the
  results of %-substitutions like %#, %N, %0, etc. Simply take the variable
  name (whatever follows the % symbol) and put it inside the v() function:

       v(N) is equivalent to %N
       v(!) is equivalent to %!
       v(3) is equivalent to %3

See also: SUBSTITUTIONS, get(), ATTRIBUTES

& VADD()
  vadd(<vector>,<vector>[,<delimiter>])

  Returns the sum of two vectors. A vector is a list of numbers
  separated by spaces or a delimiter, and may be up to 20-dimensional.

  > think vadd(1 2 3,4 5 6)
  5 7 9
  > think vadd(0|0|0,1|2|3,|)
  1|2|3
& VALID()
  valid(<category>,<string>)

  The valid() function checks to see if <string> is a valid member of
  <category>, and returns 1 if it is, 0 if not, and #-1 if an
  invalid category is used.
  
  The only category that's currently available is "name", which returns
  1 if the <string> is a valid object name.

  > say "[valid(name,Foobar)]"
  1 
  > say "[valid(name,!Foobar)]"
  0

& VDIM()
  vdim(<vector>[,<delimiter>])

  Returns the dimensionality of a vector.

  > think vdim(1 2 3 4)
  4
& VDOT()
  vdot(<vector>,<vector>[,<delimiter>])
  
  Returns the dot product of two vectors. A dot product is the sum
  of the products of the corresponding elements of the two
  vectors, e.g. vdot(a b c,d e f) = ad + be + cf.
  The vectors must be of the same length.
  
  > think vdot(1 2 3,2 3 4)
  20
& VERSION()
  Function: version()
 
  Returns a string which contains various version information for the MUSH
  you're on.
 
  Example:
     > say version()
     You say "PennMUSH version 1.6.0 patchlevel 0 [1/10/96]"

& VISIBLE()
  visible(<object>,<victim>[/<attribute>])
  
  If no attribute name is provided, this function returns 1 if 
  <object> can examine <victim>, or 0, if it cannot. If an
  attribute name is given, the function returns 1 if <object>
  can see the attribute <attribute> on <victim>, or 0, if it
  cannot.
  
  If <object>, <victim>, or <attribute> is invalid, the function
  returns 0.
 
& VMAG()
  vmag(<vector>[,<delimiter>]

  Returns the magnitude of a vector, using a euclidean distance metric.
  That is, for vector a b c d, returns sqrt(a^2+b^2+c^2+d^2).

  > think vmag(3 4) 
  5
& VMUL()
  vmul(<vector|number>,<vector|number>[,<delimiter>])

  Returns the result of either multiplying a vector by a number,
  or the "dot product" (elementwise product) of two vectors.
  The dot product of a b c by w x z is aw bx cz

  > think vmul(1 2 3,2)
  2 4 6
  > think vmul(1 2 3,2 3 4)
  2 6 12
& VSUB()
  vsub(<vector>,<vector>[,<delimiter>])

  Returns the difference between two vectors.

  > think vsub(3 4 5,3 2 1)
  0 2 4
& VUNIT()
  vunit(<vector>[,<delimiter>]

  Returns the unit vector (a vector of magnitude 1), which points
  in the same direction as the given vector.

  > think vunit(2 0 0)
  1 0 0
  > think vmul(vunit(5 6 7),vmag(5 6 7))
  5 6 7
 
& WHERE()
  where(<object>)
  
  This function returns the "true" location of an object. This is
  the standard location (i.e. where the object is) for things and
  players, the source room for exits, and #-1 for rooms.
  
  In other words, the "true" location of an object is where it is
  linked into the database. For example, an exit appears in the 
  room of its "home", not its "location" (the LOC() function on an
  exit will return the latter). A room's "real" location is always
  Nothing (the LOC() function will return its drop-to).
  
& WIPE() 
  wipe(<obj>/<attribute-pattern>)

  This function is equivalent to @wipe. It returns nothing. 
  
& WORDPOS()
  wordpos(<string>, <number>[, <delimiter>])

  Returns the number of the word within <string> where the <number>th
  character falls. Characters and words are numbered starting with 1,
  and spaces between words are treated as belonging to the word that
  follows them. If <number> is not within the string, #-1 is returned.
  Example: wordpos(foo bar baz, 5) returns "2"
& WORDS()
  words(<string>[,<delimiter>])

  words() returns the number of words in a string.
& XGET()
  xget(<object>, <attribute>)
  
  This function is identical to get() in purpose, but a comma instead of
  a slash separates object and attribute. There is no real advantage to
  using this instead of get(). Please see "help get()" for more details
  on the use of this function.
  
& XOR()
  [xor(<boolean value>,<boolean value>)]

  Takes two booleans, and returns a 1 if one, and only one of the two
  inputs is equivalent to true(1).  See BOOLEAN VALUES.
& ZEMIT()
  zemit(<zone>, <message>)

  Sends a message to everything zoned to <zone>, as per @zemit.
  Costs apply.

& ZFUN()
  zfun(<user function name>, <arg 0>, <arg1>, ... <arg8>)
 
  This is essentially identical to UFUN(), but the attribute corresponding
  to the user function name is read from the ZMO of the object instead
  of from the object itself. In order to read the attribute from the ZMO,
  one of the following criteria must be met:
 
  1. The object is set WIZARD or ROYALTY.
  2. The object controls the ZMO.
  3. The object's owner owns the attribute on the ZMO.
  4. The ZMO is set VISUAL.
  5. The attribute being checked is set VISUAL.
 
  See the help for UFUN() for more details on user-defined functions.
& ZONE()
  zone(<object>[, <new zone>])
 
  Returns the object's 'zone'. This is the dbref of the master object
  which defines the zone.  If the second argument is specified, the
  function tries to change the zone on the object.

See also: ZONES
& @mail
  @mail[/<switches>] [<msg-list> [= <target>]]
  @mail[/<switches>] <player-list> = [<subject>/]<message>
 
  @mail invokes the built-in MUSH mailer, which allows players to send
  and receive mail. Pronoun/function substitution is performed on
  any messages you may try to send.  

  A <msg-list> is one of the following:
        A single msg # (ex: 3)
        A message range (ex: 2-5, -7, 3-)
        A folder number and message number/range (ex: 0:3, 1:2-5, 2:-7)
        A sender (ex: *paul)
        An age of mail in days (ex: ~3 (exactly 3), <2, >1)
           "days" here means 24-hour periods from the current time.
        One of the following: "read", "unread", "cleared", "tagged",
        "urgent", "all" (all messages in all folders), "folder" (all
        messages in current folder)
  A <player-list> is a space-separated list of recipients, which may be:
        Player names
        Player dbref #'s
        Message #'s, in which case you send to the sender of that message.

  See the following topics:
    mail-sending   mail-reading   mail-folders   mail-other   mail-admin
& mail-reading

  @mail <msg #>
  @mail/read <msg-list>
        This displays messages which match the msg# or msg-list from
        your current folder.
  
  @mail
  @mail <msg-list, but not a single msg #> 
  @mail/list <msg-list>
        This gives a brief list of all mail in the current folder,
        with sender name, time sent, and message status.
        The status field is a set of characters (ex: NC-UF+) which mean:
                N = New (unread) message
                C = Cleared message
                U = Urgent message
                F = Forwarded message
                + = Tagged message
        The opposites of these (read messages, etc.) are indicated with a
        '-' in the status field in that position.
        
& mail-sending 
  @mail[/switch] <player-list> = [<subject>]/<msg>
        This sends the message <msg> to all players in <player-list>.
        If no subject is given, the message subject is the beginning
        of the message itself.
        All function subsitutes are valid in <msg> including mail(#) which
        will allow you to forward mail you have recieved to other users.
        The following switches are available:
                /send   - same as no switch
                /urgent - mail is marked as "Urgent"
                /silent - no notification to sender that mail was sent
                          Useful with large mailing lists
 
  @mail/fwd <msg-list> = <player-list>
        This sends a copy of all the messages in <msg-list> to
        all the players in <player-list>. The copy will appear to have
        been sent by you (not the original sender), and its status will
        be "Forwarded".

& mail-other
  @mail/clear [<msg-list | all>]
  @mail/unclear [<msg-list> | all>]
        These commands mark mail in the current folder as cleared or uncleared.
        Mail marked for clearing is deleted when you disconnect, or
        if you use @mail/purge. If no msg-list is specified, all
        mail in your current folder is cleared. If "all" is given instead
        of a msg-list, all mail in *all* folders is cleared/uncleared.
  
  @mail/purge
        Actually deletes all messages marked for clearing with @mail/clear.
        This is done automatically when you log out.

  @mail/tag [<msg-list | all>]
  @mail/untag [<msg-list> | all>]
        These commands tag or untag mail in the current folder.
        Tagged mail can be later acted on en masse by using "tagged" as
        the msg-list for other commands (which does *not* untag them
        afterward). If no msg-list is specified, all messages in the
        current folder are tagged/untagged. If "all" is given as the
        msg-list, all mail in *all* folders is tagged/untagged.
        (Ex: To clear all mail from Paul and Chani, @mail/tag *paul,
        @mail/tag *chani, @mail/clear tagged, @mail/untag all).
& mail-folders
  The MUSH mail system allows each player 16 folders, numbered from
  0 to 15. Mail can only be in 1 folder at a time. Folder 0 is
  the "inbox" where new mail is received. Most @mail commands
  operate on only the current folder.

  @mail/folder
        This commands lists all folders which contain mail, telling
        how many messages are in each, and what the current folder is.

  @mail/folder <folder#|foldername>
        This command sets your current folder to <folder#>.

  @mail/folder <folder#> = <foldername>
        This command gives <folder#> a name. 

  @mail/unfolder <folder#|foldername>
        This command removes a folder's name

  @mail/file <msg-list>=<folder#>
        This command moves all messages in msg-list from the current
        folder to a new folder, <folder#>.
& mail-admin
  
  The @mail command can also take the following switches:
  
    @mail/stats [<player>]    --  Basic mail statistics.
    @mail/dstats [<player>]   --  Also provides read/unread count.
    @mail/fstats [<player>]   --  Does all that, plus gives space usage.
  
    @mail/debug <action>[=<player>]
    @mail/nuke
  
  Only wizards may stats players other than themselves. The mail statistics
  commands are computationally expensive, and thus are subject to "daytime"
  restrictions. They also cost the same as a @find (100 pennies).
  
  The /debug switch does sanity checking on the mail database, and may only
  be used by a wizard. "@mail/debug sanity" just does the check; the command
  "@mail/debug clear=<player name or dbref number>" wipes mail for an object.
  "@mail/debug fix" attempts to repair problems noted in the sanity check.

  The /nuke switch destroys the post office, erasing all @mail everywhere.  
  It may only be used by God.
  
& help
This is the index to the MUSH online help files.

  For an explanation of the help system, type:    help newbie

  For the list of MUSH commands, type:            help commands
  For the list of MUSH topics, type:              help topics
  For an alphabetical list of all help entries:   help entries 
  For information about PennMUSH:                 help code
  
  For a list of flags:                            help flag list
  For a list of functions:                        help function list 
  For a list of attributes:                       help attribute list
  To see the configuration of this MUSH:          @config

If there are any errors in the help text, please notify a wizard
in the game, or send mail to dunemush@pennmush.tinymush.org.
  
& newbie
  
  If you are new to MUSHing, the help files may seem confusing. Most of
  them are written in a specific style, however, and once you understand
  it the files are extremely helpful.

  The first line of a help file on a command or function will normally be
  the syntax of the command. "Syntax" means the way the command needs to
  be typed in. In the help files, when the syntax of a command is described,
  square brackets [] mean that that part of the command is optional and
  doesn't have to be typed in. Also, pointy brackets <> mean that that part
  of the command needs to be replaced with a specific piece of information.
  
  You should not type the [] or <> brackets when entering a command.
  
(continued in help newbie2 -- type 'help newbie2' without the single quotes)
  
& newbie2

  For example, the syntax of the help command is:
  
  help [<topic>]
  
  What this means is that to get help, you would type first the word "help" and
  then you could optionally type the name of a more specific topic in order
  to get help on that topic. Just typing "help" will work too (that's why the
  <topic> part is optional).
  
  Some common commands that you should look at help for are:
  
    look   say    go    page    pose    take     give    home
  
  Just type help <command> for help. Example: help page
  
(continued in help newbie3)
& newbie3

  There is help available on every standard MUSH command. If you see a command
  or someone mentions one to you that you want to know more about, try just
  typing: help <command name> -- that will most likely bring up the help
  file on it.
  
  Please note that just because there is help available on a command does
  not necessarily mean that the command can be used on this MUSH. The
  siteadmin of the MUSH can choose to turn off some commands. If there's
  something that you would like available, and it isn't, please ask a wizard
  why not.
  
  It is also highly recommended that any new player read the MUSH manual,
  written by Amberyl. It is available by anonymous FTP from:
     ftp.tinymush.org
  in the directory:
     /pub/mud/tinymush/docs/

& topics
Help is available on the following topics:

  ACTION LISTS             ATTRIB-OWNERSHIP         ATTRIBUTES 
  BEING KILLED             BOOLEAN VALUES           CHAT
  CLIENTS                  CONTROL                  COPYRIGHT  
  COSTS                    CREDITS                  DBREFS 
  DROP-TO                  ENACTOR                  EVALUATION 
  EXECUTOR                 EXITS                    FAILURE
  FLAGS                    FUNCTIONS                GENDER 
  GLOBALS                  HERE                     HOMES
  INTERIORS                LINKING                  LISTENING
  LISTS                    LOOPING                  MASTER ROOM 

(continued in help topics2)
& topics2
  ME                       MONEY                    MUSHCODE
  NON-STANDARD ATTRIBUTES  PARENTS                  PASSWORD                 
  POWERS                   PUPPETS                  QUEUE 
  REGISTERS                ROBBERY                  SEMAPHORES  
  SETTING-ATTRIBUTES       SPOOFING                 STACK
  STRINGS                  SUBSTITUTIONS            SUCCESS 
  SWITCHES                 TYPES OF OBJECTS         USER-DEFINED COMMANDS    
  VERBS                    WARNINGS                 WILDCARDS 
  ZONE MASTER ROOMS        ZONE MASTERS             ZONES  
  
Type "help <topic name>" for help.
& ACTION LISTS
  Action lists are simply lists of actions that are all executed at once.
  You can have an action list in a user-defined command, in one of the
  a-attributes, or in many other commands.

  Actions in an action list are separated by semicolons. Each action is 
  simply a separate MUSH command. If part of the action (such as the text
  in an @emit, for example) contains a semi-colon or comma, you may need
  to enclose that part in curly braces {}. You can also nest action lists
  inside each other by enclosing each action list in braces {}.

  Substitution will be performed on the contents of action lists before
  they are executed.

(continued in help action2)
& ACTION2
  Example 1:
    > @asuccess Gift = @pemit %#={The box pops open; surprise!} ; 
        @name me=New Toy ; @desc me={A shiny new toy, just for %N!}
    > take gift
    The box pops open; surprise!
    > look new toy
    New Toy
    A shiny new toy, just for Cyclonus!
            
  Example 2:
    > &TEST me=$test:@emit {Testing; testing; one, two.} ; 
        @dolist 1 2 3={think {Test ##, success.} }
    > test
    Testing; testing; one, two.
    Test 1, success.
    Test 2, success.
    Test 3, success.

See also: ATTRIBUTES, SUBSTITUTION, @asuccess, @dolist
& ATTRIB-OWNERSHIP
  ATTRIBUTE OWNERSHIP
  
  The first person who creates an attribute on an object is the owner
  of that attribute. If you lock an attribute, using the @atrlock command,
  only the person who owns the attribute will be able to alter the
  attribute. This allows you to create standard commands on objects and
  then @chown them to others without letting them alter them. 

  Attribute ownership is NOT changed when the object itself is @chown'ed.
  To change attribute ownership, you must use the @atrchown command.

  You must control an object in order to set attributes on it.

See also: @atrlock, @atrchown, ATTRIBUTES
& ATTRIBUTES
& ATTRIBUTES LIST
& ATTRIBUTE LIST
  Attributes with (*) after them are special, cannot be set by players,
  and may only be visible to wizards or admin. For those attributes, there
  is no @-command, so you can just type 'help <attribute name>' for help.
  For all other attributes, type 'help @<attribute name>' for help.

Standard Attributes: (see @list/attribs for the complete list)
  AAHEAR        ACLONE        ACONNECT      ADEATH        ADESCRIBE
  ADISCONNECT   ADROP         AEFAIL        AENTER        AFAILURE
  AHEAR         ALEAVE        ALFAIL        AMHEAR        AMOVE
  APAYMENT      ASUCCESS      AWAY          CHARGES       COST 
  DEATH         DESCRIBE      DOES          DROP          EALIAS 
  EFAIL         ENTER         FAILURE       HAVEN         IDESCRIBE
  IDLE          LALIAS        LAST (*)      LASTSITE (*)  LEAVE
  LFAIL         LISTEN        MOVE          ODEATH        ODESCRIBE
  ODROP         OEFAIL        OENTER        OFAILURE      OLEAVE
  OLFAIL        OMOVE         OPAYMENT      OSUCCESS      OXENTER
  OXLEAVE       OXMOVE        PAYMENT       PASSWORD (*)  QUEUE (*)
  RQUOTA (*)    RUNOUT        SEX           STARTUP       SUCCESS

(continued in help attributes2)
& ATTRIBUTES2
  An attribute is part of the code on an object that makes it unique. An
  attribute can contain any sort of text -- from a single word, to a long
  paragraph, to a piece of MUSHcode. Some attributes are standard in 
  PennMUSH. That means that their effects are pre-set. 

  Standard attributes can be set using one of the following commands:
    @<attribute name> <object>=<content>
    @set <object>=<attribute name>:<content>
    &<attribute name> <object>=<content>

  It is also possible to have non-standard attributes, which can be named 
  anything you like. Please see help NON-STANDARD ATTRIBUTES for more 
  information on those. 

(continued in help attributes3)
& ATTRIBUTES3
  Any attribute name can be shortened, but a shorter forms run the risk
  of conflicting with other attribute names.  This could result in you
  setting an unwanted attribute. 

For example:
    @adesc me=think %N looks at you.
  will set your ADESCRIBE attribute just as
    @adescribe me=think %N looks at you.
  would.

  To see the attributes that are set on you or on any of the objects you own,
  you should use the "examine" command. This will list all of the attributes
  and their contents. As this can get very spammy for any large object, you
  can also examine specific attributes by using this format:
    examine <object>/<attribute>
  
(continued in help attributes4)
& ATTRIBUTES4
  Attributes can be owned by someone other than the object they are set on.
  This allows the person to change the content of just that attribute while 
  not the rest of the object. Attributes can also be locked, which prevents
  them from being changed by anyone.

  In addition to the standard attributes with pre-set effects, there are
  some special attributes that date from the days before you could set
  non-standard attributes with any name you wanted. These are the 
  attributes VA-VZ, WA-WZ, XA-XZ. These attributes have no pre-set effects,
  and were just to allow players to store any text or MUSHcode that they
  wished in those attributes. Now that non-standard attributes are available,
  it is highly recommended that you instead use them, since you can use
  longer and descriptive names for attributes, which makes it much easier
  to examine and work on objects.

See also: ATTRIB-OWNERSHIP, @set, examine, @atrchown, @atrlock, hasattr()
          get(), v(), NON-STANDARD ATTRIBUTES, SETTING-ATTRIBUTES
& BEING KILLED
 
  Getting killed is no big deal. If you are killed, you return to
  your home, and  all things you carry return to their homes. You 
  also collect 50 pennies in insurance money (unless you have >= 10000 
  pennies or you were killed via the Wizard slay command). See MONEY.  
  Generally, killing is not encouraged unless absolutely necessary.
  It can be extremely rude and annoying.

  Many MUSHes choose to disable the kill command.

See also: kill, slay, @death
& BOOLEAN VALUES 

  A boolean variable, for those of you not familiar with programming, 
  is a variable that is either true or false. Normally, a value of
  1 is considered "true" and a value of 0 is considered "false". Many
  MUSH functions return either 1 if they are true or 0 if false.
  For example, the hasflag() function tests to see if an object has
  a certain flag set on it. If
        hasflag(<object>,<flag name>) 
  is true (the object has the flag), it will return 1. If it is false, 
  it will return 0. 
  
  Now, any string is interpreted as true(1), except for the null string
  (ie, just a blank), which is considered false (0). Anything that 
  begins with a #-1 is also considered false. All dbref #s are considered
  true. Any number except 0 (including negative numbers), is considered
  true.
  
(continued in help boolean2)
& BOOLEAN2
  Note that this may differ on some MUSHes, since it is possible to use
  the Boolean value system from TinyMUSH2.2 instead.

  Examples:     
    not(foo) = 0  
    not(<null string>) = 1
    not(-66) = 0
    not(0) = 1
    not(#-1) = 1
    not(#12) = 0
  And so on...
  (note: These rules only apply when a function expects a Boolean
  value, not for strings that expect other values.)

See also: BOOLEAN FUNCTIONS, not(), t()
& CLIENTS
  Clients are special software programs that you can use to connect to 
  MUSHes. They are usually much nicer to use than raw telnet and give you
  many additional features, such as larger text buffers (so you can type
  more), backscroll, history of previous commands, macros, and so on. 

  Here is a list of common clients and the anonymous ftp sites at which
  you can get them. To find out how to anonymous ftp, ask your system 
  administrator. Please note that the below sites are subject to change.
  The below are listed solely for your information and possible benefit. 
  The developers of PennMUSH have nothing to do with the clients. 

  OPERATING                   FTP or WWW SITE/
  SYSTEM          CLIENT      DIRECTORY
  -----------------------------------------------------------------------
  UNIX            Tinyfugue   tf.tcp.com
                              /pub/tinyfugue
  WINDOWS 32-bit  MUSHClient  pennmush.tinymush.org
                              /pub/PennMUSH/Win32binaries/mushcli.zip
  MACINTOSH       MUDDweller  http://www.shareware.com (search for Muddweller)

  WINDOWS         Pueblo      http://www.chaco.com

& CONTROL
  Controlling an object basically means that you have the power to change
  the object's characteristics such as flags and attributes. It may also
  mean that you have the ability to destroy it.

  There are 3 basic rules to controlling objects:
   1) You control anything you own.
   2) A wizard controls everything.
   3) Anybody controls an unlinked exit, even if it is locked.

  Builders should beware of 3, lest their exits be linked or stolen.

  If the INHERIT flag is enabled, there are some additional rules:
  1) An object with the INHERIT flag set controls its owner and anything
     its owner owns.
  2) An object without the INHERIT flag set does not control its owner,
     but controls any object with the same owner which does not have
     the inherit flag set.
  3) If a player is set INHERIT, all of their objects may control them
     and each other.

(continued in control2)
& CONTROL2
  
  To summarize, <Object> controls <thing> if:
  
  1. <Object> is a wizard.
  
  2. <Object> owns <thing>, and <Object> is a player.
 
  3. <Object> and <thing> have the same owner, and <thing> is neither
     a player nor INHERIT.
 
  3. <Object> has the same owner as <thing>, and <object> is INHERIT.  
 
  4. <Object> has the same owner as <thing>, and the owner is INHERIT.
  
  5. <Object> is in the same zone as <thing>, and <object> passes the
     Zone lock of the zone object. Also, <thing> cannot be INHERIT,
     nor can it be a player.

See also: controls(), INHERIT, ZONES, ZONE MASTERS
& COPYRIGHT
  Any use of this help text must contain this copyright notice.
  This help text was written by the following people for the 
  following versions of MUSH:

    Jin                   TinyMUSH 1.0
    Moonchilde & Leona    PernMUSH 1.02 - 1.15
    Amberyl               PennMUSH 1.16 - 1.50p10
    Javelin               PennMUSH 1.50p11+
    Nightbird             PennMUSH 1.7.0+

& COSTS
  These are usually:
  
          kill: 10 pennies (or more, up to 100 pennies)
          page: 0 pennies
          @dig: 10 pennies
          @create: 10 pennies (or  more, up to 505M),
          @find: 100 pennies
          @search: 100 pennies
          @entrances: 100 pennies
          @link: 1 penny (if you  didn't already own it,
                          +1 to the previous owner).
          @open: 1 penny (2 pennies if linked at  the same time)
  
  Type '@config/costs' to get the costs for the particular MUSH you are on.

See also: MONEY, money(), score
& CREDITS
  
  The original TinyMUSH 1.0 code was written by Lawrence Foard, and
  was based upon James Aspnes' TinyMUD server. Since then, the code
  has been modified by the programmers of MicroMUSE (then MicroMUSH),
  and Joseph Traub (Moonchilde of PernMUSH).
  
  From January 1992 to January 1995, Lydia Leong (Amberyl of PernMUSH / 
  Polgara of Belgariad) maintained the code currently known as
  PennMUSH 1.50.

  From January 1995 on, Alan Schwartz (Paul of DuneMUSH / Javelin elsewhere)
  has been maintaining this code.
  
  Additional credits go to:
    Talek and Rhyanna: co-developers with Javelin
    Nick Gammon: win32 post
    Pavel Kankovsky and Thorvald Natvig: rewrites of things
    Naomi Novik: rewrite of the help files for 1.7.0
    Ambar (PernMUSH):  debugging and lots of other stuff (PernMUSH v1.14)
    Annalyn (PernMUSH): lots of code ideas, algorithms, general help
    Javelin and Talek: (Belgariad): lots of ideas for various things
    Delta (Twilight), Jim Miller: some portability tweaks and error fixing
    Durnik, Shaav, Varana, Henrik, and other Belgariad players: playtesting
    Rhyanna: ideas and code for various things, the revised lock system
  ... plus the TinyMUSH 2.0 mushhacks and the myriad people using this server.
& DATABASE
& DBREFS
& DBREF NUMBER
& DBREF #
  You will find the term "dbref" or "dbref number" used frequently in these
  help files and in MUSHcode. It is an abbreviation of "database reference
  number".
  
  The database is the part of MUSH that stores all the information about 
  this particular MUSH. Players, things, rooms, and exits are all objects
  in the database. Each object in the database has a unique dbref number
  that is set when the object is created. You can use the dbref number to
  refer to an object that is not in your current location, and it is 
  especially important for global code.

  Using DBREFs is also faster than using names, even if the object is
  in your location. This is because whenever you try to do something with
  an object (such as look at it, take it, etc.), the MUSH first has to
  locate the object. Since the dbref is unique, it can immediately find
  the object rather than checking through all the contents of your area
  to see if one matches the name.

(continued in help dbref2)
& DBREF2
  
  If you own or control an object, you will see its dbref number listed
  right after its name when you look at it (unless you are set MYOPIC).

  Example:
    > look me
    Cyclonus(#3PWenAMc)
    A very short desc.

  The dbref number is indicated by the number/pound sign (#). Cyclonus's
  dbref is #3. The letters following the dbref are the abbreviations of
  the flags set on the object. NOTE: the abbreviation of the OPAQUE
  flag is 'O' (o), which looks like '0' (zero) on some clients. Make sure 
  you have the right number before using it in your code!

See also: MYOPIC, OPAQUE, MUSHCODE
& DROP-TOS

  When you use the @link command on a room, it sets another room or object
  as the DROP-TO location. Any object that someone drops in the room will
  automatically be sent to the drop-to location, rather than staying in the
  room.

  If the object is set STICKY, it will instead go to its home. If the 
  room is set STICKY, all objects dropped in the room will stay there
  until the last player leaves/disconnects, at which point all of them
  will be sent to the drop-to location.

  This is very useful for keeping rooms uncluttered. 

See also: @link, STICKY, LINK_OK
& ENACTOR
  The enactor is the object that does something (enacts something :).
  This is an important concept in MUSH, because the way many commands
  work will depend on who enters the command (ie, who the enactor is).
  Any type of object can be an enactor. 

  There are two %-substitutions that involve the enactor: %# and %N. The
  first returns the enactor's dbref # and the second returns the enactor's
  name. If, for example, you have an @osucc on an object that includes the
  %N symbol, whenever someone picks up the object, that %N will be 
  replaced with the name of the enactor (the person who typed 'get <object>'
  in this case). 
  
See also: EXECUTOR, SUBSTITUTION, DBREF
& EVALUATION ORDER
  Whenever some text is entered by an object or thing, the MUSH program
  attempts to match it against a valid game command in the following 
  order of possible commands:

    Special game commands: WHO, QUIT, etc.
    "home" command
    Single-token commands: ", :, ;, +
    Exits in the room
    @-commands
    Regular game commands: get, inventory, etc.
    Enter aliases
    Leave aliases
    User-defined commands on nearby objects. All such $commands are matched
      and executed.
    If there are no user-defined commands nearby:
      If the zone of the player's location is a zone master room,
        Zone master room exits
        Zone master room user-defined commands
      Else
        User-defined commands on the zone of the player's location

(continued in help evaluation2)
& EVALUATION2
    If still nothing is matched:
      User-defined commands on the player's personal zone
    If nothing, including zone commands, has been matched:
      Global exits
      Global user-defined commands: all $commands in the Master Room are
        matched. Local commands are always checked first and ALWAYS negate
        global commands.

  Note that if something is typed in that results in a "Huh?" all the
  objects in the master room will end up being checked for it. This is
  one of the reasons why having too many global commands can lead to lag.

  Because local commands overrule global commands, you can easily prevent
  a global command from working in a specific room by setting a copy of
  the global command in that room. Alternatively, if a global command is
  oddly not working in a room, you should check for copies of the command
  word in the room (using @scan).
& EXECUTOR
  The executor of a command is the object actually carrying out the command.
  This differs from the enactor, because the enactor is the object that sets
  off the command. In some cases, the enactor and the executor will be the
  same. There is a %-substitution, %!, that is replaced by the dbref # of
  the executor of the command.

For example:
    @emit %N is the enactor and %! is the executor!
    > Cyclonus is the enactor and #6 is the executor!
    @create Box
    > Created: Object #10
    &DO_EMIT box=$emit:@emit %N is the enactor and %! is the executor!
    emit
    > Cyclonus is the enactor and #10 is the executor!

  In the first case, Cyclonus directly entered the command and was therefore
  both the enactor and the executor. In the second, Cyclonus set off the 
  command on the box, so Cyclonus was still the enactor, but the box was
  the object that was actually doing the @emit, and was thus the executor.

See also: ENACTOR, SUBSTITUTION
& EXITS
  An exit is a one-way link that takes you from its source room to its 
  destination room. To open an exit from a room, you must control that room.
  To open an exit to a room, you must either control the room or it must be 
  set LINK_OK. If an exit is set DARK is will not show up in the list of 
  obvious exits in a room.

  If an exit is set TRANSPARENT, someone who looks at the exit will also
  see the description and contents of the destination room. If an exit is 
  set CLOUDY, someone who looks at the exit will also see the contents of 
  the room beyond, but not its description. If an exits is set -both-
  CLOUDY and TRANSPARENT, the description but not the contents will be seen.
   
  You can set commands on exits and have them execute, thus potentially 
  saving objects. If you wish to do so, note that [loc(exit)] is the 
  exit's destination, and [home(exit)] is the exit's starting point. If an 
  exit @emit's something, it will be heard in the destination room.
   
(continued in exits2)
& EXITS2
  You can create an exit that sends those who go through it to their homes
  by typing '@link <EXIT>=home'.

  Starting with PennMUSH version 1.50p10, exits can have more than one 
  destination. To make an exit with a variable destination, open the exit 
  (using @open),  then type '@link <EXIT>=variable'. Finally, add an 
  attribute named 'DESTINATION' to the exit (&destination <EXIT>), which 
  will be evaluated for the dbref # of the destination room when the exit 
  is used. 
   
For example:
  @open South <S>;s;south
  @link s=variable
  &destination s=[switch(rand(3),0,#100,1,#101,2,#102)]
   
  This exit would take you to either room #100, #101, or #102 depending on 
  the random number. 

  Only wizards can create variable exits, since a variable exit can take 
  you to any room.

See also: @link, @open, rooms, link_ok, CLOUDY, TRANSPARENT, @firstexit
& FAILURE
  FAILURE  

  A "failure" usually occurs when you try to do something that is 
  governed by an @lock and you don't pass the lock. If you try to
  take a player or thing, and you don't pass their @lock, you will
  set off their @fail/@ofail/@afail attributes. If you try to go
  through an exit, and you don't pass its @lock, you will similarly
  set off its @fail/@ofail/@afail.

  Many other things can also be locked -- see @lock and locktypes for 
  more information. However, there are failure messages at this time
  only for the above, for failing to enter an object 
  (@efail/@oefail/@aefail), and for failing to leave an object
  (@lfail/@lefail/@alfail).

See also: @lock, @fail, @efail, @lfail
& GENDER
& SEX
  Gender on a MUSH is entirely up to you. You can set yourself (or any
  of your objects) to be male, female, neuter, or plural. If whatever
  is in the SEX attribute is not recognizable, the MUSH will assume 
  the object is neuter. Setting a gender attribute will enable 
  pronoun substitution by the MUSH. The SEX attribute is visual to
  anyone who wants to see it. 

See also: @sex, SUBSTITUTION
& GLOBALS
& GLOBAL COMMANDS
  A command is "global" if it can be used anywhere in the world of the
  MUSH. The standard MUSH commands are all global, so this term is 
  usually used to refer to user-defined commands on objects in the
  Master Room of the MUSH. Global commands very greatly from MUSH to
  MUSH, but you can usually find MUSH-specific help on them by
  typing "+help". 

See also: MASTER ROOM, USER-DEFINED COMMANDS, EVALUATION
& HERE
  The word 'here' refers to the room you are in. For example,
  to rename the room  you're in (if you control it), you could enter 
  "@name here= <new name>". 
& HOMES
  Every thing or player has a home, which is usually the room where
  it was created. You can reset your home or the home of any object
  you own with the @link command: @link <me|object>=<location>. You
  must also control <location>, unless that location (room or thing)
  is set ABODE or LINK_OK.

  When a player types 'home', s/he is sent back to the home room. When 
  a thing with the STICKY flag set on it is dropped, it also goes to 
  its home location. Note that if the FIXED flag is set on a player, 
  he/she cannot use the 'home' command.

  You can create an exit that sends players home by doing:
        @link <exit name>=home
  You can set the drop-to in a room to home by doing:
        @link <room dbref or "here">=home

See also: DROP-TOS, @link, STICKY, LINK_OK, FIXED, home, EXITS
& INTERIORS
  Here's a quick description of how to make things that can be entered:
        
  @create Car
  @desc Car=A shiny red car.
  @idesc car=You are sitting inside a luxurious sportscar.
  @set Car=enter_ok
  @oxleave car=climbs out of the car.   { The 'ox' messages are shown to 
  @oxenter car=climbs into the car.     { those OUTSIDE the object.
  @oenter car=joins you inside the car. { The 'o' messages are shown to 
  @oleave car=gets out of the car.      { those INSIDE the object
  @enter car=You get into the car.      { The plain messages are shown to 
  @leave car=You get out of the car.    { the one entering or leaving 
       
(continued in help interiors2)
& INTERIORS2
  Now, if you want people inside to be able to hear and communicate with 
  the outside, you also need to do the following.
   
  @set car=audible  (lets people outside hear what's being said in the car.
  @listen car=*     (lets people inside hear what's being said outside.
  @prefix car=From inside the car,
  @inprefix car=From outside,
  @filter car=* has arrived.,* has left.,joins you inside the car.,
    gets out of the car.
  @infilter car=* has arrived.,* has left.,* climbs out of the car.,
    * climbs into the car.

(The filters will keep people on the outside from seeing the 'o' messages and 
people on the inside from seeing the 'ox' messages which is a good thing.)
        
See also: enter, leave, @prefix, @filter, AUDIBLE, @listen
& LAST

  This attribute shows the last time you connected to the MUSH. It is
  only visible to objects that control you (wizards, you or your objects)
  or if you set yourself VISUAL.
& LASTSITE
  LASTSITE

  This attribute gives the name of the site you last connected from.
  Mortals cannot set it.
& LINKING  

  You can link to a room if you control it, or if it is set 
  LINK_OK or ABODE. Being able to link means you can set the homes of
  objects or yourself to that  room if it is set ABODE, and can set 
  the destination of exits to that room if it is LINK_OK.

See also: LINK_OK, ABODE, @link
& LISTENING
  
  There are two basic ways to trigger action on the MUSH. The basic way
  is to type in commands such as 'look' or '@emit'. These commands are not
  seen or heard by other players, although the results of the commands may
  be.

  The other way is to "listen" for something said/emitted in your hearing.
  There are two ways to listen for something in a room. The easiest way
  is to use a combination of @listen and @ahear/@aahear/@amhear. 

  For example:
    > @listen Welcome Mat=* has arrived.
    > @ahear Welcome Mat="Welcome, %N!
    Breaker has arrived.
    Welcome Mat says, "Welcome, Breaker!"

(continued in help listening2)
& LISTENING2
  If you need an object to "listen" for more than one pattern, you can
  also use ^-patterns.  These work similar to user-defined commands, 
  using ^ instead of $. An object must be set MONITOR to have ^-patterns
  activated.

  Syntax:  &<attribute> <object> = ^<pattern>:<action list>

  For example:
  > @set Welcome Mat = MONITOR
  > &greet Welcome Mat = ^* has arrived.:"Welcome, %N!
  > &goodbye Welcome Mat = ^* has left.:POSE says as %N leaves, "Bye!"
  Grimlock has arrived.
  Welcome Mat says, "Welcome, Grimlock!"
  Grimlock has left.
  Welcome Mat says as Grimlock leaves, "Bye!"

(continued in help listening3)
& LISTENING3
  Please note that an object CANNOT trigger its own ^-patterns, so they
  work like @ahear rather than @aahear or @amhear. Additionally, 
  unlike $-commands, @listen and ^-patterns are NOT inherited via @parent.

  Listen patterns are checked after the object's normal @listen attribute.

See also: @listen, @ahear, @amhear, @aahear, MONITOR, USER-DEFINED COMMANDS
& LISTS
  The word "list" is used in the help files to refer to a string that
  is a series of smaller strings separated by one or more spaces. A list
  can also have its elements separated by some other kind of character --
  the separating character is called the "delimiter". 
  For example, the following are all lists:

    #6 #10 #14 #12
    Rumble|Krystal|Bobatron|Rodimus Prime   ('|' is the delimiter here)
    foo bar whee blarg 
    -eek- .boing. yawp #5 7
  
  Lots of MUSHCode depends on lists and manipulating them. Normally, a list
  is made up of similar items (so the fourth list in the example is NOT a 
  typical one).

See also: STRINGS, List Functions
& LOOPING
  Looping in an object can have its good parts and its bad parts.
  The good part is when you activate part of a program multiple times
  to exhaustively perform an operation.  This can be done like this:

    &PART1 object=<action list> ; @trigger me/PART2
    &PART2 object= @select <test for being done>=<false>,@trigger me/PART1

  Looping can be a problem when it goes on without stopping.  The @ps
  command can be used to see if you are looping.  Beware!  A looping
  machine that isn't @halt'd will drain your pennies while you are away
  from the mush!

See also: @ps, HALT, COSTS, @trigger
& MASTER ROOM
  
  The Master Room enables global commands and exits. Exits in the Master
  Room may be used from any location on the MUSH. All objects left in the
  Master Room are checked for user-defined $commands. Those $commands are
  considered global, meaning that they can be used anywhere on the MUSH. 
  Normally, only wizards will have access to the Master Room; if you have
  a global command that you would like to see enabled for the MUSH, speak
  to a wizard.
  
See also: EVALUATION, GLOBAL COMMANDS
& ME
  ME   The word 'me' refers to yourself. Some things to do when 
  starting out: 
  1) give  yourself a description:      @desc me=<description>
  2) check your desc.:                  look me
  3) lock yourself:                     @lock me==me
  4) set your gender:                   @sex me=<male|female|neuter|plural>

See also: help newbie, help @lock, help @describe, help @sex
& MONEY
  The MUSH has a built-in money system, which gives a starting amount
  of money to new players and hands out a daily allowance thereafter.
  MUSH money (the default name is "pennies", but this may be different
  depending on the particular MUSH) is spent on some MUSH commands
  that are computationally expensive or alter the database. In 
  addition, every time you "queue" a command, it costs you a certain
  amount of money -- this prevents looping from getting out of control,
  since when all your money is spent, you can't queue any more commands.

  The money system can also be used on player-created objects by giving 
  them @cost/@payment/@opayment/@apayment attributes. When someone then
  pays the object by giving it the right number of pennies, the attributes
  are triggered.

See also: COSTS, give, @cost, @pay, @opay, @apay
& MUSHCODE
& SOFTCODE

  MUSHcode is the programming language available within the MUSH itself
  with which you can create user-defined commands and macros.  It is 
  sometimes called "softcode" to distinguish it from "hardcode", which is 
  the language that the source code for the MUSH server is written 
  in. (Incidentally, hardcode is written in the C programming language.)
  
  At its most basic, writing MUSHcode is just stringing together a series
  of commands that you would otherwise just type in one at a time.  You
  can store MUSHcode in attributes on any type of object you own or control
  (including yourself!).  The series of commands can be triggered by using 
  a user-defined command or by using @trigger.
  
(continued in help mushcode2)
& MUSHCODE2

  If you would like to learn more about mushcoding and how to create macros
  for yourself, the following help files may be useful.  However, the best
  way to learn is by obtaining a copy of Amberyl's MUSH manual and following
  the examples described there.  The manual is available by anonymous FTP
  from: ftp.tinymush.org in the directory /pub/mud/tinymush/docs/

  Related Help Topics (in no particular order)
  -------------------
  ATTRIBUTES    SUBSTITUTION    NON-STANDARD ATTRIBUTES 
  ENACTOR       EXECUTOR        USER-DEFINED COMMANDS
  DBREFS        EVALUATION      TYPES OF OBJECTS
  WILDCARDS     STRINGS         LISTS           
  ACTION LISTS

& NON-STANDARD ATTRIBUTES
  While there are many standard attributes in MUSH, objects can also have
  an unlimited number of attributes, with any name you wish to use. In the
  past, you were limited to attributes named VA-VZ, WA-WZ, XA-XZ; these
  are still available as standard attributes. However, it is strongly
  recommended that you use non-standard attributes and meaningful names
  in order to make maintaining your MUSHCode easier.

  To set a non-standard attribute, you can use these formats:
      &<attribute name> <obj> = <value>  OR
      @_<attribute_name> <obj> = <value> OR
      @set <obj> = <attribute_name>:<value>

  You can get the value of attributes using the functions v(), get(), and
  xget(). You can evaluate attributes using u(), eval(), and get_eval().
  All attributes can be used in attribute locks and can be 'owned' 
  independent of object ownership. 
  
See also: ATTRIBUTES, ATTRIB-OWNERSHIP, Attribute Functions
& PARENT
& PARENTS
& OBJECT PARENTS
  
  Objects may have "parent" objects, from which they can inherit attributes.
  Once an object is given a parent, it may use the attributes on the parent
  just as if the attributes were on the object itself, including checking for
  $commands. Use the @parent command to change the parent of an object.
  Players cannot have @parents.

  Objects may have multiple levels of parents - thus, if #100 is the
  parent of #101, which is the parent of #102, object #102 checks itself,
  #101, and #100 for attributes. Attributes are checked on the object
  itself first, followed by its parent, followed by that parent's parent,
  and so forth. There is a (configurable) maximum number of ancestors
  an object may have; the default is 10.
   
(continued in help parents2) 
& PARENTS2
 
  Note that the only properties inherited are attributes. In particular,
  flags and exits are NOT inherited from the parent object. Also, commands
  which walk the attribute list (such as "examine", the LATTR() function,
  the HASATTR() function, @set, and @edit) only affect attributes that are 
  on the object itself.
 
  There are some limitations to the use of @parent. The most important is
  that ^-pattern checking is not done on the parent of an object, regardless
  of what is on the child object. For the purposes of automated game checks, 
  the following attributes are not inherited: CHARGES, EALIAS, LALIAS, LAST, 
  LASTSITE, LISTEN, QUEUE, RQUOTA, SEMAPHORE, and STARTUP. 
    
  The attributes inherited from the parent are treated just like its
  own attributes by the child. Thus, when a $-command or @trigger is
  executed, "me", for example, refers to the child, not the parent,
  and the $-command's associated actions are performed by the child.
  Also, the uselock check is done on the child, not on the parent.

(continued in help parents3)
& PARENTS3
  Attributes with $-commands _are_ inherited from the parent and
  previous generations. Conflicts are resolved not by the $-command 
  name, but by the attribute name. If two attributes are in "conflict", 
  the child's attribute is used.

See also: @parent, $-COMMANDS, ATTRIBUTES
For example:

  > &TEST #10=$test:@emit I'm the parent
  > &TEST #11=$check:@emit I'm the child
  > @parent #11=#10
  > test
  (nothing happens)
  > check
  I'm the child

(continued in help parents4)
& PARENTS4
  If a parent has the same $-command name in a different attribute, however,
  BOTH the parent and child commands will execute:

(continued from previous example)
  > &CHECK #10=$check:@emit No, I'm the parent!

  > check
  I'm the child
  No, I'm the parent!
 
  @parent is most useful when several objects use common attributes.
  It is slightly faster to have $commands on the child object which
  in turn @trigger or otherwise retrieve attributes inherited from
  the parent object, rather than having the $commands checked on the
  parent object.

(continued in help parents5)
& PARENTS5
 
  Parent-object $-command checking is at its most efficient when there
  are few or no attributes on the child. Also, each additional level
  of parents further reduces efficiency.
 
  If you are "mass-marketing" your objects, you can create blank copies, 
  and @parent those copies to a template object. You can then customize 
  necessary attributes on the copy. When a buyer @chowns his copy, the 
  parent does not change, so unless you're putting data into the parent 
  that you want to make impossible to read, it's safe to allow the
  purchasers of your object to @chown their copy.
& PASSWORD
  PASSWORD

  This attribute stores your encrypted password.  It is not visible to
  anyone within the game, and cannot be altered except via the @password
  and @newpassword commands.
& POWERS LIST
  Powers can be granted only by wizards, using the @power command. 
  Powers cannot be granted to guest characters or players who are set
  UNREGISTERED. Powers normally give the player the ability to use a 
  limited set of wizard/admin powers.

  announce              Can use @wall command.  
  boot                  Can use @boot command.
  builder               Can use Builder commands.
  cemit                 Can use @cemit command.
  chat_privs            Can use Admin channels.
  functions             Can use @function command.
  guest                 Guest. Restricted command set.
  halt                  Can @halt others' objects and do @allhalt.
  hide                  Can hide on the WHO list.
  idle                  No inactivity timeout.
  login                 Not subject to login restrictions.
  long_fingers          Can do things remotely, like "get".

(continued in help powers2)
& POWERS2
& POWERS LIST2
  no_pay                Doesn't need money for anything
  no_quota              Has an unlimited quota
  pemit_all             Can @pemit to HAVEN/ulocked players.
  poll                  Can use @poll command.
  player_create         Can use @pcreate command.
  queue                 Has queue limit equal to the size of the database.
  quota                 Can use @quota commands on other players.
  search                Can do @search, @stats, and @entrances on anything.
  see_all               Sees everything as if it were Visual.
  see_queue             Can do @ps on anyone, and @ps/all.
  tport_anything        Can @teleport anything.
  tport_anywhere        Can @teleport to anywhere.
  unkillable            Can not be killed

See also: @power
& PUPPETS
  A thing is turned into a puppet by setting the PUPPET flag on it.
  A puppet object is an extension of its owner and relays everything
  it sees and hears to its owner, except if it is in the same room as
  the owner. Things relayed by the puppet will be prefixed by the name
  of the puppet.

  Puppets are useful for keeping track of what is going on in two
  rooms at once, as extensions of a player (such as a pet, for example),
  or for testing code. 

  You can control your puppets using the @force command. It is important
  to remember the DBREF numbers of your puppets so you can control them
  even if they are not in the same room with you. You can also have
  your puppets follow you by using the 'follow' command.

(example in help puppets2)
& PUPPETS2
  An example of a puppet:

  > @create Punch
  Created: Object #18.
  > @set punch=puppet
  Punch is now listening.
  Flag set.
  > @force punch=go north
  Punch has left.
  Punch> The Finishing Place
  Punch> 
  Punch> Obvious exits:
  Punch> Door <S>  
  #18 :waves hello
  Punch> Punch waves hello

See also: PUPPET, @force, DBREF
& QUEUE
  QUEUE

  The queue is the waiting line for commands to be executed by the MUSH.
  Each time you enter a command, it goes into the queue and stays there
  until its turn comes up, at which time the MUSH processes the command
  and you see the results. The MUSH can execute several commands every
  second, so normally you see results right away. However, if there are
  too many commands in the queue, there may be a delay, called lag. The
  more common cause of lag, however, is network delays between you and
  the MUSH.

  The QUEUE attribute is only visible to objects that control you 
  wizards, you, and your objects) or unless you are VISUAL.  It 
  tracks how many active commands you have in the queue.

See also: @ps, LOOPING
& REGISTERS
  A register is essentially a little reserved piece of computer memory
  that can hold some variable information that you want to pass on to
  another command.  There are ten registers on the MUSH available via
  %-substitution (%0 - %9) and ten setq registers available via %q- 
  substitution (%q0 - %q9). 

  The basic registers are filled with information that matches the 
  wildcard pattern of the command trigger. (Before you say "Huh?", here's
  an example.)

  &COMMAND me=$command *+*:@emit %0 is in register 0 and %1 is in register 1.
  > command whee+blert foo
  whee is in register 0 and blert foo is in register 1.

(continued in help registers2)
& REGISTERS2
  As you can see from the above example, the command trigger had two wildcards
  separated by a "+" sign. When the user types in the command with some words
  taking the place of the wildcards, the first register (register 0) is filled
  with whatever part of the command replaces the first wildcard (in this case,
  "whee") and the second register is filled with whatever replaces the second
  ("blert foo").  

  They can also be filled with information that is passed by an @trigger 
  command:

  &SOMECODE me=@emit %0 is in register 0 and %1 is in register 1.
  @trigger me/somecode=whee,foo bar
  > whee is in register 0 and foo bar is in register 1.

  The registers can also be accessed using the V-function (v(0) through v(9)).

  Please see help setq() for more information about the setq registers.

See also: SUBSTITUTIONS, @trigger, USER-DEFINED COMMANDS, setq()
& ROBBERY
  ROBBERY   

  Robbery is disallowed on many if not most MUSHes. If not, you will be 
  able to steal pennies (or whatever the MUSH money is called) from 
  other players, if you pass their Basic lock. The player will be 
  notified that you have stolen from them. You can only steal one penny
  at a time. 

  If you need additional money, you should probably just speak to a
  friendly wizard or @destroy some of your unnecessary objects
  rather than stealing it from other players. 

See also: rob, MONEY, money(), score
& RQUOTA
  RQUOTA

  This attribute tracks building quota if it is implemented.  It is
  settable in-game only by a wizard, and is only visible to wizards.

See also: @quota, @squota
& RWHO
  RWHO  

  This MUSH may be attached to the RWHO server that was created
  by Marcus Ranum (Jerry_Cornelius).  Every so often, the MUSH sends
  out information about who is logged in to this server.  The RWHO
  command is an internal client that talks to this server.  Most MUSHes
  might not have this command even if they actually send information to
  an RWHO server.  The reason that PernMUSH has this in-game is because
  there is also an RWHO server on the same machine.  If it was on a
  separate machine, network problems could freeze the mud.

& SEMAPHORES
  The most complicated thing about semaphores is their name. Before you try
  to use semaphores, you should first be familiar with the "@wait" command.
  If you are, then you know that normally, you type:

    @wait <number of seconds>=<action> 

  and the action takes place after that number of seconds has passed. With
  a semaphore, you instead type:

    @wait <object>=<action>
    @wait <object>/<number of seconds before timeout>=<action>

  and the action takes place after the object has been "notified" that it's
  time for it to happen. You can also set a timeout -- if the object hasn't
  been notified by the time that number of seconds has passed, the action
  will take place. Any object (player, thing, exit, room) that you control 
  or that is set LINK_OK can be used to wait actions on.

(continued in help semaphores2)
& SEMAPHORES2

  An object is notified using the "@notify" command.  When you type "@wait
  <object>=<action>", you are adding one to the SEMAPHORE attribute on the
  object. When you type "@notify <object>", you are decreasing the SEMAPHORE
  attribute on the object by one. Whenever the attribute decreases, one of
  the actions waiting on the object takes place. The actions occur in the
  order they were added. 

  You can make the semaphore attribute of an object negative by @notify-ing
  it more times than things have been @wait-ed on it. If you do so, anything
  @wait-ed on the object will add one to the SEMAPHORE attribute and the
  action will take place immediately. You can also make all the actions
  waiting on an object take place right away by using "@notify/all", or 
  wipe all the commands out and clear the SEMAPHORE attribute by using
  "@drain". Please note that all SEMAPHORE attributes are cleared out 
  whenever the MUSH is restarted.
 
  Semaphores can be used to make sure that events occur in the right order,
  or to make sure that two players can't use the same object at the same
  time. 

(continued in help semaphores3)
& SEMAPHORES3

  It's important to remember that the actions will be carried out NOT by
  the object that they are being @waited on, but by whichever object
  entered the @wait.

  Examples:
  
  > @wait semaphore=:tests.
  > @notify semaphore
  Wizard tests.
  
  > @wait timer/30=:waits 30 seconds.
  [ 30 seconds passes. ]
  Wizard waits 30 seconds.
 
See also: @wait, @drain, @notify
(continued in help semaphores4)
& SEMAPHORES4
  Semaphores can be used to enforce mutual exclusion - to prevent
  the same object from being used simultaneously by two players.
  The basic strategy is to ensure that the object always has a
  SEMAPHORE of -1, to enclose commands in an @wait, and to
  conclude the set of commands with an @notify me:

  > &doit obj = $doit: @wait me={&doer = %N; @tr me/report}
  > &report obj = "[v(doer)] did it!; @notify me
  > @startup obj = @drain me; @notify me
  > @notify obj
  > ex obj/SEMAPHORE
  SEMAPHORE[#1+i]: -1
  > doit
  obj says "Talek did it!
  > ex obj/SEMAPHORE
  SEMAPHORE[#1+i]: -1

  If a second player types doit as well, the second player's command
  is put on the semaphore queue and not run until the @notify me at
  the end of the REPORT attribute. Note the STARTUP attribute -
  because semaphores are cleared when the MUSH starts up, you must
  insure that the object gets @notify'd once when it starts up.
& SETTING-ATTRIBUTES
  
  Standard attributes are set using @<attrib> <obj>=<value>
  Nonstandard attributes are set using &<attrib> <obj>=<value> 
  Attributes may also be set using @set <obj>=<attrib>:<value>
  
  Attributes are cleared using @<attrib> <obj> or &<attrib> <obj>
  or with @wipe.
  
  Note that there is a difference between clearing an attribute
  and setting an attribute to a null value:
    @va me       <--- wipes out my VA attribute
    @va me=      <--- sets my VA attribute to be empty
  
  Empty attributes retain their flags and atrlock status. Wiped attributes
  are gone forever.
  
  See also ATTRIBUTES, NON-STANDARD ATTRIBUTES, @set, @wipe
& SPOOFING
  Spoofing is the act of making other characters think that a person
  said or did something that they did not.  This is very easy to
  accomplish, and has some good effects, which is why it is allowed.
  However, abusing it is very twinkish and will most likely get you in
  hot water with your wizards. Note that if you are being spoofed and
  want to know who is doing it, you can set yourself NOSPOOF and you will
  be notified who is making the @emits.

See also: @emit, @pemit, @remit, @oemit, and NOSPOOF.
& STACK
  For those unfamiliar with the term stack, it refers to a programming
  data structure that follows a LIFO (Last-In-First-Out) principle. The
  stack in MUSH holds the ten REGISTERS, which can be accessed via the 
  V-function (v(0) through v(9)) or via %-substitution (%0 through %9).
  
See also: REGISTERS
& STRINGS
  A string is simply a bunch of characters.  A word is a string that begins
  and ends with the space character.  A sentence is a string made up of 
  smaller substrings that are words.  Please note that a "word" or "sentence"
  in this technical sense does not have to make sense in English (or in any
  other language, for that matter). As far as mush functions and commands
  are concerned, this is a perfectly good sentence:

        Foozle 09blert bar baz foo.

See also: string functions
& SUBSTITUTIONS
  The % symbol is used in MUSH commands to indicate a substitution -- some
  other character(s) or words are substituted for whatever follows the % 
  symbol. Some common substitutions are:

     %B = a single space (just like [space(1)])
     %R = a blank line
     %N = name of the ENACTOR (object that set off the command)
     
(continued in help SUBSTITUTIONS2)
& SUBSTITUTIONS2
  If the ENACTOR's gender is set, you can use these substitutions to get the
  right pronoun for him/her:
     %s = subjective pronoun: he, she, it, they
     %o = objective pronoun: him, her, it, them
     %p = possessive pronoun: his, her, its, their
     %a = absolute possessive: his, hers, its, theirs.

Example: 
  @sex me=male
  @drop box=%N just dropped %p box.
  drop box
  > Cyclonus just dropped his box.
 
  Case makes a difference: %S will return He, She, It, They. If you need
  an actual % symbol, use %% to get it.

(continued in help substitutions3)
& SUBSTITUTIONS3
  Other substitutions:
     %va-%vz = the contents of the object's VA-VZ attributes, respectively
     %wa-%wz, %xa-%xz = as above, for WA-WZ and XA-XZ
     %0-%9   = the contents of the REGISTERS 0-9, respectively
     %# = the ENACTOR's database reference number
     %@ = the caller's dbref number. Initially same as %#, changes when 
          something like a U-FUNCTION is called.
     %! = the dbref number of the object the command is on.
     %L = the dbref of the ENACTOR's location.
     %c = text of the last command, _before_ evaluation.
     %t = a tab. Note that this may not look right on some screens. 
    %qN = the equivalent of r(N), a register set by a setq() function.
 
(continued in help substitutions4)
& SUBSTITUTIONS4
  Example: 
    (continued from previous example)
    Let's say that Cyclonus's dbref number is #10 and the box's dbref 
    number is #11. The dbref # of the room Cyclonus is standing in is #13.
    When Cyclonus dropped the box above, these were the values of the
    following %-variables:
    
    %N = Cyclonus
    %# = #10
    %@ = #10
    %! = #11
    %L = #13

See also: EVALUATION, ENACTOR, EXECUTOR, DBREFS, v()
& SUCCESS
  A "success" normally occurs when you attempt to do something that is
  restricted by an @lock and you pass the @lock. (Note that if no lock
  is set, you automatically pass it.) For example, the "basic" lock
  restricts who can pick up a player/thing or who can go through an
  exit. Whenever you successfully do either of these things, you will
  set off the basic success messages on the object whose lock you have
  just successfully passed.

  Many other actions can also be locked -- see @lock and locktypes for 
  more information. Many of these actions have standard attributes that
  you can set messages in for when someone succeeds.

See also: FAILURE, @lock, VERBS, ATTRIBUTES, @success, @asuccess, @osuccess
& SWITCHES
  SWITCHES
 
  Commands can have "switches" which modify the behavior of the
  command. Switches are attached after the end of a command.
  For example, most people are familiar with the command

    @lock me=me

  The "enter" switch to @lock allows you to lock who can enter:

    @lock/enter me=me

  A command may have multiple switches:

    @pemit/noeval/silent me=Hi!

  Help on the switches available for a command is available in the help
  file for that command.
  (If you are looking for information on @switch, see help @switch instead.)
& TYPES OF OBJECTS
  
  Everything on a MUSH is an object in the MUSH database. There are four
  types of objects: players, rooms, exits, things. The first three are
  separated from each other by being set with a special FLAG: Player,
  Room, Exit. Any object that doesn't have one of these flags is a thing.

  Unique Characteristics
  PLAYERS
    Can own other objects and can be connected to. Can receive @mail.
    Can move around, speak/pose/emit, enter MUSH commands, enter global
    commands. You can have $-commands and ^-patterns on a player.
    Players can be carried, can carry other objects, and can follow.
  ROOMS
    Fixed container objects, linked together by exits. Cannot move.
    Rooms can @emit and enter MUSH commands, but they cannot execute
    global commands. You can have $-commands and ^-patterns on a room.
    
(continued in help TYPES2)
& TYPES2
  EXITS
    Objects that link rooms and things together. Cannot move, but can
    be @teleport-ed to a new location. Exits can @emit and enter MUSH
    commands, but they cannot execute global commands. You can NOT 
    have $-commands and ^-patterns on exits. Exits can lead TO things,
    but they can only lead FROM rooms. 
  THINGS
    Can move around, speak/pose/emit, enter MUSH commands, enter global
    commands. Can send @mail as themselves. You can have $-commands and 
    ^-patterns on things. Things can carry, be carried, and can follow.

See also: EXITS, USER-DEFINED COMMANDS, LISTENING, GLOBALS
& $-COMMANDS
& MACROS
& USER-DEFINED COMMANDS
  
  User-defined commands can be created by setting $-commands on players, 
  things, and rooms. Exits cannot have $-commands. To set a $-command:

    &<attribute> <object>=$<command name>:<action list>
  
  Whenever someone in the same room as the object types the command
  name, the action list is carried out by the object, as long as:

  - the person typing the command passes the object's uselock
  - the object is not set NO_COMMAND or HALT
  
(continued in help user-defined2)
& $-COMMANDS2
& MACROS2
& USER-DEFINED2
  Any number of *'s and ?'s may be in the command name. A * matches
  any number of characters, and a ? matches any single character.  When
  the actions are executed, the values on the stack in %0-%9 are the
  portions of what the user types that match the first ten *'s or ?'s.

  For example, to make a 'wave' command, you could do the following:
    &DO_WAVE me=$wave *:pose {waves to %0.}
  You could then type:
        > wave Guest
        Rhyanna waves to Guest.

  *BE SURE TO @LOCK/USE ME==ME IF YOU SET MACROS ON YOURSELF!*

See also: STACK, SUBSTITUTIONS, @lock
& VERBS
  For most verbs there are three forms: Verb (what the Enactor sees),
  Overb (what others in the area see) and Averb (the action to be 
  taken when the event happens). Example: @Drop, @Odrop and @Adrop
& WARNINGS

  If the building warning system has been enabled in the source code,
  players may receive regular warnings about potential building problems
  on objects that they own, and will be able to check individual objects
  for warnings.

  For more information, see the following help topics:
    @warnings        @wcheck         NO_WARN         warnings list
    
& WARNINGS LIST
  The building warning system, if enabled, supports the following
  types of warnings:

  exit-unlinked         Warn on unlinked exits
  exit-oneway           Warn on exits with no return exit
  exit-multiple         Warn on multiple exits from A to B
  exit-msgs             Warn on missing succ/osucc/odrop/fail
  exit-desc             Warn on missing description
  room-desc             Warn on missing description
  thing-msgs            Warn on missing succ/osucc/odrop/fail
  thing-desc            Warn on missing description
  my-desc               Warn on missing player description

(continued in help warnings list2)
& WARNINGS LIST2
  These warnings combine the functionality of multiple warnings above:

  serious               exit-unlinked, thing-desc, room-desc, my-desc
  normal                serious, exit-oneway, exit-multiple, exit-msgs
  extra                 normal, thing-msgs
  all                   all of the above

  The warning "none" indicates no warnings.
  You can exclude warnings from a larger list by using !<warning>
  after the larger list. For example: @warnings me=all !exit-oneway
& WILDCARDS
  A wildcard is represented as an asterisk (*) in user-defined commands
  and matches any string.  For example, let's say that you want a command
  called "supercalifragalisticexpealidocious" (don't ask me why), but you
  don't want to force people to type the whole thing to trigger the command.
  You could use a wildcard in the command trigger to match substrings of it:

  &TOO_LONG_CMD object=$supercali*:@emit whee
  super
  > (nothing happens)
  supercali
  > whee
  supercalifra
  > whee
  supercalifragalisticexpealidocious
  > whee
  supercalifoobert
  > whee

See also: USER-DEFINED COMMANDS
& ZONE MASTER ROOMS
  
  Zone master rooms are a subset of zones. If a room is used as as zone
  oject, it is a zone master room (ZMR). ZMRs are like local "master"
  rooms. Exits in the ZMR are global to that zone, and $commands on
  objects in the ZMR are global to that zone. Zone master rooms are
  only defined if globals are used.  Zone master rooms should only be
  used for very large zones which have a lot of global exits.
  Otherwise, a ZMO thing should be used, because command evaluation on
  a zone master room is slower than command evaluation on a ZMO.  Large
  numbers of ZMRs may slow down the game significantly.
  
See also: ZONES, MASTER ROOM, EVALUATION
& ZONE MASTERS
  ZONE MASTERS
 
  Zone Masters are player objects which are used to mediate zone control.
  A Zone Master is an object of type PLAYER, which has the ZONE flag set.
  They are created like ordinary players, and can connect, etc.  The only
  difference is that objects owned by Zone Masters are controlled by
  anything that passes the zone lock of the Zone Master. So instead of
  @chzone-ing an object to add it to a zone, you @chown it to the ZM.
  
  Anyone who passes the zone lock of the Zone Master can @chown objects
  to it. This, however, does not refund the original creator's money or
  quota, as does normal @chown. Using a Zone Master instead of a ZMO 
  enables a higher degree of security within the zone, and allows INHERIT
  objects to be placed in the zone, since all objects within the zone have
  the same owner. $commands are not, however, inherited off the Zone Master.

& ZONES  
& ZONE OBJECTS
  Zones are areas of the MUSH which may be controlled by many people.
  Essentially, they allow group ownership of objects. There are two
  basic types of zones. One is maintained by things and rooms, and
  are the "standard" zones. These are described below. The other type
  is maintained by players. Information on this type of zone is found
  under the topic ZONE MASTERS.
  
  The default zone is NOTHING. Any building done by a player defaults 
  to belonging to the same zone that the player belongs to.
  Every zone is defined by a Zone Master Object (ZMO). The ZMO is an
  ordinary MUSH object owned by some player. A wizard may change the
  zone of an object or player to a ZMO.
  
  If the ZMO is a room, it is called a "zone master room." Most of the
  statements about ZMOs also apply to zone master rooms; for details,
  see the help topic ZONE MASTER ROOMS.
  
See "help ZONES2" for more.
& ZONES2
  
  Anyone who can pass the Zone lock of the ZMO has control over all
  objects in that zone. This, in essence, gives that player wizard
  powers within that zone. For this reason, one must be extremely
  careful with the zone locks of ZMOs!
  
  Also, $commands on a ZMO are treated as global within that zone.
  The game attempts to match $commands for the ZMO of the player's
  location, as well as $commands for the player's own zone.

  For some suggestions on how to use zones, see "help ZONES3".
  See also: @chzone, ZONE MASTERS
  
& ZONES3
  Some suggested uses of zones:
  
    1. If you are working on a building project with several people, it
       may be useful to create a zone object and @elock it to all of you,
       and ask a wizard to @chzone the players involved to the zone object.
       That way, all of the players working on the project will be able to
       modify the building.
  
    2. On a similar thread, if several players are working on a project
       involving only a few objects, it may be simpler to create a zone
       object and @chzone those few objects to the ZMO instead of resetting
       the zones of the players. Note that a player does not have to belong
       to a zone in order to change objects in that zone; all is merely
       required to pass the ZMO's enter lock.
  
    See "help ZONES4" for more.
& ZONES4
  More possible uses for zones:
  
    3. If local wizards are desired, a zone object may be created and enter
       locked to the local wizard. Players building within that zone should
       be @chzone'd to that ZMO. The local wizard will then be able to
       control anything within that domain.
  
    4. If you want restricted global commands defined over only a small area,
       you can define that area to be part of a zone, and place the desired
       $commands upon the ZMO.
& Code
The latest version of this MUSH code is available via anonymous FTP, at
pennmush.tinymush.org, directory /pub/PennMUSH/Source.  It will
be called something like pennmush-1.6.4p0.tar.Z, or similar,
depending on the version number.

For information about changes in versions of the code, see
'help changes'.

Also on that site is the MUSH manual, in /pub/PennMUSH/Manuals. It
should be called mushman.2.008.tar.Z or something similar; you should
attempt to get at least version 2.007.

Also on that site is Javelin's Guide for PennMUSH Gods, in
/pub/PennMUSH/Guide. A better way to read it is on the Web at
http://pennmush.tinymush.org/~alansz/guide.html

This code version is being maintained by Paul/Javelin. Suggestions,
comments, and bug reports are welcome; send email to
dunemush@pennmush.tinymush.org.
& changes
& 1.7.1
This is a list of changes in this patchlevel which are probably of
interest to players. More information about new commands and functions
can probably be gotten via 'help <name of whatever>'.

Information about changes in prior releases can be found under the
following help topics:
1.50p6, 1.50p7, 1.50p8, 1.50p9, 1.50p10, 1.50dune1, 1.50dune2,
1.50p11, 1.50p12, 1.50p13, 1.50p14, 1.50p15, 1.6.0, 1.6.1, 1.6.2,
1.6.3, 1.6.4, 1.6.5, 1.6.6, 1.6.7, 1.6.8, 1.6.9, 1.6.10, 1.7.0

Version 1.7.1 patchlevel 2                    January 5, 1998

Fixes:
       * References to TinyMUSH in the .txt files are now PennMUSH.
         Reported by Corum.
       * It was possible to use @name to create players with the same
         name. Ick. Reported by Sylvia.
       * utils/mkcmds.sh now produces a preindented switchinc.c,
         to match the one that gets diffed in patches. [TAP]


Version 1.7.1 patchlevel 1                    December 29, 1997

Fixes:
        * table() now behaves with ANSI_JUSTIFY. Reported by Jonathan Booth.
        * ident.c was defining strdup; so was strutil.c. Now only
          strutil.c does. Reported by Matt Philips. [TAP]
        * Bug in restart script fixed. [TAP]
        * shs.h patched to autoconfigure endianness. Reported by TN.
        * shs.h fixed to be idempotent. [TAP]
        * shs.h is now distributed with PennMUSH. You still have to get
          shs.c from export.pennmush.org if you want it.
        * README now refers to lists.pennmush.org. [TN]
        * We no longer recommend setting use_dns to no on win32 systems.
          It seems to work fine as yes.

Version 1.7.1 patchlevel 0                    December 21, 1997

Major Changes:
        * It is no longer necessary to edit src/Makefile when building.
          RWHO is now integrated, and totally runtime configured in mush.cnf.
          IDENT is now configured from dune.h. The IDENT/ and RWHO/
          directories are no more.
        * The win32 build now requires the gnu-win32 package
          (available at XXX). It can be built either with MSVC++
          or the free win32 version of gcc included with gnu-win32.
          The build is better integrated into the distribution --
          the win32/ directory is no more. [TAP]
        * You can now build with one of 3 password-encryption schemes:
          None, Unix (des) crypt(3), and shs (requires getting shs from
          export.pennmush.org). This will be useful to folks who're using
          shs encryption on Win32 platforms and then move their db to
          a Unix platform -- they can just use shs under Unix and all's well.
          This is set as CRYPT_SYSTEM in options.h
        * @log/wipe used to require entering the game account password,
          but that's non-portable. Instead, a "log_wipe_passwd" is now
          specified in mush.cnf.
Minor Changes:
        * @lock/drop on a room controls who can drop things in the room.
Fixes:
	* blind_page was written as blindpage in game/mushcnf.dst.
          Reported by Raevnos@ShadowMist.
	* udefault() was broken. Reported by John Hutchinson
        * Some lintwork in csrimalloc.c, to get rid of signed/unsigned
          warnings and others.
        * help @list fixed to show the correct @config switches.
          Reported by Leo@ATS TrekMUSH
        * @chan/gag now works correctly. Report by Vedui.

& 1.7.0
Version 1.7.0 patchlevel 11                    November 18, 1997

Commands:
        * page/blind produces a separate page to each person paged,
          so they can't tell if the page was a multipage. This is the
          same as the default PennMUSH page behavior (but see Options)

Options:
        * New mush.cnf option 'blind_page'. If 'yes', page defaults to 
          page/blind.  If 'no', page defaults to page/list. By popular 
          request. :)
        * New dune.h option MUSH_IP_ADDR. Define if your host system has
          multiple IP addresses to specify which address to listen on
          for connections. By Chil@Traveler's Tale.

Minor Changes:
        * All calls to isalnum replaced with isalpha || isdigit, because
          some linux systems appear to have a broken isalnum!
        * For some reason, the variable name 'restrict' in fun_lsearch
          broke compilation on James Cook's system. Gwennie@SNW fixed
          this by changing the name. Ok, I've changed the name, too,
          as a preventative measure. *shrug*
        * When a player can't connect because logins are disabled or
          the MUSH is full, we no longer (a) show a disconnect message
          to MONITOR players, (b) purge the player's mail anyway, or
          (c) show the player quit.txt in addition to full.txt/down.txt.
          Suggested by John Hutchinson.

Fixes:
        * When a halted player triggers a $command *:, %0 was including
          an initial space that wasn't being trimmed. Reported by
          Jonathan Booth. [TAP]
        * functions() works right again. Patch by Atuarre@ATS TrekMUSH
        * look/out allowed looking at any db#. Reported by Lews Therin@DDM

Version 1.7.0 patchlevel 10                    October 30, 1997

Minor Changes:
        * Players can now have @parents. Inspired by AJ Prowant.

Fixes:
        * @drain was doing @notify instead. Ick. Reported by Amberyl.
        * Royalty can @boot, as the help suggests. Reported by Vedui@Robotech
        * (Hopefully current) copies of hdrs/funs.h and hdrs/cmds.h are
          kept in the win32/ directory for win32 folks who don't have
          a Bourne shell and can't run utils/mkcmds.sh.

Version 1.7.0 patchlevel 9                    October 16, 1997

Fixes:
        * @clone could corrupt the db on some machines in some cases. 
          Report by Jonathan booth. [TAP]
        * @list attribs now works. Report by Corum@StormWorld.

          
Version 1.7.0 patchlevel 8                    October 15, 1997

Fixes:
        * Hopefully the final command_parse fix. 

Version 1.7.0 patchlevel 7                    October 15, 1997

Fixes:
        * The ANSI_JUSTIFY patch got left out somewhere. It's back.
          Report by John Hutchinson.
        * +channel and exits are broken in 1.7.0p6 due to our stupidity.
          Fixed again. Report by John Hutchinson.
        * @cemit was restricted to Wizards, and should have been restricted
          to Wiz or Royal. Fixed. Reported by Vedui@Robotech.

Version 1.7.0 patchlevel 6                    October 9, 1997

New Functions:
        * cand(), cor() are short-circuit boolean functions. Suggested by
          Flame who saw reference to them in a patch to TinyMUX. [TAP]
        * if() and ifelse() do about what you'd expect. Suggested by
          a number of people. [TAP]

Minor Changes:
        * Prototypes for the functions in src/local.c are now in
          hdrs/externs.h
        * round(.15,1) = .1 on many systems due to the floating point
          representation. A tiny kludge around this is now in place.
          Reported by Flame.
        * @command/disable say now disables " as well. The same applies
          to other single-character command forms. If you disable SAY,
          commands of the form "hi! are rewritten as: say hi! before
          being passed to the checker for user-defined commands
          so you need only set up $say *: to catch both. %c will, as always,
          contain the raw command as entered (i.e. "hi!). Aliases
          (like 'p' for page) are treated similarly when the aliased
          command is disabled -- you need only match $page *. [TN]
        * The Huffman compression algorithm is now 8-bit clean, in 
          preparation for a future internationalization of PennMUSH
          (Eh? Dite "help" pour aide. :) In addition, none of the compression
          algorithms treat the first character of a compressed string
          specially anymore -- they don't have to. [TAP]
        * The customize.pl script no longer copies over all the distribution
          help files from game/txt/hlp. Instead it makes customdir/txt/hlp
          into a link to game/txt/hlp, which is a good thing when future
          patches update the help files. Dedicated to Oleo.

Fixes:
        * @list/attribs showed many duplicate attribute names.
          Reported by John Hutchinson.
        * Fixed a mislabeling of allocated memory by htab.c, so mem_check
          stats will be correct.
        * @channel/gag now works.

Version 1.7.0 patchlevel 5                    October 1, 1997

Minor Changes:
        * New os2/ subdirectory with information for those looking to
          build under OS2. Maintained by Sylvia (penn-os2@pennmush.tinymush.org)

Fixes:
        * Examine/brief could sometimes cause crashes. Reported by
          Sean Fike. [TN]
        * cmds.c and command.c didn't do the right #includes for the
          original chat system. Reported by Magus.
        * Added help for @shutdown/paranoid. Reported by Sean Fike
        * @chan/decompile on a nonexistant channel didn't return an
          error. Reported by Mike Wesson

Version 1.7.0 patchlevel 4                    September 19, 1997

New command:
        * The @shutdown command now takes a /paranoid switch
          to perform a paranoid dump when shutting down
          (or rebooting, if given with /reboot as well). Idea by Flame.

New options:
        * You can define the MAILER option in dune.h to be
          something other than sendmail if you want to put a
          wrapper around the mailing program used to send out
          passwords to players using the 'register' command.
        * If you define LOCAL_DATA in options.h, you can 
          use functions in local.c to maintain your own data structures
          associated with each db object. [TN]
        * If you define the TINY_TRIM_ORDER option in dune.h,
          the trim() function takes arguments like TinyMUSH's.
	* Defining ANSI_JUSTIFY causes ljust, rjust, and center to
          work properly for ansified strings.

Fixes:
        * Null channels would get added if the chatdb's channel count
          got unsync'd with the actual number of channels in the chatdb.
          Reported by Matt@New England: The Reckoning.
	* @wcheck/all didn't work. Report by Wolverine@Holodeck1
        * HPUX needs _XOPEN_SOURCE_EXTENDED in the hints. Report by Angel.
        * db reading error messages are slightly more verbose.
          Suggested by Flame.
        * Mortals examining DARK rooms don't see contents anymore.
          Report by Jonas Oberg. [TN]
        * Attribute names may no longer contain the caret (^) character.
          It's a security risk. Noted by Rob Wilson.
        * hdrs/funs.h was being appended to, not rebuilt. Noted
          by John Hutchinson.
        * setunion fixed again, so that setunion(a a,) correctly
          returns 'a', not 'a a'. [TN]
        * Various references to mellers1 updated to pennmush.tinymush.org.
        * COPYRITE file added to explain a couple of the unclear
          points in hdrs/copyrite.h and to serve as a pointer.
        * @chan/rename didnt work. Reported by Jonathan Booth.
        * Help for entrances() updated by Naomi Novik
       	* Players no longer hear about all the channels they're
          no longer gagged on when they disconnect. Report by
          Naomi Novik.
        * The time noted in the LAST attribute now will always
          have day numbers 01-31 instead of 1-31, just like time()
          does. This makes convtime() work better on LAST for some
          systems. Reported by Valin@PernMUSH.
	* MUSHcoding a command called $attr * would crash the MUSH.
          Fixed. Reported by Sam Knowlton. [TN]
	* Disabling say now disables ", (same for pose, semipose,
          emit, and chat and their corresponding tokens).
          Reported by Flame.
	* The hint for Dec Alpha OSF now indicates that you need to
          use native malloc. Reported by Sean Fike.
	* We now check for the assert() macro in Configure. NetBSD may
          not have it, according to Logan Five.
        * Doing a LOGOUT after a @shutdown/reboot caused crashes
          because mail pointers weren't being reset.

Version 1.7.0 patchlevel 3                    August 13, 1997

Fixes:
        * setunion(,list) should work now.
        * @wall/wizard and @wall/royalty work right. Report by Alan T. [TN]

Version 1.7.0 patchlevel 2                    August 12, 1997

Fixes:
        * Linux 2 is now instructed not to use nm to find objects
          in libraries since its nm output doesn't seem to be
          BSD compatible or something.
        * Compile with CSRI malloc in debugging mode didn't work.
          Reported by TwinSuns MUSH.
        * Exits in transparent rooms with COMMA_EXIT_LIST had
          vanished. They're back! [TN]
        * More command parser bugs ironed out. [TN]
        * 'e' is examine, 'b' is brief, 'w' is whisper
           (unless you reserve them). [TN]
        * @config said conflicting things about possessive get.
          Report by Jonas Oberg.
        * When not using @prefix, audible messages were prefixed
          with "From <source>" instead of "From <source>,".
          Fixed. Report by Jonas Oberg.

Version 1.7.0 patchlevel 1                    August 7, 1997

Minor Changes:
	* New file local.c (from local.dst) makes more local hooks
          available. Some of the hooks in command.c have been moved
          here, so you may have to mess around a bit if you've already
          added things in command.c's local_startup or local_shutdown. [TN]
        * Functions can now be defined and added all within funlocal.c
          so you don't have to muck with the function.c table. [TN]

Fixes:
        * restrict_command didn't restrict commands to God correctly.
          Reported by Jason Newquist.
	* @command indicates if commands are restricted to God.
	* When COMMA_EXIT_LIST was defined, rooms with no exits
          still showed the "Obvious Exits:" message. Report by Michael Rudel.
        * Partial switch-matching for commands is back.
          And CMD_T_NEWSTYLE is gone. [TN]
	* Makefile doesn't clobber existing funlocal.c/cmdlocal.c
          any more. Report by Jason Young.
        * inv wasn't working for inventory, and other command aliasing
          flaws are fixed. Report by Corum. [TN]
        * MUSH wouldn't compile if PLAYER_LOCATE wasn't defined. Fixed.
          Report by Alan T.
        * Some leftover defines removed from game.c and mushcnf.dst
        * @lock didn't parse right. Fixed. Report by Corum.


Version 1.7.0 patchlevel 0                    July 31, 1997

The major goals of this release are to make what used to be
compile-time options into run-time options, and improve a number
of internals.

Major Changes:  

	* The hashtable functions from TinyMUSH (htab.c/htab.h) are
          now used by PennMUSH (with permission), so instead of 
          every subsystem writing its own hashtable code, they now
          all use the standard code.

        * The giant switch in game.c has been replaced by hashtabled
          commands. Patch by Thorvald Natvig.
          Groovy new features:
          * @command/enable and @command/disable for any command
          * Multiple switches (@pemit/noeval/silent) work
          * The left side of the = is always evaluated before
            the right (previously, this was compiler-dependent).
          * Command table is built during compilation, and there's 
            a standardized command interface, so adding commands
            is easier.
          * local.c contains hooks for local routines to run
            on startup and shutdown, and to use to add new commands.

        * Configuration options which restricted or disabled commands
          (READ, NO_KILL, ROBBERS, HATE_TOAD, ROY_FIND, HARSH_GUEST,
	  SITELOCK_COMMAND) have been replaced the 'restrict_command'
	  directive in mush.cnf. Check there and be sure things are
          set the way you want them!

	* Commands may be overridden by completely disabling them,
          and providing a MUSHcoded version instead.
            
        * Ident and DNS lookups are handled by a slave process
          if possible. [TAP]

        * The help files have been rewritten by Naomi Novik!

        * The MUSH now closes and reopens the log files when it
          receives a SIGHUP signal.

        * @shutdown/reboot or a SIGUSR1 signal causes the MUSH to
          dump the database and restart itself, without terminating
          connections. May be nonportable. Based on patch by 
          Cro@Spaceballs. [TAP]

New commands:
        * @command (see above)
        * @list/commands
	* @attribute, similar to Tinymush (but doesn't save data
          across shutdowns at this point, so you've got to use it
          on an @startup!). Also @attribute/info, @list/attribs.
	* @function/delete 
        * @channel/gag <channel>=<yes|no>, keeps you on the channel
          (preserving your title, etc.) but silences it so you don't 
          hear messages. The channel is automatically ungagged if
          you log out from the MUSH.
	* @conformat and @exitformat allow custom-formatted Contents:
          and exit lists. [2.2,TAP]

Minor Changes:
        * Configure now looks for libbind.a, the BIND 8.1 library
        * @config shows more of the configuration options
        * @mail/unfolder <folder> can be used to remove a mailfolder's name.
          Suggested by Julianna Barrenson.
	* The default malloc is now CSRImalloc, which is now distributed
	  in a single-file form with the MUSH. 
        * The MALLOC define in src/Makefile has been removed.
          Unlike MALLOC_D and MALLOC_O, it didn't do anything.
	* The "CHANGES" file now contains only the current
          version's changes. Older changes are in the 
          "CHANGES.OLD" file.
        * The attribute flag AF_ODARK is now assumed to be default, 
          and is thus no longer used or stored. Instead, AF_VISUAL
          is used to indicate a visual attribute (previously, this
          was indicated by the absence of AF_ODARK). To note this
          change in the db, a new DBF constant, DBF_AF_VISUAL,
          has been defined.
        * Code for "privilege tables" (like chat channel privs, 
          attribute flags, etc.) has been centralized into privtab.c

Fixes: 
        * Locks on zone exits now evaluate with the right enactor.
          Problem noted by Leonid Korogodsky. [TAP]
        * Win32 compatibility improvements. [TAP]
        * Prefer limits.h to values.h. Suggested by Atuarre.
	* SIGCHLD and SIGCLD now both work. Noted by Naomi Novik
        * If you idle out and get hidden, only the idle descriptor
          should get hidden. Noted by Gepht@Hemlock
	* With DBF_LESS_GARBAGE, garbage objects were loaded with
	  owner NOTHING instead of owner GOD, which could cause
	  crashes in the @mail code. Reported by Harvester@StarWars.
	* Problems with getrandom() on some systems fixed.
	* Help for dist3d() clarified. Reported by 
          Kova'khan@Among the Stars TrekMUSH via Leo at the same MUSH.
        * You may now use power() for integral powers of negative
          numbers. Suggested by John Hutchinson.
        * setunion(,test,|) used to return |test, now returns test.
          Reported by Ashford @ V MUSH

& 1.6.10
Version 1.6.10 patchlevel 6		      May 11, 1997

Fixes:
	* inc() and dec() didn't work right with NULL_EQ_ZERO.
	  Fixed. Report by Dennis DeMarco


Version 1.6.10 patchlevel 5		    April 29, 1997

New Commands:
	* @channel/title sets a player's title for a channel.
	  The title appears prepended to their name.
	  I forgot this, and Thorvald Natvig noticed.

Minor Changes:
	* The inc() and dec() functions can now increment and
          decrement strings that end in integers. For example:
	  inc(LINE_10) => LINE_11
          inc(LINE-10) => LINE-9   (incrementing -10)
	  inc(LINE1.9) => LINE1.10 (incrementing the 9)
	* The LOWER_MATH option has been removed. Everybody
	  gets shr(), shl(), inc(), and dec().
	* New attributes OIDESCRIBE and AIDESCRIBE do what you'd 
	  expect for the internal descs of objects. Suggested
	  by Stacy Robinson.
	* @chan/on by a Wizard always succeeds, even if there's a 
	  join lock. Suggested by Mike Wesson.
	* Enhanced protection against malicious ANSI codes.
	* @channel/decomp displays locks in a better format.
	  Suggested by Naomi Novik.
	* Numbers are now checked to be sure they're not so
	  large as to bring down the system, at least in theory.
	  Suggested by Atuarre.
	* Configure rebuilt under dist-3.0 pl70.
	* queue_write has been modified to reduce the number of
	  packets sent out on the net; it only sends when needful
	  and lets the usual output loop handle most output.
	  The many packets issue was noted by Doogie.
	* All references to "parent rooms" have been changed to
	  "zone master rooms" for clarification. Noted by Jonas Oberg.

Fixes: 
	* Long output should no longer cause NeXT
	  systems to disconnect the user. Fix by Mike Kienenberger
	* Long output should no longer cause Win32 systems to
	  disconnect, but it will throw out the beginning of 
	  the output. Fix by Hans Engelen.
	* Bad objects on chat channels are now removed when the
	  chatdb is loaded. Suggested by Dennis De Marco.
	* help for last() added. Report by Flame.
	* Objects couldn't be added to object channels. Fixed.
	* If a site matched in access.cnf, but didn't specify 
	  a certain access rule, a later matching site could. This
	  is bad for 'register', and not what was intended (that
	  a matching site completely controls that site's access).
	  Now fixed. Report by William Browning.
	* If you're on a channel but don't pass the see-lock,
	  @chan/who returns a better error. Report by Cro.
	* help for remove() now mentions delimiters. Noted by J. Wilcox.
	* All tabs in helpfiles replaced with spaces. [TAP]
	* Loading a db that didn't have garbage objects stored
	  caused a slew of warnings about null names. Should be fixed
	  now. Reported by Atuarre.
	* FreeBSD hints improved, thanks to Atuarre and Doogie.


Version 1.6.10 patchlevel 4		    March 3, 1997

Major Changes:
	* The disk db can now be dumped without including GARBAGE
	  objects, which may make it somewhat smaller. [TAP]

Minor Changes:
	* The %? substitution returns the current function invocation
	  count and recursion depth as two space-separated numbers. [TAP]
	* dig() can take a single argument instead of 3.

Fixes:
	* set(obj/attr,flag) no longer says "Set" when the object or
	  player is QUIET. Reported by Graywolf.
	* Search_All players couldn't use @search. Now they can.
	  Reported by Cro.
	* lnum(2,1) didn't work right, and things were broken with
	  floating point args to lnum. Fixed.


Version 1.6.10 patchlevel 3		 February 9, 1997

New function:
	* graball() as per TinyMUSH 2.2. [TAP]

Fixes:
	* On some systems, make clean would go into an infinite loop
	  if src/CSRI didn't exist. This should now be fixed.
	  Report by Cro@Spaceballs.
	* Restart script now looks for minimal.db.gz if minimal.db.Z
	  can't be found. This helps people running under Mklinux
	  on Power Macs(!). Report by Jason Newquist.
	* Fix to matchall(). [TAP]
	* move.o doesn't compile if FIXED_FLAG isn't defined.
	  Noted by Andy Jalics.



Version 1.6.10 patchlevel 2		 February 2, 1997

Minor Changes:
	* If forking to do dumps, lower the priority of the dumping 
          process to keep the parent process more responsive.
	  Based on a patch by Doogie@ATS TrekMUSH.

Fixes:
	* Code cleanup and fixes to comp_w.c. Problems reported by
	  Mike@TBFF
	* Portability fixes for alpha-linux systems. Thanks to Roger
	  Chen for facilities to work on this.
	* Added help for @dump/debug. Report by Flame.
	* Note added to game/txt/Makefile about braindead Irix 6.2 make
	* Ident source files now do better #ifdef'ing of Unix include
	  files to help out Win32. 
	* Configure changes to enhance portability.


Version 1.6.10 patchlevel 1		 January 25, 1997


Commands: 
	* New command: @dump/debug. Like @dump/paranoid, but
	  it also tries to fix the memory db, so a shutdown/restart
	  may not be necessary. It is never forked. Suggested by Atuarre.

Fixes:
	* externs.h now declares crypt() as char *, not const char *.
	* free_access_list's declaration is now K&R compatible again.
	* repeat() now doesn't work with a null string, which prevents
          a denial of service attack. Report by Atuarre. [TAP]
	* Fencepost error in huffman compression code fixed.
	  Report by Mike Wesson. [TAP]
	* idlesecs() is now referenced in pennfunc.hlp. Report by Flame.
	* parse() is now referenced in pennfunc.hlp. Report by Sandi Fallon.
	* lsearch() now gives the correct types in the help.
	  Report by Sandi Fallon.
	* Halted messages now indicate the object that was halted,
          even if they are halted as the result of a chown.
	  Report by Sandi Fallon.

Version 1.6.10 patchlevel 0              December 16, 1996

Major Changes:
        * The attribute matching order has been cleaned up. Code by [TAP]
          If you do ex obj/attribpattern, and...
          1. If attribpattern has no wildcards:
             a. Return attribpattern's value if set, else
             b. Return the value of an aliased attribute, if any.
          2. If attribpatern has wildcards:
             a. Return anything which matches the pattern, and
                don't bother about aliases.

        Here's a little example:
                     only DESC set   only DESCRIBE set    both set
ex foo/desc          DESC            DESCRIBE             DESC
ex foo/desc*         DESC            DESCRIBE             both
ex foo/describe      (error)         DESCRIBE             DESCRIBE


Minor Changes:
        * parse() is now an alias for iter() [TAP]
        * Attribute set/clears report the name of the attribute in the
          set/cleared message. [TAP]
        * fun_lattr is now in fundb.c. [TAP]
        * Improved setq/setr help. [TAP]

Fixes:
        * Typo in help evaluations corrected. [RLM]
        * The side-effect version of lock() no longer returns a value.
          Reported by Corum.
        * help quota() added. Report by Dennis De Marco.
        * help INHERIT updated to reflect current control structure.
          Suggested by Vedui.
        * vmul() with a separator now returns the vector separated with
          that separator, as promised. Report by Atuarre@TrekMUSH.
        * FIXED now overrides STICKY, so you can't set yourself STICKY,
          get yourself dropped, and go home. Report by Anthony Ivan.
        * lsearch(all,flags,c) worked, but lsearch(all,flags,Pc) didn't!
          This is fixed. Report by Flame.
& 1.6.9

Version 1.6.9 patchlevel 9               November 18, 1996

Fixes:
        * A Wizard doing @find on a MUSH with garbage crashes the MUSH.
          Fixed. [TAP]
        * Fairly major security problem due to a typo in the player-
          destruction code fixed. Reported by Dennis DeMarco.


Version 1.6.9 patchlevel 8               November 10, 1996

Major Changes:
        * The control system has changed slightly: only wizards
          control wizobjects and only royalty control royobjects.
          If a mortal's object gets wizbitted, the mortal will
          cease to control it. Also, protection is now afforded
          to players from non-inherit objects.

Fixes:
        * Setting an @listen on a room caused a crash. Fixed.
          (Note: @listen on rooms still doesn't work - it's not
           supposed to -- use LISTENER and ^patterns -- but at
           least it doesn't crash. :)  Report by Flame@B5.
        * dune.h.dist now defaults the index and rules indx files
          to ending in .idx, as they should. Noted by Jason Newquist.



Version 1.6.9 patchlevel 7               October 30, 1996

Functions:
        * The help for vmul() suggested it did an elementwise product
          of 2 vectors, returning a vector. In fact, it was doing a
          dot product (sum of the elementwise product, which is a scalar).
          vmul() now does what the help suggests, and vdot() does
          a dot product.

Fixes:
        * Bug in comp_w.c (word-based compression) which could cause
          loss of subjects in @mail has been fixed. [NJG]
        * Help for "control" made more explicit, and help for "controls()"
          references "control", not "controls".
        * @wait 0 now queues its subject immediately, rather than waiting
          1 second. [TAP]
        * The "Patchlevel" file is now more grammatical. For Sam Knowlton. :)
        * Variables named "listen" have been renamed "listener" to
          remove compiler warnings about shadowing the listen() system call.
          Reported by Flame@B5


Version 1.6.9 patchlevel 6               October 24, 1996

Fixes:
        * Removed needless calls to tprintf() within do_log() in 
          access.c
        * Fixed the variable j in fun_lnum to be the right type


Version 1.6.9 patchlevel 5               October 15, 1996

Options:
        * COMMA_EXIT_LIST causes exit lists to be comma-separated,
          and include the word "and" before the last exit. [NJG]

Functions:
        * lnum() with multiple arguments now behaves exactly like
          Tiny 2.2's lnum().

Minor Changes:

        * @pcreate failure messages distinguish between bad passwords
          and bad names. Related to a suggestion by Philip Mak.

Fixes:
        * elements() used to put a leading space in output. Fixed. [RLM]
        * index(foo|||,|,2,1) now returns nothing, instead of ||,
          as it should. Fix by Harvester@StarWarsMUSH.
        * @cpattr a/DESC=b (where a has a DESCRIBE attribute and no DESC
          attribute) correctly grabbed DESCRIBE from a, but copied it to
          DESC on b. This is now fixed. [TAP]
        * Various unused variables and missing prototypes fixed. [NJG]
        * More win32 fixes. [NJG]
        * Revised comp_w.c to handle table overflow better. [NJG]
        * splice() wasn't putting spaces back in between words.
          Reported by Philip Mak.
        * Help for aposs() was never added. [MPC]
        * mkindx doesn't compile on systems without strcasecmp. Fixed.
          Reported by Stephen Sanderlin.
        * Configure: -lsocket is used if it's found (also -lcrypt, -lnsl)
        * Various missing includes fixed
        * Linux systems weren't doing daylight savings time right.
          We now always try to use tm_isdst = -1 to get this right.



Version 1.6.9 patchlevel 4               October 9, 1996

Fixes:
        * Restart script fix in 1.6.9p3 is buggy. Fixed the fix.


Version 1.6.9 patchlevel 3               October 7, 1996

Changes:
        * @wipe/wipe() of a single attribute (no wildcards) no longer
          checks the SAFE flag on the object.
        * Wildcards are now accepted for the attribute name when setting
          attribute flags.

Fixes:
        * @succ and &succ could create duplicate success attributes.
          Fixed so that @succ -> SUCCESS and &succ -> SUCC,
          and no more duplicates. [TAP]
        * Help for @purge had disappeared. Back.
        * Forgot to include restart patch mentioned in 1.6.9p2 [PeaK]


Version 1.6.9 patchlevel 2               October 5, 1996

New Compile Options:

        * The behavior of attributes is now configurable; you can
          emulate attribute setting behavior from 1.6.8 and earlier,
          use the currently recommended settings, or anywhere 
          in between. [TAP]

Functions:

        * lnum() now takes an optional second argument, which is the
          number to start with, e.g. lnum(3,4) => 4 5 6
          Suggested by [MPC]

Fixes:
        * @mail/debug clear=<player> now clears all the player's
          mail, not just their current folder. Fix by
          Leonid Korogodsky.
        * look/outside at an ambiguous name crashed. Report by Vedui.
        * New hints file: linux_2.sh
        * Help for setq() now included. Report by Flame@Babylon5
        * Added -w to the ps in restart so the output isn't
          truncated. [PeaK]
        * Restart changes to prevent some race conditions under Linux 2.0
          [Peak]


Version 1.6.9 patchlevel 1               September 26, 1996

New Function:

        * setr() is like setq() but returns the string as well.
          It's identical to [setq(#,string)]%q#. Suggested by Adam Dray.

Fixes:

        * Bug with @clone fixed. Report by Vedui.
        * Bug with @mail folder 15 fixed. Report by Vedui.
        * @sitelock/register worked backward. Fixed. Report by [MPC]
        * rnum() now requires that you can examine the room.
          By Jason Rhodes, with minor mods.
        * Better messages when a player or thing is set audible.
          Suggested by Babylon5@kuwait.net
        * Configure now uses your email address instead of your name
          when trying to subscribe to the mailing list; on some systems,
          it's hard to get a valid name -- getting an email address
          is usually possible. Suggested by Cro@Spaceballs
        * Configure no longer adds multiple copies of the same gcc
          warning flags when you run it again. Reported by Cro@Spaceballs

Version 1.6.9 patchlevel 0               September 16, 1996

Attribute Rewrite [TAP]:

        * There is now a distinction between an empty attribute and
          a non-existant attribute:
                @va me          <--- wipes out my VA attribute
                @va me=         <--- sets my VA attribute to be empty
          Empty attributes retain their locks and flags; wiped attributes
          are gone forever.
        * @set and set() can not wipe out attributes. @wipe and wipe()
          will.
        * You can now include ':'s in $-command and ^-command patterns
          by escaping them with '\'.
        * Standard attribute names are kept in a string table and
          memory is not allocated for them. We guesstimate a 3-5%
          savings in memory use from this change.
        * objmem() and playermem() are now more accurate.
        * Internal changes: new attribute flags AF_STATIC, AF_COMMAND,
          AF_LISTEN; atr_comm_match doesn't look directly at compressed
          strings any more; restructured some routines (atr_clr to clear
          attributes, atr_add to set them).

Fixes:
        
        * Add help topic SETTING-ATTRIBUTES to explain the above.
        * Fixed small error with closing a NULL file in access.c [TAP]
        * Improved help for @destroy
        * Dashed lines in @mail are now 2 hyphens longer. [MPC]
        * The Configure hints files weren't properly used when
          compiling with gcc.
        * The color flag is now aliased to colour as well. [MPC]
        * With MAIL_SUBJECTS, the @mail/list could get scrambled
          for messages from players with long names. Reported by
          Leto@DuneII.
        * Small memory leak when access.cnf is reloaded via kill -HUP
          has been fixed.
        * Vestige of old TEMPLE code removed from do_drop. Reported
          by Mike Selewski.

& 1.6.8
Version 1.6.8 patchlevel 1               September 7, 1996

Fixes:
        * The mail*() functions were broken due to a typo. [MPC]
        * The addr field in the descriptor structure has been expanded
          from 50 characters to 100 characters, because you'd really
          like to store the entire ident response from encrypting
          ident daemons.
        * The MAIL: announcement at login now counts your cleared
          mail in your mail totals, in case something clears mail for
          you while you're offline. Suggested by Mike Wesson.
        * Better string protection for parse_chat which may fix
          a potential crash when speaking on +channels.

Version 1.6.8 patchlevel 0               September 3, 1996

This is intended as a maintenance release because 1.6.7 has had
many rapid patches to achieve stability.

Fixes:
        * "make install" now implies "make all". Corrects a problem
          with not remaking hdrs/buildinf.h.
        * README file now shows the utils directory in its directory tree.
          Reported by Mike@StarWars.
        * On startup, PennMUSH now logs its version information.
        * @log/wiz was logging to trace log, not wiz log. Reported by
          Dean Moore.
        * @mail system behaved badly if you @shutdown on an empty
          maildb on some systems. Reported by Mike Selewski.
        * Detection of getpagesize() system call is now handled by 
          Configure. Fixes problems on Irix, reported by Mike Selewski. 
        * Minor typo in Irix hints file fixed.
        * Stupid misspelling of August in CHANGES-10 fixed.

& 1.6.7
Version 1.6.7 patchlevel 6               August 31, 1996

Fixes:
        * The attribute clear fix in 1.6.7p5 is buggy. Now it's really
          fixed. Report by [MPC].


Version 1.6.7 patchlevel 5               August 30, 1996

Fixes:
        * Sites not listed in the access.cnf file should have been
          allowed, not denied access. Fixed. Best report by Cwilla@Victory
        * A little more info in mush.cnf about how player_creation and
          access.cnf interact
        * Trying to clear a never-existant attribute got the right
          error message, but clearing an attribute that had existed,
          but been already cleared got the "Foo - Set." message.
          Fixed - atr_add now skips disposed attributes.  Report by [MPC]


Version 1.6.7 patchlevel 4               August 28, 1996

Fixes:
        * Bug in mail functions that caused mail(1:0) to crash
          has been fixed. Reported by Corum@StormWorld.
        * Another Win32 fix by Pat Pinatiello.


Version 1.6.7 patchlevel 3               August 28, 1996

Fixes:
        * Configure wasn't setting HAS_SENDMAIL correctly because the
          updated config_h.SH wasn't included in the diff!
        * @mail/clear's message about unread mail was screwy.


Version 1.6.7 patchlevel 2               August 27, 1996

Fixes:
        * Forbidden_Site wasn't working quite right
        * Win32 compatibility improvements suggested by Pat Pinatiello.
          Hopefully, no further real hacking should be required to 
          build under Win32 with Visual C++. Pat's instructions included
          as win32/README.visualc++


Version 1.6.7 patchlevel 1               August 27, 1996

Fixes:
        * #ifdef's and the like were missing which prevent compilation
          unless HAS_SENDMAIL and CHAT_SYSTEM (>2) were defined.
          Fixed by [TAP].


Version 1.6.7 patchlevel 0               Augest 22, 1996

Major Changes:

        * The lockout.cnf and sites.cnf files are no longer used.
          Instead, the file game/access.cnf controls all aspects of
          site-based (or, with ident, possibly user-based) access.
          Sites can be explicitly allowed or denied the ability to:
            * Connect to guest players
            * Connect to non-guest players
            * Create players
          Sites can be configured to:
            * Use email registration (see below)
            * Set all players from the site SUSPECT
          See the file game/access.README for file format information.
          The LOCKOUT and WCREATE defines have been removed from options.h.

        * A new access option, email registration, is available.
          From the connection screen, the command
            register <player> <email address>
          will create the player with a random password, which will be
          emailed to the address. The email address is stored on the player
          in the wiz-only attribute REGISTERED_EMAIL. 
          Obviously, this requires that the system have a way to send email.
          Ideas in this code came from Jim Cook.

        * @powers are now tabled in flags.c.

        * Nick Gammon's word-based compression algorithm is now
          COMPRESSION_TYPE 3. This algorithm may be faster than
          Huffman on the whole, and may provide better compression
          for large (>1.5Mb of text) databases.

        * @mail message-lists now understand the format [folder#:]msg[-msg]
          For example, the first 3 messages in folder 1 are 1:1-3.
          @mail commands that are not given any message list are assumed
          to apply to all messages in the current folder. You can also
          do this explicitly by using the word "folder". When you use
          the word "all", you match all messages in all folders.
          For example, try: @mail all
          @mail internals rewritten to increase code reuse.

New Commands:

        * @sitelock has got an additional syntax to support the new
          access.cnf system.

New Functions:

        * powers() returns the list of powers set on a thing.
          If HASPOWER_RESTRICTED is defined, you must be able to
          examine the thing to do this.
        * mail(), mailtime(), mailstatus(), and mailfrom() now accept
          this syntax:
                mail([<player>,] [<folder #>:]<message #>)
        * cemit() does what you'd expect. Suggested by [MPC].

New Powers:

        * Open_Anywhere power allows the player to open an exit between
          to any room, even if the player does not control the source
          or target room.


Minor Changes:

        * Previously, a player with the Halt power could use
          @halt obj=command to effectively @force any object.
          This form of @halt is now only allowed if you control the
          object. Bug reported by Flame.

        * When EXTENDED_ANSI is defined, ansi codes are stripped out
          of strings before checking them against LISTEN and ^patterns.
          Suggested by Mike Wesson.

        * HAVEN players are no longer notified when they send back
          an @haven message in response to a page. Page-locked players
          still are. Suggested by Naomi Novik.

        * @decompile me results in a decompile with "me" as the object name
          @decompile <player> results in the player's name as the object name
          @decompile of an exit will use the exit's short name instead of
          its full name for setting attributes and flags. 

        * Utilty scripts (customize.pl, update.pl, update-cnf.pl, 
          fixdepend.pl, and make_access_cnf.sh) are now in the utils/
          subdirectory.

        * Default rwho server is now littlewood.math.okstate.edu,
          which replaces riemann, which has been turned off.

        * time() and convsecs() now indicate the first 9 days of the
          month as 01..09, rather than 1-9, which makes convtime()
          happier when you convert back.

        * You may @tel an exit back into its own room. Added for
          compatibility with other MUSH flavors. Suggestion by Philip Mak.

        * Dark connections are now broadcast only to MONITOR wizards and
          royalty. This involved replacing the raw_broadcast and
          toggle_broadcast functions with a new flag_broadcast function
          which subsumes them. Suggestion by Philip Mak.

Fixes:
        * Noted the 256-character limit on channel descriptions in the help.
        * abs() now deals correctly with floating points.
        * Win32 compatibility improvements suggested by Pat Pinatiello.
        * Updates to BUGS, README.Deprecated, and FAQ [TAP]
        * An ANSI_NORMAL is sent at the end of the Doing message in WHO.
        * mail() and related functions now accept "me". Bug noted by
          Mike@TBFF
        * Help for @squota no longer says that it works like @quota
          when no limit is given, because it doesn't. 
        * Bigram compression was not freeing memory that it used
          for initialization. Fixed, and made faster.
        * Help for @unlink fixed; you can't pick up unlinked exits. [TAP]
        * Potential string overflow in new_connection fixed. Idea by [TAP]
        * Code cleanup: many old sections that were commented out
          with #ifdef NEVER ... #endif have been removed.
        * @set obj=!going gave an error message but still reset the flag.
          Now it should just give the error. Reported by Philip Mak.

& 1.6.6
Version 1.6.6 patchlevel 0               July 28, 1996

This version involves primarily cleaning up and streamlining code
in preparation for major internal changes in later releases.

Major Changes:
        * The following options are now standard and no longer turned
          on via dune.h/options.h: RALPH_LOCKS, EXTENDED_MAIL, 
          INHERIT_FLAG. [TAP]

New Commands:
        * @firstexit command moves an exit to be first in the list of 
          a room's exits. Based on contrib/topexit.165p3 by Marlek@Earth1996
          (but note that it requires control over the *room*, not the
          exit).

New Functions:
        * poll() returns the current poll. By William Knopes.

Flags:
        * TEMPLE flag has been removed. This requires adding a new
          DBF bit. [TAP]

Minor Changes:
        * Admin no longer automatically pass leave-locks and NO_LEAVE.
          Suggested by Naomi Novik. [TAP]

Fixes:
        * Users could cause an infinite loop with @mail/fwd. Fixed.
        * The fix to pmatch() in 165p4 didn't quite do the job.
          Alex's does. [TAP]
        * @mail/stat commands now show correct number of cleared messages.
          Bug reported by [MPC]
        * Typo fixed in help for items() [MPC]
        * help for BUILDER now calls it a power, not a flag.


& 1.6.5
Version 1.6.5 patchlevel 4               July 9, 1996

New Functions:
        * entrances() works like @entrances, including the cost.
          Suggested by Julienna@TrekMUSH.

Commands:
        * whisper/list takes multiple recipients. Suggested by [MPC].

Minor Changes:
        * A DARK-reconnected message has been added. Idea by [MPC]
        * LFAIL/OLFAIL/ALFAIL attributes now control the message
          seen when a player fails to leave an object due to the
          NO_LEAVE flag or a leave-lock.  By Naomi Novik.

Fixes:
        * pmatch() on a DARK or hidden player by an unpriv'd player
          now returns #-1 (can't find the player).
        * inc(very_big_n) now works exactly like add(1,very_big_n) instead
          of returning a huge negative number. Same for dec(). 
          Reported by [MPC].
        * Fixed spelling of Tinyfugue in help @decompile. [MPC]
        * Documented the way hasflag() works a bit better to forestall
          a common confusion: why hasflag(me,r) doesn't check for the
          royalty flag.
        * If a player tries to join a channel she's already on but
          which has since been locked against her, she receives the
          already-on-channel message now instead of the can't-join
          message. Suggested by Cwilla@VictoryMUSH.
        * Compile-time information in @version has been expanded and
          made much more robust for systems whose make program is
          broken. We now create the file hdrs/buildinf.h at the
          beginning of each build, which contains the info.
        * WHO at the connect screen works correctly now even if 
          #0 is privileged. Bug reported by Doyce Testerman.


Version 1.6.5 patchlevel 3              June 29, 1996

New Command:

        * @shutdown/panic causes a panic dump and shutdown. God-only. [RLM]

Minor Changes:

        * When you destroy a room you don't own, the "wrecking ball"
          message now includes the name of the owner, like the messages
          when you destroy objects you don't own. Suggested by
          Matt Chatterley.
        * The channels() function, with no arguments, returns the
          list of all channels (which the player can see).

Fixes:
        * When you try to get an object that's not in your location,
          and POSSESSIVE_GET is not defined, you don't receive
          any message at all. Fixed by Thaddeus Parkinson.
        * DARK-disconnect messages now appear.
        * All calls to random changed to getrandom (except the one
          in getrandom!), and the prototype for random removed from
          utils.c, where it causes conflicts for at least OSF/1.
        * portmsg.c extensively hacked to use the autoconfiguration
          info so you can "make portmsg" on supported systems.
        * Help for mortal() and @mortal removed. [RLM]


Version 1.6.5 patchlevel 2              June 19, 1996

Fixes:
        * @grep didn't check to be sure you were allowed to see
          the attributes it searched. Reported by Mike Wesson.


Version 1.6.5 patchlevel 1              June 12, 1996

New Functions:
        * channels(dbref) returns the list of channel names that 
          dbref is on.

Fixes:
        * When paging player(s) with spaces in their names, the
          LASTPAGED attribute stores them with quotes around them,
          so that repaging will work.
        * @mail/fwd shows you how many players it successfully
          forwarded to. 
        * @chzone here=none produced a spurious message if here was
          Wiz/roy. Fixed. Reported by Matt Chatterley.
        * udefault failed to evaluate the arguments it passed to the
          attribute to be u'd. Reported by PeaK.
        * Added include of sys/types.h in ident code. Necessary for
          FreeBSD.
        * @chf would not return a Huh? Fix by Hemlock MUSH admin.
        
Version 1.6.5 patchlevel 0              June 2, 1996

Database:
        
        * The "One" character in minimal.db.Z (#1, aka God) is now
          distributed without a password. This takes care of people
          who don't have crypt(3) or have a modified one (FreeBSD),
          since you now log in without a password, and set one,
          and all is well.

Documentation:

        * README has been extensively updated.

Minor Changes:

        * When paging, LASTPAGED is set to the list of succesfully
          paged players' names, if any page was successful. This
          is how page/list always worked; now applies to normal page.
        * &foo obj = bar used to set FOO to " bar". Similarly, you
          could use page/noeval (or any speech command with /noeval)
          to page messages with initial spaces. For TinyMUSH compatibility,
          this is no longer possible; leading spaces are trimmed now. [TAP]
        * F_INTERNAL flags (like GOING) are now visible unless they're
          also F_DARK. [RLM]
        * When you @decomp obj/atr and atr doesn't exist, you now get
          a message about it. Suggested by Matt Chatterley.
        * PREFIX semantics now like INPREFIX (see 1.6.4p2) [TAP]

Fixes:

        * Bug in parse.c which could causes crashes fixed. Reported
          by Atuarre. [TAP]
        * On at least 2 systems, the system date was screwed up,
          which made updating dune.h and options.h still produce
          files younger than dune.h.dist and options.h.dist.
          This is not our fault, but we'll fix it anyway - now we
          touch dune.h.dist and options.h.dist before we update
          dune.h and options.h. 
        * @wiping a STARTUP attribute didn't reset the STARTUP flag. [TAP]
        * Fixed bugs in the freebsd hints.
        * All of a sudden, linux systems have started barfing on
          our declaration of signal() in externs.h. All right, if they
          want to play that way, we now test for this in Configure
          and don't declare it ourselves if it would break things.
        * Changed Amberyl's address in the source to lwl@digex.net
        * Somehow the fix for add(+1,0) got left out of 1.6.4. Back in. 
        * The ansi() function now produces underscore with "u", as
          advertised. [TAP]
        * Warning about discarding const in assignment fixed in game.c.
& 1.6.4

Version 1.6.4 patchlevel 2              May 14, 1996

Minor Changes:
        * At game startup, semaphores on all objects are cleared.
          Prevents objects from having leftover semaphore states after
          a shutdown. [TAP]
          INCOMPATIBILITY WARNING! If you have objects which expect
          to always have sempahore -1 (or something else), be sure
          that they do "@drain me; @notify me" in their STARTUP
          (as recommended in Amberyl's MUSH Manual).

Fixes:
        * @dump/paranoid produced db's with incorrect db flags
          when CHAT_SYSTEM was 3 or 4. Reported by Matt Chatterley.
        * Under certain conditions, one could get inside a ZMO using
          the "go" command. Fixed. [RLM]
        * A strcpy in fun_match is now a safe_str. [PeaK]
        * INPREFIX fixes: (1) no space if INPREFIX evals to a null string,
          (2) message to be prefixed is passed as %0, (3) %1-%9 are
          temporarily cleared. [TAP]


Version 1.6.4 patchlevel 1              May 11, 1996

Fixes:
        * Forgot to #ifdef MAIL_SUBJECTS around fun_mailsubject.
          Reported by Mercurial Mink@Protean.
        * Quirk in @dbck fixed. [RLM]
        * Possible denial of service attack using repeat() fixed. [RLM/TAP]
        * Problem with Configure script under certain conditions (esp FreeBSD)
          producing bad compiler flags fixed. Report by Mike Wilson.

Version 1.6.4 patchlevel 0              May 3, 1996

Major Changes:
        * eval_boolexp rewritten again. Important features:
          - If A is locked to @B, evaluating A's lock is identical
            to evaluating B's lock
          - To do an indirect lock or an elock(), you must be able to
            read the lock on the target object (i.e., you must be
            See_All, control the object, or it must be Visual)
            (New macros Can_Run_Lock and Can_Read_Lock for this)
          - As a result, channel locks will work as advertised if
            you indirect-lock them to VISUAL objects
        * Changes to handling of plain strings (with no evaluation)
          resulting in doubling of speed. [TAP]
        * If you fail the page-lock on a DARK player, you receive their
          AWAY message rather than their HAVEN message. That is,
          failing a page-lock on a DARK player is just like paging
          a DARK HAVEN player.
        * INHERIT check moved to controls() function

New functions:
        * mailsubject() returns subject of a given mail message,
          analogous to mail() and mailfrom(). By Atuarre.

Minor Changes:
        * Don't go through some major sections of the parser if we've
          be given PE_NOTHING. Performance boost. [TAP]
        * Players who are allowed to idle past inactivity limit, and
          are unfindable, and can hide, are hidden (as before), but
          only receive the notification once, instead of every
          hour (or whatever your limit is). Players who are all of the
          above but can't hide don't get any notification now.
          Suggested by Gepht@Hemlock
        * When allocating a new boolexp, set its struct members to
          null values for better debugging. [RLM]
        * We no longer save/restore the r-values when evaluating
          the left side of the equal sign in attribute setting.
          So @desc %q0 = %q0 now works as expected. Reported by PeaK.
        * Locks set when players are initially created (lock, elock)
          are now set to "=me" instead of "me". [PeaK]

Fixes:
        * When EX_PUBLIC_ATTRIBS wasn't defined, you never saw the
          DESCRIBE attribute listed when you examined objects. [AKM]
        * Vacation and Connected were being handled incorrectly
          internally; the type of object wasn't being checked. [TAP]
        * Now that Connected is fixed, the call to @doing doesn't have
          to prefilter for players, so don't. [TAP]
        * +nn is now considered a number, so add(+20,1) works.
          Reported by Dennis De Marco.
        * String boundary problems sometimes when you hit the 
          function recursion limit could cause crashes. Fixed.
          Reported by Oliver Stoll. [TAP]
        * Making on Linux should hopefully now work with -g. [PeaK]
        * Warning message when @chzoning an inherit player used
          to be announced when @chzoning *any* player. Fixed. [PeaK]

& 1.6.3

Version 1.6.3 patchlevel 7              April 25, 1996

Fixes:
        * beep() works without arguments now, as promised. [TAP]
        * repeat(string,-number) caused an infinite loop. Reported by
          Atuarre.
        * The create() function didn't accept a single argument. [RLM]
        * last(a b c) was returning " c" instead of "c". [TAP]
        * The Configure script did indeed send email to listproc if
          you asked to be subscribed to the pennmush mailing list.
          But it sent it with Precedence: junk, which listproc ignores.
          Fixed.
        * %q9 wasn't preserved due to a typo in function.c. Fixed. [PeaK]
        * SIGHUP now handled synchronously to prevent race conditions.
          Noted by PeaK.



Version 1.6.3 patchlevel 6              March 30, 1996

Minor Changes:
        * A channel's owner now always passes the channel's modlock.
        * Wizards may now do folderstats(player,folder). Previously
          on God could, but wizards could see the stats for the player's
          current folder, and could reset the current folder, so it
          doesn't make sense to restrict. Report by Cwilla@Victory-MUSH
        * @function is restricted to see_all players. Suggested by
          Oderus (Mike Wesson).

Fixes:
        * @sitelock/ban and @sitelock/register had their effects
          mixed up. Reported by Matt Chatterley.
        * Objects that were undestroyed were having the GOING flag
          removed but not the GOING_TWICE flag. Fixed. [RLM]
        * element() now works as advertised. [RLM]
        * Systems without IEEE math now can't do power(x,y) if
          *either* x or y is greater than 100. Report by InsaneJoseph@WoP



Version 1.6.3 patchlevel 5              March 12, 1996

New Powers:
        * The immortal power has been split into 3 powers:
          no_pay (has unlimited money), no_quota (has unlimited quota),
          and unkillable (can't be kill'd). For backwards compatibility,
          @set player=[!]immortal sets/unsets all three. Objects which
          were immortal before this patch will have all 3 flags set.

Minor Changes:
        * The DEBUG flag can now be set by any user. The Can_Debug power
          will automatically be removed from all objects.
        * The "directive not found" message in loading mush.cnf has been
          changed to a more comprehensible/less scary "directive in 
          cnf file ignored" message.

Fixes:
        * FIXED players can no longer "go home" or "move home"
        * index-files.pl was producing incorrectly titled index entries. [RLM]
        * More fixes to elock() and zone locks. Elock() should now work
          even when RALPH_LOCKS isn't defined. Zone locks are checked
          on the correct object. [TAP]
        * @open exit=variable should work correctly now. [TAP]


Version 1.6.3 patchlevel 4              February 27, 1996

Fixes:
        * Complex evaluation locks may be better behaved. [RLM]
        * ex/debug now shows flag bits in hex, not decimal [RLM]
        * % failed to quote the following character in some cases.
          Fixed to work like 1.50. [PeaK]
        * iter() only allowed a single-character output separator instead of
          an arbitrary string. Fixed. [PeaK]
        * Bug in extmail.c which caused crashes on find_exact_starting_point
          with newly created players may be fixed.
        * Repaging with page/list uses the correct format.
          Also, failing to page anyone successfully doesn't clobber
          LASTPAGED when using page/list.
        * Dark-connecting admin now trigger connection messages on
          admin chat channels (unless the channels are quiet)
        * Help for pos() corrected. 
        * Things starting with #- (error messages) are now treated as
          false (0) in boolean functions, as under 1.50. [TAP]
        * The recursive_member function was inefficient, and potentially
          buggy, which could allow things to be teleported into things
          they contained. Fixed.
        * @drain wasn't lowering QUEUE attrib. Fixed. [RLM]
        * Zone master help updated to refer to zone locks [RLM]
        * Memory malloc'd by replace string, though freed, didn't
          have its mem_check cleared in a few places, which could make
          it appear that replace_string was leaking. [PeaK]


Version 1.6.3 patchlevel 3              February 12, 1996

New option:
        * If NULL_EQ_ZERO is defined in dune.h, a null string will
          be considered a zero in a math function. For example,
          add(,3) will return 3, instead of #-1. 

Minor Changes:
        * Guests may not join or leave channels. [Mike Wesson, Oderus]

Fixes:
        * edefault() core dumps fixed.
        * eval() now behaves correctly. [TAP]
        * ALL players (inc. Wizards) now subject to BUILDING_LIMIT.
        * Quota now properly updated on object destruction. [RLM]
        * Misc. fixes to object destruction, especially in the case
          of what happens to SAFE objects of destroyed players. [RLM]
        * Queue was handled strangely for priv'd players. Fixed.
        * New internal macros NoQuota and NoKill, both the same as
          NoPay, established in preparation for future splitting of
          Immortal power into 3 powers.
        * help @clock2 typo fixed.


Version 1.6.3 patchlevel 2              February 7, 1996

[L@E] refers to Lukthil@ElendorMUSH, who did many patches to 1.50
that I'm just now getting to integrate.

Minor Changes:

        * Wizards are now effectively pemit_all
        * @dol/notify notifies even if given a null list. [L@E]
        * See_All players can see quotas with @quota. [L@E]
        * If we're logging forces, don't just log forces *by* wizards,
          log forces *of* wizards (and things they own) by anybody. 
          Idea by L@E.
        * Removed obsolete code: clear_atr_name
        * mkindx now sorts index entries alphabetically, so it
          doesn't matter what order you have get() and get_eval()
          in your help file - help get will give get().
          Code by Pavel Kankovsky (PeaK).

Fixes:
        * #-1 was being considered "true" instead of "false" when
          TINY22_BOOLEANS was not defined. [RLM]
        * munge() is better behaved when there are duplicates in the
          first list, accurately matching them with the second. [L@E]
        * Emits weren't propagating through audible exits when
          there was nobody in the room. Fix idea by L@E.
        * Charges were broken. Fix idea by L@E.
        * Immortal players could lose coins when their non-immortal
          objects ran code. Fixed. [L@E]
        * @edit is less likely to overflow buffers when using ^ and $. [L@E]
        * @halting objects used to queue them for #0. Fixed. [L@E]
        * Semaphores weren't removed when an object was halted. Fixed. [L@E]
        * Possible permissions problem in running STARTUP when objects
          are chowned fixed. [TAP]
        * make etags now picks up dune.h and options.h [RLM]
        * Code consolidation: chowning when an exit is linked is done
          via a call to chown_object now. [RLM]


Version 1.6.3 patchlevel 1              February 4, 1996


Minor Changes:

        * NO_LEAVE is now settable by anyone
        * The index-files.pl script indexes admin news and help separately.
        * *emit() functions can now have unescaped commas in their last
          argument (the message). [TAP]

Fixes:
        * lit() doesn't screw up on braces. [TAP]
        * @search and lsearch() using eval were broken. [TAP]
        * @unlock foo worked, and also gave a Huh?. Fixed. [RLM]
        * When a player was destroyed, their SAFE exits would be
          destroyed instead of chowned. Fixed. [RLM]


Version 1.6.3 patchlevel 0              January 31, 1996

Major Changes:

        * Assume that object A is locked to @B, and object B is
          locked to canuse/1. It used to be that when player P tried
          to pass the lock on A, the canuse attribute on *A* was
          checked, instead of B. Fixing that required that we check
          to be sure that B is allowed to evaluate the CANUSE attribute
          on A, which required internal changes to boolexp.c.

Minor Changes:

        * Objects can now send mail as themselves, not their players.
          Mail from objects is reported as being from an object
          when read. The format for @mail(/read) has changed somewhat.
        * page[/list] now stores the last player(s) you paged in a LASTPAGED
          attribute, so you can re-multipage. The behavior is a little
          different for page and page/list. Page stores exactly what
          you typed as the last player/list of players to page; page/list
          stores only those names for whom the page succeeded.

Fixes:

        * The site of last failed login used to be a visual attribute.
        * Parser misbehaved on: think ( foo ), removing spaces. [TAP]
        * @edit and related wasn't stripping leading spaces from the
          right side of the = sign. Fixed.
        * Problem with count of unread mail on login with EXTENDED_MAIL
          fixed.
        * @channel/rename can now rename a channel to the same name
          with case changes, without an error.
        * +channel now matches partial ambiguous channels in a smarter
          fashion - it looks for a channel you're on.
        * Better help for @clock
        * die(0,x) now returns 0. die(negative #,x) returns an error. [TAP]
        * @chan/decompile can be used by the channel's owner or
          anyone who passes the modlock, as well as Wizards.
        * Channel hide locks work right. [RLM]
        * @chan/decompile now shows the correct commands for locking
          channels. [RLM]

& 1.6.2
Version 1.6.2 patchlevel 1              January 28, 1996

Fixes:
        * get_eval error about # of args fixed.


Version 1.6.2 patchlevel 0              January 26, 1996

New Commands:

        * @mortal <command> lets a privileged player run a command
          as if they were unprivileged. [TAP]
        * ahelp/anews shows admin help/news topics to admin players. 
          Admin-only topics are in the same files (help.txt/news.txt),
          but topic names begin with '&'. For example:
          & for-all-players
          ...text...
          & &admin-only
          ...text...
        * page/list <players>=<message> will do a multipage with a less
          spammy format for the pager.

New Functions:

        * mortal() lets a privileged player evaluate as if there were
          unprivileged. [TAP]

New Flags:

        * MORTAL, to support @mortal and mortal(). Used internally, and
          not settable. Can be reset by Wizards, just in case, though. [TAP]

Minor Changes:

        * If you have a channel "admin" and a global +admin (no args),
          calling +admin will run the global, not give the
          "What do you want to say to that channel" message, under
          extended chat.
        * If a panic db is corrupt, the restart script will move it to
          save/PANICDB.corrupt instead of removing it.

Fixes:
        * Problems with compile when HAS_SIGACTION is undefined.
          Noted by Brian Favela, affects Linux.
        * Duplicate uselock check in atr_comm_match removed.
          Noted by Brian Favela.
        * Looking at an exit showed the full name and aliases, not just
          the full name. [TAP]
        * Compiling without EXTENDED_MAIL works right.
        * Potential buffer overflow problems in look_exits() fixed.
        * get_eval() really uses a /, not a comma, like the help says.
        * (Hopefully) last remnants of old parser removed from externs.h
        * @dol on an empty list now doesn't give the weird "what do you want
          to do with the list" message. @dol with an empty command does. [RLM]

& 1.6.1
Version 1.6.1 patchlevel 1              January 23, 1996

Fixes:
        * v(#), v(!),and v(N) now return the same thing as %#, %!, and %N.
          [RLM]

Version 1.6.1 patchlevel 0              January 21, 1996

New compile-time options:

        * SAFER_UFUN: when defined, prevents less priv'd objects from
          evaluating ufuns on more priv'd objects, which helps a
          potential security problem with side-effect functions.
          This is more of a stopgap -- control and security will be
          revamped in a future release -- but is recommended.

New .cnf directives:

        * player_creation enables/disables "create" at login screen.
          Also @enable/disable creation
        * use_dns enables/disables IP-to-hostname resolution

New Functions:

        * tel(thing,destination)
        * oemit([room/]object,messsage)
        * emit(message)
        * lemit(message)
        * remit(object, message)
        * zemit(zone, message)
        * timestring(secs,flag) converts seconds to #d #h #m #s
          format. If flag is 1, the string always includes all time
          periods (e.g. timestring(301,1) = 0d 0h 5m 1s). If flag is
          0 or omitted, only the necessary periods are included
          (e.g. timestring(301,0) = 5m 1s). 
        * left(string, n) returns the first n characters of the string
        * right(string, n) returns the last n characters of the string
        * hasflag() syntax extended to hasflag(obj[/attr],flag) for
          checking attribute flags as well.
        * functions() lists all enabled functions
        * atrlock(obj/attr[,<on|off>])
        * doing(player) returns a player's @doing if they can be see
          on the WHO list

Minor Changes:

        * @allquota now has /quiet switch, and works correctly when
          no limit is given. [NJG]
        * The restart script is now a lot smarter, and figures things
          out from mush.cnf. All that needs to be set is the location
          of the game directory, and if you use make customize, not
          even that.
        * @wall/@rwall/@wizwall with a null message fails. (src/speech.c)
        * SIGHUPs sent to the MUSH are now logged in netmush.log
        * Common code called when object ownership is changed has
          been encapsulated into a single function for modularity.
        * crypt() is now a macro on systems which can't define HAS_CRYPT

Fixes:  
        * The table() function was incorrectly truncating some
          list elements. Fixed. Report by Alaric@WoP
        * The match() function was returning an empty string instead
          of 0 when it failed to match. Fixed. Report by Alaric@WoP.
        * help math functions now list the transcendental and other
          floating point functions
        * map() and mix() were broken. Fixed. [TAP] (src/funlist.c)
        * @grep/print is now case-sensitive, like help says. (src/predicat.c)
        * Refunding money when objects are chowned 
          was refunding 10 coins, instead of the object deposit. [RLM]
        * convtime() hadn't been converted to the new parser,
          and therefore was broken. Fixed. (src/funtime.c)
        * Compilation warning in src/game.c fixed
        * Giving players large negative amounts of money was slightly
          broken and is now fixed. Obscure, eh? [RLM] (src/rob.c)
        * Misleading comment in options.h.dist about QUEUE_LOSS
          fixed. [RLM]
        * Help fixed to indicate that there's no longer a 10 dimension
          limit on vector functions.
        * Various missing prototypes corrected.
        * make customize now correctly sets the restart script
          executable, and installs links to netmud and mkindx.
        * Improved Win32 portability [NJG]
        * Fixes to default() and edefault() [TAP]

& 1.6.0
Version 1.6.0 patchlevel 5              January 17, 1996

Fixes: 
        * Extended chat: @chan/decomp shows privs correctly now
        * Extended chat: When a player is destroyed, channels they own
          are chowned to God.

Version 1.6.0 patchlevel 4              January 17, 1996

Fixes:
        * Extended chat: Formerly, non-players could create channels.
          No longer.
        * Extended chat: Channel creation cost is now refunded when
          channel is removed.
        * Help text for HALT (game/txt/pennflag.hlp) and SUBSTITUTIONS
          (game/txt/penn.hlp) now notes that HALTed objects do not
          evaluate functions or substitutions.
        * Nick Gammon's new email address is in README and win32/README


Version 1.6.0 patchlevel 3              January 16, 1996

Fixes:
        * default, edefault, udefault now work like Tiny 2.2, not eval'ing
          their arguments.
        * Many fixes to the extended chat system.
        * Fixed misspelling of Guest in @config.
        * @function on a non-existant object no longer crashes. [TAP]
        * Problems with paranoid dumps not setting the correct dbflags
          corrected. [TAP]
        * Problems with EXTENDED_MAIL crashing when using LOGOUT fixed. [RLM]
        * @warnings for exit-msgs and thing-msgs warned when there was
          no OFAIL on a locked exit/thing, which is silly. [1.6.0p1]
        * Started patching the CHANGES file, like I should.
        * Fixes customize.pl
        * Fixes update-cnf.pl so that 'make update' won't trash player_flags
          (and other repeatable directives) in mush.cnf
        * Fixes game/txt/README

Version 1.6.0 patchlevel 0              January 10, 1996

Major Changes:

        * New function parser with improved speed, sanity. [TAP]
        * Complete rewrite of destruction code. Undestroying supported
          for all objects, @adestroy works sanely, SAFE is safer,
          better consistency checking. [RLM]
        * Support for 'plural' gender for TinyMUSH compatibility. [2.2]
        * Most filenames are now 8.3, to support the win32 port
        * Some options have been moved to the runtime config file
          (dbcomp). Others have been removed entirely.
        * 'make update' will update runtime config directives
        * The chat system has been completely rewritten. Number of 
          channels is limited only by memory, channels are saved
          across shutdowns (modifying source to add channels never
          required), channels can be locked in various ways, 
          non-wizards can create channels, etc.
        * New .cnf directives: chat_database (where to store channels),
          max_player_chans (how many channels can a non-admin create),
          chan_cost (how much does creating a channel cost)
        * The CSRI malloc is now supported and suggested. In addition
          to being extremely memory-efficient, it offers leak detection
          and profiling features.
        * The database format now defaults to quoting text, which is
          less vulnerable to corruption, in particular the loading of
          attribute locks starting with a number. [1.50-15-04,05 TAP]

New Functions:

        * matchall() [2.2]
        * default(), edefault(), udefault() [2.2]
        * aposs() and %a return absolute possessive pronouns [2.2]
        * elements() [2.2]
        * mudname(), version(), starttime() [2.2]
        * stats() is now an alias for lstats() [2.2]
        * ulocal() [2.2]
        * search() is now an alias for lsearch() [2.2]
        * folderstats() returns information about numbers of messages
          in a given @mail folder
        * last() is the counterpart to first(), and returns the last
          item in a list
        * mailtime(), mailstatus(). Suggested by Alaric@WorldOfPain.

New Commands:

        * @emit can be abbreviated '\\', for TinyMUSH compatibility
        * The speech commands (say, pose, @[po]emit, whisper, page)
          can now take a /noeval switch, which prevents them from
          evaluating the message.
        * 'semipose' is an alias for pose/nospace
        * 'INFO' from the connection screen gives version info for
          the MUSH, for use by automated mudlists and the like.
        * @sitelock/name adds names to the banned names file.
        * @enable/@disable guests (and new cnf file directive guest_allow)
        * @decomp now takes /flags and /attribs switches to only decompile
          the creation/flags information or the attribute information.
        * @list command partially implemented for TinyMUSH compatibility.

New Flags:

        * CLOUDY flag on exits provides partial transparency. A CLOUDY
          TRANSPARENT exit shows only the description of the room beyond, 
          no contents.  A CLOUDY but not TRANSPARENT exit shows only 
          the contents, no desc.
        * FORCE_WHITE flag on an ANSI player forces their output to be
          reset to white, necessary for some poor ansi terminals which
          "bleed". [Kalkin]

Minor Changes:

        * @chzone'ing an object to 'none' no longer clears its privbits.
        * OXMOVE attribute is shown to the room you're leaving.
        * Setting and resetting the SUSPECT flag is now logged in wizard.log
        * Various outdated defines have been removed from options.h/dune.h
        * Objects can now use @mail commands, as if they were their owners.

Fixes:

        * idlesecs() now accepts "me".
        * "pose" (not ":") used to discard everything after an "=".
        * The "entries" entries in help.txt, etc, have been fixed a bit.
        * index(a| |b,|,2,1) now returns a null string instead of "|b"
        * Various memory leaks [1.50-15-01]
        * When fork fails, a non-forking dump is done, and the MUSH
          no longer exits. [1.50-15-02]
        * Soundex() no longer hangs on non-alphabetical. [1.50-15-06]
        * dist2d and dist3d are safer on non-IEEE math systems. [1.50-15-03]
        * mail() now counts messages across all folders
        * Better matching of del_check to add_check [1.50-15-11]
        * PennMUSH now compiles correctly without EXTENDED_MAIL
          [1.50-15-10]
        * Some fixes to unparse.c to stabilize huffman compression
          [1.50-15-09,RLM]
        * Fixes to @boot [1.50-15-08,TAP]
        * Fixes to variable exit handling by quick-unparse [1.50-15-07,AKM]
        * Configure now tries to find a full path for uptime(1) so that
          @uptime will work
        * Fixes to forbidden_site and forbidden_name when there's no
          sites/lockout/names file. [NJG]
        * Backspace handling for really dumb terminals improved [NJG]
        * When changing the text of an attribute, its flags are no longer
          reset. [RLM]
        * When seizing a link, coins weren't refunded if the seize failed.

& 1.50p14
Version 1.50 patchlevel 14              July 3, 1995

This patchlevel is primarily concerned with bugfixes and patch management.

Maintainer changes:
  * New file 'Patchlevel' tracks mandatory patches to insure that they 
    are applied in the proper order
  * Clearer 'restart' script. [TAP]
  * The indexing script for help/news/etc now creates the topic 'Entries'
    instead of 'Index', to prevent a conflict with 'help index()'.
  * The file hdrs/db.h is now hdrs/mushdb.h, to match Tiny 2.2 and
    because FreeBSD complains about db.h.
  * The links hdrs/dune.h and hdrs/options.h were unnecessary and
    are now removed.
  * The noforking dump messages have been moved to mush.conf

Commands:
  * The @set obj1=attrib1:_obj2/attrib2 form no longer works, as
    it conflicts with general attempts to set attributes that start
    with underscores. Use @cpattr for copying attributes.

Options:
  * EXITS_CONNECT_ROOMS, if defined, prevents rooms with at least one
    exit from being announced to players as "disconnected rooms".
  * RALPH_DEBUG option allows for improved DEBUG flag output. [RLM]
  * When MEM_CHECK is defined, it dumps mem_check info to the
    checkpt.log before each dump.
  * SAFER_PLAYER_NAMES options has been removed. Player names can't
    contain those funny characters, period.

Fixes:
  * Added -D_INCLUDE_AES_SOURCE to hpux hints
  * stdlib.h is now included in eval.c to get atof. This was breaking
    linux MUSHes badly.
  * Linux hints now use BSD signal semantics.
  * Various attempts to fix possibly unusual bugs in compression.
  * The internal TRANSPARENT flag bit macro is now TRANSPARENTED,
    because Solaris defines TRANSPARENT
  * A bug causing setq'd registers to be incorrectly munged has been fixed.
  * @chzone warning messages refer to zone-lock, not elock, if RALPH_LOCKS
    are compiled in.
  * Examining a player who was on a null channel was reported to crash
    one MUSH. Some attempts have been made to fix that problem.
  * The compose.csh script in game/txt has been replaced by 
    compose.sh, which now deals properly with systems which are missing
    perl (gasp!)
  * Configure script hopefully won't die when checking signals on Linux.
  * Fixes to some strange @mail behavior. [RLM]
  * CType in compress_h.c is now unsigned long, not long. [RLM]
  * Fix to converting old maildbs to mail subjects [RLM]
  * Bigram compression could (rarely) cause $commands or ^patterns
    to stop functioning.
  * GoodObject() used to consider db_top to be a valid dbref. It's not.
  * Recycling of objects was broken in pl13 and is now fixed. [RLM]
  * mush.conf can now deal with the FIXED flag as a default flag [RLM]
  * A lot of mem_checks weren't being deleted, especially exec.buff ones.
  * Defining COMPRESSION_TYPE to be 0 (no compression) now works. [TAP]
  * Paranoid dumps no longer stomp out tabs and newlines unnecessarily.
  * Configure now checks for IEEE math compliance, and defines HAS_IEEE_MATH
    which is used by the code to determine if some math functions need
    to be limited.
  * SOLARIS defines have been removed as extraneous.

& 1.50p13
Version 1.50 patchlevel 13              June 1, 1995

Patchlevel 13 was very much a collaborative effort with Ralph Melton
and T. Alexander Popiel, terrific MUSHhacks.

Major user changes:

  * Complete rewrite of locks, which allows for many, many new
    locks, including user-defined locks, with reduced memory usage. [RLM]
  * @mail can now have a subject.

Major maintainer changes:
  * The code now contains ANSI prototypes (if Configure ascertains that
    your compiler likes 'em) for easier debugging.
  * The help, news, and events entries are now managed in subdirectories
    of game/txt/, and automatically indexed.
  * The names.conf file now accepts wildcards
  * New Makefile target 'update' will propagate your options.h/dune.h
    settings into an options.h.dist/dune.h.dist template, ask you
    whether you want to define any newly-introduced options, ask
    you if you want to remove any obsoleted options, and write out
    new options.h/dune.h files.
  * Improvements to the autoconfiguration scripts, which now generate
    a config.h and confmagic.h file in the top-level directory. These
    headers tell the code what kinds of features are available.
    Accordingly, the old hdrs/config.h header file has been renamed 
    hdrs/conf.h
  * The 'whisper_loudness' config directive in mush.conf sets the
    probability that a noisy whisper will be noticed in the room. 
  * If the standard Huffman attribute compression gives you trouble, you
    can use the COMPRESSION_TYPE define to use the older bigram
    compression system, now auto-tuning, or no compression at all.
  * The TINY22_BOOLEANS option causes the MUSH's boolean functions
    (and(), or(), not()) to be compatible with TinyMUSH 2.2. In Tiny 2.2,
    only non-zero integers are "true". In PennMUSH's default, non-zero
    integers, non-negative db#'s, and strings are "true". You pick.
  * NO_NUKE_SAFE_PLAYER prevents @nuke from working (for Wizards) on
    players set SAFE. You have to unSAFE them first.

New functions:

  * MWHO() function is like LWHO() but always evaluates as if the
    enactor were an unprivileged player. Useful for globals.
  * ISDAYLIGHT() returns 1 if it's daylight savings time, 0 if not.
    By Dave Sisson
  * CWHO() now returns a list of dbrefs, NOT NAMES. Much more flexible.
  * ITER() now can take a fourth argument, which is the output delimiter.
    You can have any string shoved between the output elements instead 
    of a space (for example, a %r).
  * TABLE() for presenting lists in rows.

New commands:

  * Players can connect with 'ch name password', which is just like
    'cd', but connects hidden. Activated by defining DARK_CONNECT
  * @warnings now allows players to exclude warnings by using
    @warnings me=!warning. [RLM]
  * @ps/quick now displays only the summary line of @ps for players.
  * @decomp can take a /tf switch, which makes its output emulate
    the 'FugueEdit' object (originally by van@TinyTIM) which
    lets you use tf to edit attributes. Idea by Lord Argon.

Minor changes:

  * The 'news code' and 'news changes' entries are now in help.txt,
    so you don't need to update your MUSH's news.txt files when you upgrade.
  * In an ambiguous situation (i.e., @dest foo when you carry
    foobar and foofoo), @dest will no longer pick one at random. It'll fail.
  * #0 is now evaluated as TRUE in the context of boolean functions,
    because it's a valid dbref (applies only #ifndef TINY22_BOOLEANS)
  * haspower() allows players to see powers on things they control,
    even with HASPOWER_RESTRICTED defined. [RLM]
  * O-attributes which evaluate to nothing are no longer displayed. [AKM]
  * Paranoid dumps no longer smash \r and \n.
  * @mvattr no longer deletes the original attribute if the copies fail.
  * Secure now stomps out ^'s
  * The getrandom() function has been rewritten. [RLM]
  * It's now a lot harder to have Guest and Wiz/Roy set on the same
    player. Players shouldn't be able to connect to Wiz/Roy Guests anymore.
  * HARSH_GUEST is now a lot harsher. Guests pretty much can't modify
    the database except to lock/unlock things they control.
  * players who are on a priv'd channel may speak/leave
    even after they lose their privs. [RLM]
  * Xenix options removed from options.h.dist, since the Xenix code
    isn't supported anymore anyway.
  * The size of MAX_COMMAND_LEN (and therefore all derived buffers)
    has been doubled.
  * Doing a 'make' from the src/ directory will now call the top-level
    makefile. This helps those who use emacs (like Ralph, who came up
    with this) and M-x compile from the srcdir.
  * @version shows compilation flags.
  * Admin WHO no longer wraps lines. Sitenames are truncated as needed. [TAP]

Fixes

  * Repaging a player with a multi-word name works correctly now.
  * Players with the tport_anything power can teleport FIXED things. 
  * @map works as documented again.
  * Paranoid @dumps don't give so many spurious bad attribute warnings.
  * ZMO elock checking now uses PLAYER_START and MASTER_ROOM instead
    of #0 and #2. [RLM]
  * @pemit/list now replaces ## with the target's db#, as the help says.
  * Subtle bug in exit matching fixed. [RLM]
  * escape() and secure() no longer parse their arguments.
  * The asterisk-line separators on the nologin messages have been
    prettified slightly, at Tigger's suggestion
  * Some systems didn't deal well with overflowing @doing and @poll's.
    Dave Sisson patched it.
  * Error in bsd.c when compiling with DARK_CONNECT but without ROYALTY
    fixed. (Reported by Suud@Gohs)
  * hasflag, andflags, and orflags patched to prevent mortals from
    using them to see mdark flags [RLM]
  * Type mismatch in warnings.c fixed [RLM]
  * fun_lcstr() and fun_ucstr() have been changed slightly in order to
    support unices like MachTen which appear to define tolower() as 
    a macro meaning (isupper(x) ? _tolower(x) : (x)), and were getting
    hosed by the tolower(*ap++) call. Bug reported by Adrick.
  * It was possible to overflow the buffers in do_log by having a 
    Wizard do @fo me=think lnum(5000), for example. No longer, I hope.
    Bug report and suggested fix by Adrick.
  * Removed an old bit of code that broke compiles using original mailer
  * The restart script is a little smarter about preserving databases.
  * Fixed a bug that caused ALWAYS_PARANOID to dump core.

& 1.50p12
Version 1.50 patchlevel 12              March 23, 1995

Major changes:

  * The matching routines in match.c have been rewritten to be
    reentrant, which fixes some subtle but important bugs
  * New Makefile target 'customize' for setting up customized
    per-mush subdirectories for those who run multiple mushes.
  * An untested DELETE_POWERS define in options.h, which will remove
    powers from a database, to make it easier to switch to TinyMUSH

New flags/powers:

  * Things with the Pemit_All power can @pemit to HAVEN/ulocked players.
    Useful for globals.

--- Fixes ---
  
  * Previously, passing the elock of a ZoneMaster player allowed 
    control over *all* the ZM's objects, including the ZM player itself.
    Players are no longer controllable this way.
  * Incorporated patch for compiling without CREATION_TIMES defined
  * Incorporated Ralph Melton's patch to warnings.c to fix core dump
    with multiple exits warning.
  * Nobody can @tel rooms any more. New code for @tel'ing exits has
    been written, however, and players may now @tel exits they control
    from rooms they control to rooms they control.
  * Z_TEL bug: players could defeat Z_TEL by entering an object and
    @tel'ing from there. Reported by Ralph Melton.
  * Bug in puppet checks in @teleport fixed.
  * Players in exactly 15 levels of container could defeat NO_TEL. Fixed.

& 1.50p11

Version 1.50 patchlevel 11              March 5, 1995

At Amberyl's suggestion, the "dune" numbering scheme has been 
abandoned. This is 1.50 pl11, and future versions will be numbered
accordingly.

Major changes:

  * All objects can now have creation dates. Non-player objects have
    attribute modification dates as well. Players have number of login
    failures since last logins tracked instead. Supported by
    ctime() and mtime() functions to return creation/modification time.
    (CREATION_TIMES define in dune.h)
  * The extended @mail system now maintains the maildb sorted by
    recipient, and each player descriptor has a pointer to where that
    player's mail begins in the maildb. This is much faster for reading 
    and listing and clearing mail, only slightly slower when sending.

New Commands:

  * @boot/me: boots a player's idle descriptor (to selfboot hung 
    connections).
  * whisper has two switches: silent and noisy. Standard PennMUSH whisper
    is silent, and is the default unless NOISY_WHISPER is defined.
  * @grep can take two new switches, /ilist and /iprint, which are just
    like /list and /print, but case-insensitive.

New Flags:

  * LIGHT (as in TinyMUSH): LIGHT objects/players appear in DARK rooms.
    In addition, LIGHT exits also show up.
  * Z_TEL: When set on a Zone Master Room or a room in a zone, prevents
    players from using @tel from that room to any room that's not in the
    same zone. Useful for puzzle areas or enforcing some IC constraints.

New Functions:

  * The lsearch() command can take a range of db#'s
  * ctime() and mtime() functions (if CREATION_TIMES is defined)
  * grepi() is a case-insensitive grep
  * hasattr() returns 1 if an object has a given attribute
  * hasattrp() returns 1 if an object or its parent has a given attribute

Minor Changes:

  * @away/@haven/@idle messages are not sent if they're null
  * Players always receive feedback when they use @hide
  * Players who are FIXED are now permitted to @tel objects into their
    inventory. This makes coding puppets which follow you much easier.

--- Fixes ---

  * examine/mortal now functions more like it should. 
  * If a ZMO was elocked to an object in #2, players couldn't @chzone
    things to it. Reported by Melkor@Beleriand. Fixed.
  * WHO is grammatical when reporting # of connected players. Idea
    from Kalkin.
  * The Connected ('c') flag is no longer visible to mortals.


& 1.50dune2

DuneSource pl2 changes

Major changes:

  * Extensive warning system for things missing on objects, rooms, etc.
    @warnings command for players to set the level of warnings they want,
    @wcheck[/all] command for players to check an object (checks can also run
    at a God-configurable interval on the whole db), NOWARN flag for objects
    and players. Idea from Kalkin's adaptation of MUSE code, totally
    rewritten.
    

New options (dune.h):

  * GUEST_TEXTFILE option enables a textfile (guest.txt by default)
    to be shown to Guests who log in. Idea and source code from Kalkin.
  * PAGELOCK_NOT_USELOCK option causes @lock/use to fail for players,
    requiring them to type @lock/page. The lock itself has not changed,
    just the interface, to remind players of its function. By Ralph Melton.
  * More control over possessive gets with the POSSESSIVE_GET define
    and the POSSGET_ON_DISCONNECTED define. Possessive get can be
    disabled, enabled for all but disconnected players, or enabled
    at all times (the default PennMUSH behavior)

New functions:

  * lit() returns its input totally unparsed, and without spaces compressed.
  * t() returns the truthvalue of its input, guarranteed to be either
    1 or 0.
  * objmem() and playermem() functions, return the memory usage of
    an object or all of a player's objects. Requires search_all power.
  * grab(list,pattern[,delimiter]), returns the first element of list
    which patches the pattern. Patterns are of the match() type.
    From the TinyMUSH 2.2 code.

Minor Changes:

  * You must actually own an object (not just control it) or be a
    Wizard in order to set it chown_ok or dest_ok. By Ralph Melton.
  * You can use #$ in the actions in a switch() function
    or @switch/@select statement, and it will be replaced by the switch
    expression before executing or evaluating. This can improve
    efficiency and save space. For example:
        switch(complexfunc(%0),Bob,BobResult,#$)
    is equivalent to:
        switch(complexfunc(%0),Bob,BobResult,complexfunc(%0))
    but only requires a single evaluation of complexfunc(%0).
    Suggested by Kenric@DuneII.
  * "things" is a synonym for "objects" in @search now. By Ralph Melton

--- Fixes ---

  * #-2 is treated as a "0" (false, like #-1) in functions which need a
    logical value for it. Previously, it was treated as -2 (true).
  * @select is now considerably more efficient - it no longer will 
    evaluate anything after the matched action. The old behavior
    could well be a bug in the right conditions as well. 
  * atr_add now rejects null attribute names, so you probably can't set them
    any more. Suggested by Kalkin, the code's by Mike@StarWars.
  * Players can reset a DARK flag on themselves, but still can not
    set themselves DARK.
  * andflags(me,!Dc) used to return 1 if I am !dark and !connected,
    instead of !D and connected, as the help states. Fix by Ralph
    Melton.
  * Halting an object which is @wait'ing used to fail to decrement
    the owner's queue attrib. Fixed now. Patch by Ralph Melton.
  * set_flag uses strupper instead of upcasestr now, which should fix
    a bug on some systems wherein "cd" command would crash the MUSH and
    a similar bug wherein players connecting would crash the MUSH if
    the ON-VACATION flag was in use.
  * The old channel syntax (@channel foo=command) works again.
  * The RULES option now works.
  * The convtime() has been rewritten to work on NeXT's correctly.
    Previously, its malloc failed and it returned -1.
  * Systems which have getrlimit, but *don't* have RLIMIT_NOFILE,
    are now supported. Notably, Aix 2.x and 3.x.
  * The installation hints for Solaris 2 have been improved.
    WAIT_TYPE is defined as int, and if NBPC can't be found for
    getpagesize(), it'll try PAGESIZE instead. Thanks to Kalkin for these.
  * Installation for AIX has been improved. AIX required inclusion of
    sys/select.h in the IDENT stuff.
  * Various rewrites of tests against NOTHING to use the GoodObject()
    macro instead. Thanks to Ralph Melton for some of these.
  * Got rid of some warnings when compiling mkindx

 
& 1.50dune1

DuneSource pl1 changes

Major changes:

  * Whem players attempt to log in to a Guest character that is already
    in use, the server tries to find one that isn't, and connects the
    player to that. If it can't, you get the old behavior (two connections
    to the single Guest).
  * Extended @mail system is available with many new mail commands.
  * Dump warnings 5 minutes and 1 minute before non-forking
    dump, and optional announcement at completion of dump.
  * Guest players may not set attributes.
  * Kill command can be disabled.
  * @aconnect/@adisconnect messages on individual rooms.

Changes to commands:

  * CD command at connection screen allows Wizards to connect to the game
    DARKly.
  * @sitelock command for on-the-fly sitelocking by Wizards.
  * @dump/paranoid can try to fix the db in memory, too.
  * @decomp/db, produces decomp output using dbref of object instead
    of its name.
  * ex/mortal, shows examine output as if player were mortal.
  * Option to rename @destroy to @recycle, since @dest and @desc are
    easy to confuse.
  * @restart command. Combines an @halt with triggering @startup.
  * @hide now provides feedback when used.
  * @find may be restricted to royalty, the only ones for whom it might
    possibly be useful.
  * @function now lets you know when it updates an @function.
  * The old (pl8?) @channel <channel>=<function> syntax is back, along
    with @channel/<function> <channel>, for those who liked it.
  * @grep can be either case-sensitive or not (the default).
  * If you don't specify the destination attribute in @cpattr, it
    assumes you want the same attrib name as the source attrib.
  * @mvattr, like @cpattr, but removes old attribute.
  * ANSI players now see their @edit additions in bold.
  * Rooms and exits can @emit. Rooms @emit into themselves (like @remit),
    and exits @emit to their source room.
  * @squota can now be given quota levels as +<quota> or -<quota>, to
    increase or decrease a player's quota from its current level.

Changes to functions:

  * encrypt() and decrypt() functions.
  * hidden() function for checking if a player is hidden.
  * hastype() function for checking if a thing is a given type.
  * pemit() function sends pemits to a list of objects.
  * lparent() function, returns object's parent, grandparent, etc.
  * quota() function, returns a player's quota.
  * N-dimensional vector arithmetic functions: vadd(), vmul(), vsub(),
    vmag(), vdim(), vunit()
  * haspower() can be restricted to admin.
  * "Lower math" functions: shr(), shl(), inc(), dec()
  * beep() with no arguments produces a single beep.
  * pmatch() will now accept *player or #dbref arguments.
  * lsearchr() function does an lsearch *backwards* through the db.

Changes to flags/powers:

  * Flags can be defined as dark (invisible to all but God), 
    mdark (invisible to mortals), and odark (invisible to mortals who don't
    own the object) in flags.c.
  * @cemit can be granted as a power
  * The ability to set/unset the DEBUG flag on objects the player controls
    can be granted as the Can_Debug power. (Idea by Kenric@DuneII)
  * Optional COLOR flag to control reception of ANSI color apart from
    ANSI hiliting.
  * OPAQUE flag on exits. OPAQUE exits in translucent rooms look
    like normal exits in non-translucent rooms.
  * FIXED flag prevents @tel and home.
  * DARK Wizards need not trigger @aenter.
  * The SUSPECT flag is now abbreviated 's'.
  * NO_LEAVE flag on objects prevents 'leave' command from working in them.
    Useful for flying vehicles and the like.

Minor changes:

  * &adestroy attribute triggered when object is dest'd.
  * Player/room/object names can appear automatically in bold.
  * Dark and Hidden players are distinguished on the admin WHO list
  * Dark and Hidden players are indicated on the admin DOING list
  * Wizards who idle are set hidden, not DARK. Same for royalty.
  * DARK wizards enter and leave @chat channels silently.
  * Royalty can now see the Wizard @channel/list
  * The mortal @channel/list lists only public channels.
  * @idle/@haven/@away attribs which evaluate to nothing are not
    sent to the paging player.

--- Fixes ---

  * TRANSPARENT variable exits don't crash the MUSH when looked at.
  * @channel/delete and @channel/privs take the right number of arguments
  * @decomp now decompiles flags properly.
  * When logins are disabled, players may not create characters.
  * The controls() function is made safer. Defining SAFER_CONTROL prevents
    anyone but God from controlling God, any non-wizard from controlling
    anything with a wizbit, and any non-admin from controlling anything with
    a roybit.
  * Player names are made safer. Defining SAFER_PLAYER_NAMES prevents the
    use of [, ], %, and \ in player names.
  * The strupper() function is made safer.
  * Mortals can remove the DEBUG flag on objects they own.
  * The set functions now take delimiters like they should.
  * Revwords() takes a delimeter, like it should.
  * @config displays whether function side effects are available correctly.
    It used to get it backwards.
  * Some checks against NOTHING have been changed to use the GoodObject()
    macro in look.c and possibly other places.
  * It's more difficult for players to enter themselves.
  * PLAYER_NAME_SPACES works right now, use double-quotes around 
    multi-word names.
  * haspower() on unknown powers now returns #-1 NO SUCH POWER instead
    of a null string.

& 1.50p10

Patchlevel 10 Changes

New additions:
  - Guest is now a power. Set it on a player to restrict its command set. 
  - New power Announce, which controls the ability to @wall. 
  - Global r-registers are now preserved across the queue. 
  - '#@' now replaces to the list-place for iter() and @dolist. 
  - Timers now operate on absolute time, rather than game ticks. 
  - Checks of $commands now obey parent uselocks. 
  - Variable exit destinations.  When you attempt to go through one of these
      exits, it evaluates the exit's DESTINATION attribute as a
      U-function, and uses the result accordingly. 
  - Rooms can now be set LISTENER. The flag name has been changed to MONITOR
      (which is what it's called in 2.0), with LISTENER as an alias.
      (Thus the MONITOR flag on things/rooms and on players mean
      different things.) 
  - If the EXTENDED_ANSI option is turned on, it enables the ansi() function,
      allowing ANSI control codes to be used.  
  - New wizard command @log can write information to a log file.  
  - @oemit now takes its target location from the person to exclude, not
      the person who is doing the @oemit (consistent with 2.0 behavior,
      and more flexible).  
  - @ps now follows the 2.0 syntax. Items deleted from the queue are now
    counted, and the entire thing calls a single generic routine.

Function changes:
  - More functions take delimiters. The newly-modified ones are:
      extract(), filter(), first() fold(), iter(), match(), member(), munge(),
      rest(), revwords(), setdiff(), setinter(), setunion(), shuffle(), 
      sort(), splice(), wordpos(), words()
  - If function side effects are configured as enabled, the functions link(),
      set(), parent(), lock(), clone() and name() can make db changes.
  - controls() has been tweaked so it returns '#-1 <error message>' on invalid
      objects, for consistency with other functions and with 2.0.
  - delete() is now ldelete(). The new delete() function deletes characters
      from a string. This is a change to be consistent with 2.0.
  - lcon() is now consistent with the 2.0 convention -- no more partial lists;
      either you can get the entire list, or you can't get it at all.
  - locate() has some new parameters: 'c' matches 'carried exits', supported
      by match_carried_exit(). Exit matching now calls match_exit_internal().
      'X' allows random choice if the result is ambiguous (#-2).
  - lsearch() now takes an EVAL class.
  - objeval() evaluates its first argument.
  - owner() now can take an object/attribute pair.
  - sort() autodetects for floating point, and uses qsort.
  - User-defined functions, such as U(), now return an empty string, rather
     than #-1 SOME ERROR MESSAGE, because 2.0 behavior is to return an empty
     string, and, generally, the empty string is easier to handle.

New functions:
  - New substitution: %qN is equivalent to r(N)  (also twiddled v() slightly)
  - Findable(). Can <a> locate <b>? Useful for those WHO-list-type globals.
  - Foreach(). Works basically like MAP(), but on strings.
  - Haspower(). Like hasflag(), but for powers.
  - Ports(). Returns the network descriptors a player is connected to.
  - Rloc(). Returns an object's location at a variable level.
  - Sortby(). Sorts a list by an arbitrary u-function.
  - Stripansi(). Strips the ANSI codes from a string.

Important other changes:
  - Fixed a bug in the checking of ZMO locks in the game's internal controls().
      The privs parameter to eval_eboolexp() needs to be the ZMO in question,
      rather than the object itself, in order for attribute locks to work as
      would seem logical (the object being checked shouldn't even factor into
      the equation, since by definition zone control is based solely upon
      the ZMO's enter lock).
  - Because people seem to want it back, the "pose" command is back, together
      with a /nospace switch.
  - TRACE is now an alias for the DEBUG flag.
  - Player lookups on dbrefs work (i.e, '*#1' is now valid).
 
& 1.50p9

Patchlevel 9 Changes

New additions:
  - @cemit command emits to a channel.
  - "Quiet" channels added. They don't show connect/disconnect or joined/left.
  - '%c' returns the current command.
  - @dolist/notify queues a '@notify me' after queueing the list commands.
  - @pemit/list pemits to a list of dbrefs. No more @dolist/@pemits needed!

New functions:
  - Center(): centers text on a field.
  - Cwho(): returns the names of players on a channel.
  - Isdbref(): checks if something's a valid dbref.
  - Map(): like iter() over a user-defined function.
  - Mix(): like map(), but takes two lists.
  - Munge(): combines lists, allowing you to do things like conversion sorts.
  - Objeval(): evaluates an expression from another object's viewpoint.
  - Trim(): trims characters at the beginning and/or end of strings.
 
Other changes:
  - Add(), And(), Mul(), and Or() can take up to 100 arguments.
  - Channel commands are now switch-form.
  - Debug-flag output is neater and more useful.
  - Default input line length is 2K.
  - @grep output format is neater and shorters. 
  - @link can link already-linked exits.
  - Locate() can take an 'l' parameter to check object location.
  - Output line termination is now carriage-return-newline.
  - Starting quota is now a conf option.
  - @wipe can take an object-attribute pattern.
 
Important bugfixes and modifications:
  - Controls() now obeys the inherit flag.
  - Enactor (%#) in idesc evaluates to the player, not to the object.
  - The escape character is stripped by the parser.
  - Listening objects trigger enter/leave messages in DARK rooms.
  - Matching is only done on exits if there is no exact match after trying
    all other possibilities.
  - Non-INHERIT things can no longer @parent things which are INHERIT.
  - Delete(foo%b,1) and Delete(foo,1) now return the same result.
  - Replace(foo%b,1,Test) and Replace(foo,1,Test) now return the same result.
  - Taking from an object is now governed by control, as well as ENTER_OK.

& 1.50p8
 
Patchlevel 8 Changes
 
Major new features:
  - Players can now set an @alias.
 
New additions:
  - Player ZONE flag and ZoneMaster control provide "safer" zones.
  - @hide command hides player from WHO list.
  - @oemit can take a room dbref, behaving like @remit with an exception.
  - mortal_dark and wizard attribute flags are settable. 'm' and 'w'.
  - @pcreate power added.
  - Channels can be wiped.
 
New functions:
  - Visible(): can one object examine another object or attribute?
  - Items(), Element(): like Words() and Match(), but for arbitrary separators.
  - Delete(), Replace(), Insert(): list-manipulation, arbitrary separators.
  - Orflags(), Andflags(): check multiple flags.
  - Fullname(): full name of an object.
  - Many floating point functions.
 
Other changes:
  - Lattr() can take an <obj>/<wildcard> pattern.
  - @prefix and @inprefix do pronoun substitution.
  - @search can take an 'eval' parameter.
  - No second arg to @lock or @link unlocks/unlinks.
  - Mail() can now, for wizards, give info about other players' mail.
  - Sort() now 'autodetects' sort type. Nsort() has been removed.
  - Get_eval() is an alias for U() rather than Eval().
  - Non-listening objects trigger @aenter and @aleave.
  - @search, @find, and examine always ignore the MYOPIC flag.
  - Queue deposits get refunded at startup.
  - Words() uses ' ' as the delimiter, _not_ any whitespace.
 
Major bugfixes:
  - Many problems with flags have been fixed.
  - "#123's foo" is no longer matched the same as "#123".
  - Switch() nesting behaves properly.
  - Parser bug with '/' in pre-parsed attribute names fixed.
  - Remove() no longer screws up on things like 'remove(#434 #43 #22,#43)'
  - Index() and friends no longer screw up on null separators.
  - Squish() trims leading spaces properly.
  - Various bugs with setfunctions fixed.
  - Function recursion bug fixed.
  - @scan no longer chokes on '='.
  - no_inherit attribute flag works for real.
 
& 1.50p6

Patchlevel 6 Changes
 
Major bugfixes:
  - Eval locks work with get(), ufun(), etc.
  - Rooms can use @trigger again.
  
Changes to the parser:
  - Spaces are no longer added around equals signs in 'say', 'pose', etc.
  - The construction '<name of object> <command>' can no longer be used to
    force a nearby object. '<dbref of object> <command>' still works.
  - ITER() is much better-behaved; escapes and braces in the second
    argument are no longer needed. It also now works properly with ufun().
  - switch() can now take up to 100 arguments. Arguments to it are not
    evaluated until needed.
  
Miscellaneous changes:
  - Royalty can now set themselves DARK, but this affects _only_ their
    visibility on the WHO list and related functions; they still appear
    in the visible contents list of a room, on channel who, etc.
  - Royalty can set themselves MONITOR.
  - The TERSE flag suppresses _only_ auto-look messages (so if you type
    'look here' while TERSE, you will get the description of the room).
  - VAL() function returns the leading numeric prefix of a string.
  - INDEX() is an extract()-like function which works for an arbitrary
    character separator.
  - WHERE() returns the "true" location of an object.
  - HOME(), etc. now works on objects you do not control but are VISUAL.
  - REPEAT() of something zero times returns a blank string, not an error.
  - Commands done in GOING rooms are no longer considered invalid.
  - "@parent <object>" by itself unparents an object.
  - Exits in the same room as you are considered "nearby".
  - All attribute fetches use the same permission checks. LINK_OK on a
    zone object no longer allows zfun() to be done on the object if
    the attribute cannot normally be read.
  - Attribute flag sets added (@set obj/atr = flag). There are three
    settable flags, 'visual', 'no_command', and 'no_inherit'. 'Examine'
    displays these as 'v', '$', and 'i'.
  - The lcon(), lexits(), con(), exit(), and next() functions now check
    permissions differently. You can use these functions on a location 
    that you own, or in a location that you are in and is not DARK.
    If you cannot check the room, these functions will return #-1 even
    if you have objects/exits in the room. This behavior is identical
    to TinyMUSH 2.0's, and provides more privacy.
  - 'examine' output for objects you don't control is now similar to
    TinyMUSH 2.0's. The option to examine public attributes by default
    is configurable.

& 1.50p7

Patchlevel 7 Changes
 
Major new features:
  - Powers system. Individual objects and players can be given the ability
    to do special things, such as "examine anything", "teleport anywhere",
    "boot players", etc. The BUILDER and IMMORTAL flags are now powers.
  - Expanded flag system. Some flags are valid for more types of objects,
    and flag lookups are quicker. The flag order is now alphabetized,
    first by "generic" object type, then by specific object type.
  - User-defined global functions, which behave just like built-in MUSH
    functions, but are programmed in MUSH in a UFUN() format (i.e. you
    can call them like any other function, i.e.  '@emit [my_function(foo)]')
    The "@function" command is used to define and list these functions.
  - Local variables (registers, numbered 0-9) which are retained for
    the duration of a single command. Extremely useful for storing long
    function evaluations, especially if you are programming "switchless".
    The setq() and r() functions are used to set and retrieve the registers.
  
New additions:
  - "no_clone" attribute flag (do not copy attribute when object is @clone'd)
  - "@config/functions" lists all functions.
 
New functions:
  - squish() removes leading and trailing spaces from a string, and crunches
    inter-word spaces down to a single space.
  - filter() returns members of a list for which a user-def'ed function
    evalutes to true ("1").
  - fold() recursively evaluates a user-def'ed function and list.
  - rjust() and ljust() pad strings with spaces (or another fill character)
  - nsort() sorts a list of numbers.
  - shuffle() randomizes order of elements in a list.
  - scramble() randomizes order of characters in a string.
  
Other changes:
  - cat() can take an arbitrary number of arguments.
  - conn() and idlesecs() now recognize #dbref and *player. idle() is now
    an alias for idlesecs().
  - "Exits:" line in examine is back.
  - examine on non-existent attribute(s) returns "No matching attributes."
  - NO_COMMAND doesn't block ^, since you have to set the LISTENER flag anyway.
  - @config shows a couple more options.
  - The QUIET flag suppresses "Drained.", "Notified.", and "Halted."
  - Debug and Verbose output no longer clobber the stack.
  - switch() and iter() nested within other functions works properly.
  - Players cannot enter objects remotely via dbref.

& Entries
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 "                         $-commands                $-commands2
 +                         1.50dune1                 1.50dune2
 1.50p10                   1.50p11                   1.50p12
 1.50p13                   1.50p14                   1.50p6
 1.50p7                    1.50p8                    1.50p9
 1.6.0                     1.6.1                     1.6.10
 1.6.2                     1.6.3                     1.6.4
 1.6.5                     1.6.6                     1.6.7
 1.6.8                     1.6.9                     1.7.0
 1.7.1                     :                         ;
 @-attributes              @-building                @-general
 @-wizard                  @@                        @aahear
 @aclone                   @aconnect                 @adeath
 @adescribe                @adestroy                 @adisconnect
 @adrop                    @aefail                   @aenter
 @afailure                 @afollow                  @ahear
 @aidescribe               @aleave                   @alfail
 @alias                    @allhalt                  @allquota
 @amhear                   @amove                    @apayment

For more, see Entries-2
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-2
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 @asuccess                 @atport                   @atrchown
 @atrlock                  @attribute                @ause
 @auto_chzone              @away                     @boot
 @cemit                    @channel                  @channel2
 @channel3                 @channel4                 @channel5
 @charges                  @chat                     @chown
 @chown/preserve           @chownall                 @chzone
 @chzone2                  @chzoneall                @clock
 @clock2                   @clone                    @command
 @comment                  @config                   @conformat
 @cost                     @cpattr                   @create
 @dbck                     @death                    @decompile
 @decompile2               @decompile3               @describe
 @destroy                  @destroy2                 @dig
 @dig2                     @disable                  @doing
 @dolist                   @drain                    @drop
 @drop_afailure            @drop_failure             @drop_ofailure
 @dump                     @ealias                   @edit
 @efail                    @elock                    @emit

For more, see Entries-3
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-3
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 @enable                   @enter                    @entrances
 @eunlock                  @exitformat               @failure
 @filter                   @filter2                  @find
 @firstexit                @fixdb                    @follow
 @force                    @force2                   @function
 @function2                @function3                @gedit
 @give_afailure            @give_failure             @give_ofailure
 @grep                     @grep2                    @halt
 @haven                    @hide                     @idescribe
 @idle                     @infilter                 @inprefix
 @kick                     @lalias                   @leave
 @leave_afailure           @leave_failure            @leave_ofailure
 @lemit                    @lfail                    @link
 @list                     @listen                   @listen2
 @listmotd                 @lock                     @lock2
 @lock3                    @lock4                    @lock5
 @lock6                    @lock7                    @lock8
 @log                      @mail                     @map
 @map2                     @motd                     @move

For more, see Entries-4
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-4
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 @mvattr                   @name                     @newpassword
 @notify                   @nuke                     @odeath
 @odescribe                @odrop                    @oefail
 @oemit                    @oenter                   @ofailure
 @ofollow                  @oidescribe               @oleave
 @olfail                   @omove                    @opayment
 @open                     @osuccess                 @otport
 @ouse                     @oxenter                  @oxleave
 @oxtport                  @parent                   @password
 @payment                  @pcreate                  @pemit
 @pemit2                   @poll                     @poor
 @power                    @prefix                   @ps
 @purge                    @quota                    @readcache
 @recycle                  @rejectmotd               @remit
 @restart                  @runout                   @rwall
 @rwallemit                @rwallpose                @scan
 @sdescribe                @search                   @search2
 @search3                  @select                   @set
 @set2                     @set3                     @sex

For more, see Entries-5
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-5
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 @shutdown                 @sitelock                 @sitelock2
 @speech_afailure          @speech_failure           @speech_ofailure
 @squota                   @startup                  @stats
 @success                  @sweep                    @switch
 @switch2                  @teleport                 @toad
 @tport                    @trigger                  @trigger2
 @ulock                    @undestroy                @unlink
 @unlock                   @unrecycle                @uptime
 @use                      @uunlock                  @vdolist
 @verb                     @verb2                    @verb3
 @verb4                    @version                  @wait
 @wall                     @wallemit                 @wallpose
 @wallprefix               @warnings                 @warnings2
 @warnings3                @wcheck                   @whereis
 @wipe                     @wizemit                  @wizmotd
 @wizpose                  @wizwall                  @zemit
 \\                        abode                     abs()
 acos()                    action lists              action2
 add()                     admin                     after()

For more, see Entries-6
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-6
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 ahelp                     alphamax()                alphamin()
 and()                     andflags()                anews
 ansi                      ansi()                    aposs()
 art()                     asin()                    atan()
 atrlock()                 attrib-ownership          attribute functions
 attribute list            attributes                attributes list
 attributes2               attributes3               attributes4
 audible                   audible2                  beep()
 before()                  being killed              boolean functions
 boolean values            boolean2                  brief
 builder                   cand()                    capstr()
 cat()                     cd                        ceil()
 cemit()                   center()                  ch
 changes                   channel-list              channels()
 chat                      chown_ok                  clients
 clone()                   cloudy                    code
 color                     combat_master             commands
 comp()                    con()                     conn()
 connected                 control                   control lock

For more, see Entries-7
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-7
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 control2                  controls()                convsecs()
 convtime()                copyright                 cor()
 cos()                     costs                     create()
 credits                   ctime()                   cwho()
 dark                      dark2                     database
 dbref #                   dbref functions           dbref number
 dbref2                    dbrefs                    debug
 debug2                    dec()                     decrypt()
 decrypt()                 default()                 delete()
 destroy_ok                die()                     dig()
 dist2d()                  dist3d()                  div()
 doing                     doing()                   drop
 drop-tos                  e()                       edefault()
 edit()                    element()                 elements()
 elock()                   emeritus                  emit()
 enactor                   encrypt()                 enter
 enter_ok                  entrances()               eq()
 equipment                 escape()                  eval()
 evaluation order          evaluation2               events

For more, see Entries-8
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-8
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 examine                   executor                  exit()
 exits                     exits2                    exp()
 extract()                 failure                   fdiv()
 feature                   fighter                   filter()
 findable()                first()                   fixed
 flag list                 flags                     flags list
 flags()                   flags2                    flip()
 floating                  floating point functions  floor()
 fold()                    fold2                     folderstats()
 follow                    followers()               force_white
 foreach()                 fullname()                function list
 functions                 functions2                gagged
 gender                    get                       get()
 get_eval()                getvalue()                give
 global commands           globals                   go
 going                     goto                      grab()
 graball()                 grep()                    grepi()
 gt()                      gte()                     halt
 hasattr()                 hasattrp()                hasattrpval()

For more, see Entries-9
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-9
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 hasattrval()              hasflag()                 haspower()
 hastype()                 haven                     help
 here                      hidden()                  home()
 homes                     idle()                    idlesecs()
 if()                      ifelse()                  inc()
 index                     index()                   info
 information functions     inherit                   inherit2
 inlist()                  insert()                  interiors
 interiors2                inventory                 isdaylight()
 isdbref()                 isnum()                   isword()
 items()                   iter()                    iter2
 judge                     jump_ok                   jury_ok
 kill                      killed                    last
 last()                    lastsite                  lattr()
 lcon()                    lcstr()                   ldelete()
 leave                     left()                    lemit()
 lexits()                  light                     link()
 link_ok                   linking                   list functions
 listening                 listening2                listening3

For more, see Entries-10
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-10
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 lists                     lit()                     ljust()
 ln()                      lnum()                    loc()
 local                     local @aconnect           local @adisconnect
 local @auto_chzone        local @chown/preserve     local @chzone
 local @drop_afailure      local @drop_failure       local @drop_ofailure
 local @give_afailure      local @give_failure       local @give_ofailure
 local @leave_afailure     local @leave_failure      local @leave_ofailure
 local @sdescribe          local @set                local @setq
 local @speech_afailure    local @speech_failure     local @speech_ofailure
 local @vdolist            local @wallprefix         local admin
 local combat flags        local combat_master       local control
 local control lock        local doing               local emeritus
 local equipment           local failure messages    local feature
 local fighter             local getvalue()          local help
 local hosts               local if()                local inheritance
 local inlist()            local killed              local mangle()
 local page lock           local parent lock         local parent subst
 local pemit_all           local r()                 local receive lock
 local removevalue()       local setq()              local setvalue()

For more, see Entries-11
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-11
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 local special attributes  local special flags       local variables
 local viter()             local who                 local1
 local2                    local3                    locate()
 locate2                   lock list                 lock types
 lock()                    locking                   locklist
 locks                     locktypes                 locktypes2
 log()                     logout                    look
 look2                     looping                   lparent()
 lsearch()                 lsearch2                  lstats()
 lt()                      lte()                     lwho()
 macros                    macros2                   mail()
 mail-admin                mail-folders              mail-other
 mail-reading              mail-sending              mailfrom()
 mailstatus()              mailtime()                mangle()
 map()                     master room               match()
 matchall()                math functions            max()
 me                        member()                  merge()
 mid()                     min()                     mix()
 mod()                     money                     money()

For more, see Entries-12
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-12
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 monitor                   mortal                    move
 mtime()                   mudname()                 mul()
 munge()                   mushcode                  mushcode2
 mwho()                    myopic                    name()
 nearby()                  neq()                     newbie
 newbie2                   newbie3                   news
 next()                    no_command                no_leave
 no_tel                    no_warn                   noleave
 non-standard attributes   nospoof                   not()
 nowarn                    num()                     obj()
 object parents            objeval()                 objmem()
 oemit()                   on-vacation               opaque
 open()                    or()                      orflags()
 owner()                   page                      page2
 parent                    parent lock               parent subst
 parent()                  parents                   parents2
 parents3                  parents4                  parents5
 parse()                   password                  pemit()
 pi()                      player                    playermem()

For more, see Entries-13
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-13
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 pmatch()                  poll()                    ports()
 pos()                     pose                      pose2
 poss()                    power()                   powers list
 powers list2              powers()                  powers2
 puppet                    puppets                   puppets2
 queue                     quiet                     quit
 quota()                   r()                       r-function
 rand()                    read                      receieve lock
 registers                 registers2                remit()
 remove()                  removevalue()             repeat()
 replace()                 rest()                    reverse()
 revwords()                right()                   rjust()
 rloc()                    rnum()                    robbery
 room                      room()                    round()
 royalty                   rpage                     rpage2
 rpage3                    rpage4                    rquota
 rules                     rwho                      s()
 s-function                safe                      say
 score                     scramble()                search()

For more, see Entries-14
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-14
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 search2                   secs()                    secure()
 semaphores                semaphores2               semaphores3
 semaphores4               semipose                  set()
 setdiff()                 setinter()                setq()
 setq2                     setq3                     setr()
 setting-attributes        setunion()                setvalue()
 sex                       shl()                     shr()
 shuffle()                 sign()                    sin()
 slay                      softcode                  sort()
 sortby()                  soundex()                 soundex2
 soundlike()               soundslike()              space()
 splice()                  spoofing                  sqrt()
 squish()                  stack                     starttime()
 startup                   stats()                   sticky
 strcat()                  string functions          strings
 stripansi()               strlen()                  strmatch()
 sub()                     subj()                    substitutions
 substitutions2            substitutions3            substitutions4
 success                   suspect                   switch()

For more, see Entries-15
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-15
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 switches                  t()                       table()
 take                      tan()                     tel()
 temple                    terse                     think
 time()                    timestring()              topics
 topics2                   transparent               transparent2
 trim()                    trunc()                   type()
 types of objects          types2                    u()
 u2                        u3                        ucstr()
 udefault()                ufun()                    ufun2
 ufun3                     ulocal()                  ulocal2
 unfindable                unfollow                  uninspected
 unregistered              use                       user-defined commands
 user-defined2             utility functions         v()
 v-function                vadd()                    val()
 valid()                   variables                 vdim()
 vdot()                    verbose                   verbs
 version()                 visible()                 visual
 viter()                   vmag()                    vmul()
 vsub()                    vunit()                   warnings

For more, see Entries-16
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

& Entries-16
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 warnings list             warnings list2            weirdansi
 where()                   whisper                   whisper2
 white                     who                       wildcards
 wipe()                    wizard                    wordpos()
 words()                   xget()                    xor()
 z_tel                     zemit()                   zfun()
 zone                      zone master rooms         zone masters
 zone objects              zone()                    zones
 zones2                    zones3                    zones4
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
